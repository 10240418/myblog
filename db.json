{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/LICENSE","path":"live2d-widget/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/README.md","path":"live2d-widget/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/autoload.js","path":"live2d-widget/autoload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/live2d.min.js","path":"live2d-widget/live2d.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/package.json","path":"live2d-widget/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/rollup.config.js","path":"live2d-widget/rollup.config.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu-tips.js","path":"live2d-widget/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu-tips.json","path":"live2d-widget/waifu-tips.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu.css","path":"live2d-widget/waifu.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-1.png","path":"live2d-widget/assets/screenshot-1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-2.png","path":"live2d-widget/assets/screenshot-2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-3.png","path":"live2d-widget/assets/screenshot-3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/demo/demo.html","path":"live2d-widget/demo/demo.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/demo/login.html","path":"live2d-widget/demo/login.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/index.js","path":"live2d-widget/src/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/message.js","path":"live2d-widget/src/message.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/model.js","path":"live2d-widget/src/model.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/tools.js","path":"live2d-widget/src/tools.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/utils.js","path":"live2d-widget/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/waifu-tips.js","path":"live2d-widget/src/waifu-tips.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/ww.md","hash":"a56e8e561c90b9b1f3f764a12ef53d6a18611de3","modified":1681179294983},{"_id":"source/404/index.md","hash":"f3af07fa14a0a9a4119ad2ab7637ecf23568f47a","modified":1680787906995},{"_id":"source/_posts/learn.md","hash":"2fe3ba1d3d6de29e34d2fd08121a77364309d05f","modified":1681142296334},{"_id":"source/contact/index.md","hash":"df200366f9e2c014b2b7957eed4ab9eb02cdde41","modified":1680787577697},{"_id":"source/_posts/我最喜欢的ww.md","hash":"3198241de2792bd50b7bb8858adc23b356fd16b5","modified":1681132775362},{"_id":"source/_data/friends.json","hash":"9022e3335f3deb54e9e889da60aeb8211acf3c6e","modified":1680787871675},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1680185133406},{"_id":"source/about/index.md","hash":"f73fae8e79d975b4efa7fc1805b620a2e3fffd08","modified":1680965788603},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1680787466957},{"_id":"source/friends/index.md","hash":"2be114a59665f3f4e39e39e1db1173e98d7b84c4","modified":1680787616297},{"_id":"source/tags/index.md","hash":"5ad11165bda96d8d1bbc3641c7cf4402894f8fa0","modified":1680787521775},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1680787225093},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"484a703733b839bd98e016ddb015f028c2593fef","modified":1680787225094},{"_id":"themes/hexo-theme-matery/README.md","hash":"93ae00dc14ff64e0b6f2faa3b14b12e4df135e2f","modified":1680787225095},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1680787225095},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"7013e184fe2bb5d3a9acaec32c6c18396a24a7bf","modified":1681178164116},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"f5c69f3e107474da19630e136abed5d87609e59f","modified":1680787225097},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"c6de0de68bdc75a8a905787a0526b70ee9821da8","modified":1680787225098},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"c3d2849348bd52fab85b38040818b429057d3101","modified":1680787225098},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"4d2bb286d9903f770344e11898bd3f13444760bf","modified":1680787225099},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1680787225099},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"190a389a85e524592f19c745adbaeef4214a2291","modified":1680787225096},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1680787225126},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"81e86c27cf247ce45cc1812f026e3877bdbd9bfb","modified":1680965337794},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"6deb819e47fe11edd2fc87a6296cae725a0275f9","modified":1680787225127},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1680787225128},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1680787225127},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1680787225128},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1680787225129},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"7e92c983794c5c4a2b16eca2452eb187316262ef","modified":1680787225129},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1680787225130},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"bb77d9347b95c91e4b6657539c1115d594884749","modified":1681137006885},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1680787225131},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"2d4388efab710c0af9621cfdca9be1b2425063f7","modified":1681130421028},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1680787225131},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"6f4cf7248ba14d07ab4a233fe68b93250c5b3e97","modified":1681130938170},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1680787225132},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1680787225132},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1680787225140},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1680787225101},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"442c710d69892eb56d3d257cf4c2e195e6913eea","modified":1680787225101},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"dee1bf78556a2422e2f6dfc9a7563f37806d9c9f","modified":1680787225102},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1680787225101},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1680787225102},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1680787225103},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1680787225103},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1680787225104},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"a924658cbc1a1aeafe9fa455b08bd495071285a1","modified":1680787225104},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1680787225105},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1680787225105},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"fc389471811701533740179f74a2e34f213b31f0","modified":1681043321602},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1680787225106},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1680787225106},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1680787225107},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1680787225107},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"57141ced81ceeb740c46f37ed87606d4f712c433","modified":1681132125464},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1680787225108},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"167486c9a47d3aacf52a6cc0018d5752cf0e8dfc","modified":1680968168067},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1680787225109},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1680787225109},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"f3d6b20ac07f1b096c5cf0b091523867fd4fd0b5","modified":1681136971740},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"c9ce806110db632d29bdb0eea3b55b1fb4b1aff3","modified":1681136963341},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1680787225110},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1680787225111},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"05ac5b4df05e80e3123e464e7df2dfc589b0bbd2","modified":1680787225111},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"3590cebe5d6729300f2ac83ff9e0ceceb66da4b9","modified":1680787225112},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1680787225112},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1680787225112},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1fb43f421de58aa24458f7d4a4cda44b8a3d62cc","modified":1680787225113},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1680787225113},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1680787225114},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ab6de30729d48669476372ccd4aefa7e15d92c38","modified":1680787225114},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"4218ed406c43ed781fe78ad8bf1834fa4b76b049","modified":1680787225115},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"fd9b1418221d7bdf8688625f7ae2c84b7f402dce","modified":1681179727516},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"d1d7c4da3d56f42541eea965a6ebf1f8e2fff0f4","modified":1680787225116},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1680787225115},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"5ee3ade52bc7494226ed30e7dd4531d1d91ca67c","modified":1680787225117},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"beb3044890bfe7cfd26328565da4f8f955563424","modified":1680787225117},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1680787225118},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1680787225118},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"d84f2f464209f02f49917423ac5accf1c548f38c","modified":1680787225120},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1680787225120},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1680787225119},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1680787225120},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1680787225122},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1680787225121},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1680787225122},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1680787225123},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1680787225123},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1680787225124},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"5f64edd00d0a7c3b5e90d5ff99c9ebba61482d75","modified":1680787225124},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1680787225125},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1680787225125},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"c2f785f4986d6ed1da0d1f2cd339f33754625004","modified":1680787225125},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"328a49b26ce663d9824c53aced118db4d55f2ac7","modified":1680787225135},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"f59b2f1351d7977b676a4d51634b7dad648d3e99","modified":1680787225135},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1680787225136},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"541bc0b481beee921c62d0e84b61b124c95d2d01","modified":1680787225136},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1680787225137},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1680787225137},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"36d90a4b90df89c8fdc588203e394903b11747c8","modified":1681136953947},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1680787225139},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1680787225139},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1680787225139},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"52b3b36a0ed3db3bdf8bf1f999e37731078c485b","modified":1680787225138},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1680787225142},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"713eca7dcc8d4d02a03652367abc1afcc74e6c75","modified":1681136948156},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"72fac8fd3671f3525a574423985ee522958989d3","modified":1680787225144},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"8ab118a6f3e115efb50283c0fe408ad91ce7021b","modified":1680787225144},{"_id":"themes/hexo-theme-matery/source/live2d-widget/.gitignore","hash":"c1ab1464f9ac7ebdb1902860b987a68ba0765c65","modified":1681050508807},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"8db5b764f940614a209a332a4a11a53e5ea52fbc","modified":1680787225143},{"_id":"themes/hexo-theme-matery/source/live2d-widget/autoload.js","hash":"98051eeceaa3608dc49d951a88f72f643bcf00a1","modified":1681050680717},{"_id":"themes/hexo-theme-matery/source/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1681050508813},{"_id":"themes/hexo-theme-matery/source/live2d-widget/README.md","hash":"d267e7d02cee769153c2a8f5cd6c4812e41e64d4","modified":1681050508824},{"_id":"themes/hexo-theme-matery/source/live2d-widget/package.json","hash":"02c2acc648ec88aa81c9262a33847aba50e87d6b","modified":1681050508860},{"_id":"themes/hexo-theme-matery/source/live2d-widget/rollup.config.js","hash":"3489dc2bf3ce120c86c1551fdd674a3a8c2881a6","modified":1681050508872},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu-tips.js","hash":"9c9f24114e4e2e27bf0658ba01f5702d158dc658","modified":1681050508883},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu-tips.json","hash":"ac969016a67c962336aabba5641681bb350f5785","modified":1681050508893},{"_id":"themes/hexo-theme-matery/source/live2d-widget/waifu.css","hash":"20500dafb16ecb0c18e760aaadac07b023baa15a","modified":1681050508904},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1680787225240},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1680787225252},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1680787225280},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"18415c69461d706cf8039580cc79d00c029c637c","modified":1680787225133},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1680787225273},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1680787225133},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"98e7c48678c69f089d0d42f6d005c83265e9f400","modified":1680787225134},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1680787225145},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1680787225146},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1680787225146},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1680787225147},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1680787225148},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"ff60e62a9486505283582e8ad9226b35ba93d5c5","modified":1680787225148},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1680787225162},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1680787225163},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1680787225162},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1680787225164},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1680787225163},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1680787225164},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1680787225164},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1680787225165},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1680787225167},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1680787225166},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1680787225174},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1680787225181},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"4c0d5510ea487b0fe63e96464ab0b381565cc273","modified":1680787225175},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1680787225183},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1680787225184},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1680787225183},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1680787225185},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1680787225186},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"137e1c0f71e472fb7004c1832972287fb2dfc343","modified":1680787225192},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1680787225210},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1680787225216},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1680787225217},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1680787225217},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1680787225218},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1680787225218},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1680787225219},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1680787225219},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1680787225220},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"07b1e7932403b38aebb1c024ef3c3f5bb0c6aa2e","modified":1680787225221},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"1ddc9448fbba8915f9452b4f0a970f33635e46a7","modified":1680787225221},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1680787225231},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1680787225225},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eceb98f80392cb57df1af5b160d85924f69fb2e0","modified":1680787225235},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"1aec6cfcbf8c833f728b8736060fe5690e19d92f","modified":1680787225222},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1680787225232},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1680787225235},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1681050508923},{"_id":"themes/hexo-theme-matery/source/live2d-widget/demo/demo.html","hash":"128c05b681c9579b84d91a1d15d925904ef92814","modified":1681050508974},{"_id":"themes/hexo-theme-matery/source/live2d-widget/demo/login.html","hash":"5df56deaeea62f81ea7f41343d91232229b87f21","modified":1681050508984},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/index.js","hash":"a2670fe54cba051e0ad47048603c7630e5b613b4","modified":1681050509000},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/utils.js","hash":"cf0bf51117a9044dc26373854caa8b622f043d78","modified":1681050509045},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/model.js","hash":"a7742f3940bd157582c968f85feba299a1d3a783","modified":1681050509023},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/message.js","hash":"595e2090df09ef1e50916b6d4b12a8fe30377b27","modified":1681050509012},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/tools.js","hash":"d3fd7073b6352c9be4227a386ca84d910f83d4e9","modified":1681050509034},{"_id":"themes/hexo-theme-matery/source/live2d-widget/src/waifu-tips.js","hash":"7887603444c52f54875541a111b9a6632bac970a","modified":1681050509056},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1680787225250},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1680787225250},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1680787225251},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1680787225251},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1680787225256},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1680787225258},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1680787225260},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1680787225261},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1680787225266},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1680787225267},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1680787225264},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1680787225266},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1680787225268},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1680787225270},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1680787225272},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1680787225272},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1680787225281},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1680787225281},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1680787225154},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1680787225154},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1680787225187},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1680787225160},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1680787225187},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1680787225161},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1680787225188},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1680787225188},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1680787225189},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"c55278b00976c96e1df949ca5afee79b8ab385b2","modified":1680787225191},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1680787225189},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1680787225190},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1680787225190},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1680787225226},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1680787225229},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1680787225227},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1680787225227},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1680787225229},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1680787225231},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1680787225230},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1680787225173},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1680787225182},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"4cd5ddc413b3024d7b56331c0d0d0b2bd933f27f","modified":1680787225184},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1680787225244},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1680787225241},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1680787225245},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1680787225254},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1680787225255},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1680787225257},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1680787225258},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1680787225260},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1680787225262},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1680787225262},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1680787225263},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1680787225265},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1680787225268},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1680787225271},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1680787225273},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"6ceed6950e44336bb51f1b19d4658e4324afcebd","modified":1680787225151},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1680787225153},{"_id":"themes/hexo-theme-matery/source/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1681050508849},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1680787225253},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"104613de917a8576ff26aaa36d1c0c7bb4730f4e","modified":1680787225168},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1680787225194},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1680787225193},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"c2f2b1b0346e28ceae19f4b3d174f033311aa060","modified":1680787225237},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"3a17de5f24e0437c3c681b15f147ceef3980736f","modified":1680787225239},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1680787225243},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1680787225247},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1680787225249},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1680787225278},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"9a8303b1c6334e2500da617810206ece45a8ac6b","modified":1680787225150},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1680787225153},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1680787225160},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1680787225141},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"e47dd1412564cd6aacc4e0a596fd83074a747870","modified":1680787225238},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1681050508958},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1680787225247},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1680787225280},{"_id":"themes/hexo-theme-matery/source/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1681050508941},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1680787225159},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"d1ec95821873a81eddf4e5698698b39d54d2a8cc","modified":1680787225234},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"80063546f828243e2345670701656b735fc3ead8","modified":1680787225225},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1680787225276},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1680787225172},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"1df59d7e5481ac2917c7043b28883393675dcaf9","modified":1680787225180},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"5755d222f96a897b9f509d2859be21996a3dbfd0","modified":1680787225215},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"3889e37cafaaace5e745ccd3e10c9255e32cae3a","modified":1680787225210},{"_id":"public/ww.html","hash":"39327383c268db449ebc8a0fee711b743c98b265","modified":1681182900758},{"_id":"public/about/index.html","hash":"9a857a8cdccac79d00817ca67a1acb5091c49438","modified":1681182900758},{"_id":"public/404/index.html","hash":"0f52b7ab7b5fddb0eb622c883cb85ecab59c6c2e","modified":1681182900758},{"_id":"public/contact/index.html","hash":"57bf5e6ba60263c99180837651be3ba20c565499","modified":1681182900758},{"_id":"public/friends/index.html","hash":"3ef9d2119419f304fed82993dc8fd286adfc2c0d","modified":1681182900758},{"_id":"public/categories/index.html","hash":"ce0f0582708b11e9ebda17bb8ec9bdfe6d29f1d9","modified":1681182900758},{"_id":"public/tags/index.html","hash":"3aee8044f8ad7d6f34d3e4f02a41273a3f5543f6","modified":1681182900758},{"_id":"public/2023/04/10/learn/index.html","hash":"3819574276e64eea7b2300984680e22c526ccc14","modified":1681182900758},{"_id":"public/2023/04/10/我最喜欢的ww/index.html","hash":"38d9d4963008b524934e499721bc4d59d9875b7a","modified":1681182900758},{"_id":"public/2023/04/06/hello-world/index.html","hash":"6af7e9f44b787d7d72fd73bb3b88c871693e310d","modified":1681182900758},{"_id":"public/archives/index.html","hash":"ef2b3878b82f3e810f1e9614e1c0b2c838021c9f","modified":1681182900758},{"_id":"public/archives/2023/index.html","hash":"069cd70dece9714c8f369e14f59edfcc669c0412","modified":1681182900758},{"_id":"public/archives/2023/04/index.html","hash":"8d1cb77805f7eebba92c1f2ea26ff8b90e255d8c","modified":1681182900758},{"_id":"public/index.html","hash":"4d8d97c78a1991589d716ca0b4b3b47ee6704a7a","modified":1681182900758},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1681182900758},{"_id":"public/live2d-widget/LICENSE","hash":"31a3d460bb3c7d98845187c716a30db81c44b615","modified":1681182900758},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1681182900758},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1681182900758},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1681182900758},{"_id":"public/live2d-widget/assets/screenshot-1.png","hash":"4bd4d97a1fcaa5deb3cea1c0a102a895a15af32f","modified":1681182900758},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1681182900758},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"6e1c8f7b23f06ca4c727c805fda053dc1d9193d0","modified":1681182900758},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1681182900758},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1681182900758},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1681182900758},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1681182900758},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1681182900758},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1681182900758},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1681182900758},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1681182900758},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1681182900758},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1681182900758},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1681182900758},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1681182900758},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1681182900758},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1681182900758},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1681182900758},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1681182900758},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1681182900758},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1681182900758},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"94c83160bddccf08bd7424de40d738716f1eeb3a","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1681182900758},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1681182900758},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1681182900758},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1681182900758},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1681182900758},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1681182900758},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1681182900758},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1681182900758},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1681182900758},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1681182900758},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1681182900758},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1681182900758},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1681182900758},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1681182900758},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1681182900758},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1681182900758},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1681182900758},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1681182900758},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1681182900758},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1681182900758},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1681182900758},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1681182900758},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1681182900758},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1681182900758},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1681182900758},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1681182900758},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1681182900758},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1681182900758},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1681182900758},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1681182900758},{"_id":"public/css/indexcover.css","hash":"4dea2c489452c3efe70fa91a6a7678da64d895da","modified":1681182900758},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1681182900758},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1681182900758},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1681182900758},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1681182900758},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1681182900758},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1681182900758},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1681182900758},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1681182900758},{"_id":"public/live2d-widget/README.html","hash":"0596117accdda54dd039ed991079f02498fbdaa0","modified":1681182900758},{"_id":"public/live2d-widget/autoload.js","hash":"98051eeceaa3608dc49d951a88f72f643bcf00a1","modified":1681182900758},{"_id":"public/live2d-widget/rollup.config.js","hash":"3489dc2bf3ce120c86c1551fdd674a3a8c2881a6","modified":1681182900758},{"_id":"public/live2d-widget/package.json","hash":"80d2120042316b755e164d674cc036ed4a59491e","modified":1681182900758},{"_id":"public/live2d-widget/waifu-tips.js","hash":"9c9f24114e4e2e27bf0658ba01f5702d158dc658","modified":1681182900758},{"_id":"public/live2d-widget/waifu.css","hash":"20500dafb16ecb0c18e760aaadac07b023baa15a","modified":1681182900758},{"_id":"public/live2d-widget/waifu-tips.json","hash":"ea3ef8dc2f8be9b5734a9b03a4242dca9c81fce8","modified":1681182900758},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1681182900758},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1681182900758},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1681182900758},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1681182900758},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1681182900758},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1681182900758},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1681182900758},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1681182900758},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1681182900758},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1681182900758},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1681182900758},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1681182900758},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1681182900758},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1681182900758},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1681182900758},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1681182900758},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1681182900758},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1681182900758},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1681182900758},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1681182900758},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1681182900758},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1681182900758},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1681182900758},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1681182900758},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1681182900758},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1681182900758},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1681182900758},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1681182900758},{"_id":"public/live2d-widget/demo/demo.html","hash":"128c05b681c9579b84d91a1d15d925904ef92814","modified":1681182900758},{"_id":"public/live2d-widget/demo/login.html","hash":"5df56deaeea62f81ea7f41343d91232229b87f21","modified":1681182900758},{"_id":"public/live2d-widget/src/index.js","hash":"a2670fe54cba051e0ad47048603c7630e5b613b4","modified":1681182900758},{"_id":"public/live2d-widget/src/message.js","hash":"595e2090df09ef1e50916b6d4b12a8fe30377b27","modified":1681182900758},{"_id":"public/live2d-widget/src/model.js","hash":"a7742f3940bd157582c968f85feba299a1d3a783","modified":1681182900758},{"_id":"public/live2d-widget/src/tools.js","hash":"d3fd7073b6352c9be4227a386ca84d910f83d4e9","modified":1681182900758},{"_id":"public/live2d-widget/src/utils.js","hash":"cf0bf51117a9044dc26373854caa8b622f043d78","modified":1681182900758},{"_id":"public/live2d-widget/src/waifu-tips.js","hash":"7887603444c52f54875541a111b9a6632bac970a","modified":1681182900758},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1681182900758},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1681182900758},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1681182900758},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1681182900758},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1681182900758},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1681182900758},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1681182900758},{"_id":"public/live2d-widget/live2d.min.js","hash":"94383fb61de815c3f806ae3f11026bbcfe384082","modified":1681182900758},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1681182900758},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1681182900758},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1681182900758},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1681182900758},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1681182900758},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1681182900758},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1681182900758},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1681182900758},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1681182900758},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1681182900758},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1681182900758},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1681182900758},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1681182900758},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1681182900758},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1681182900758},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1681182900758},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1681182900758},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1681182900758},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1681182900758},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1681182900758},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1681182900758},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1681182900758},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1681182900758},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1681182900758},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1681182900758},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1681182900758},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1681182900758},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1681182900758},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1681182900758},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1681182900758},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1681182900758},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1681182900758},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1681182900758},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1681182900758},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1681182900758},{"_id":"public/live2d-widget/assets/screenshot-3.png","hash":"f89c6fdf44008e7d3c7a1aafe65dc39b212edb6c","modified":1681182900758},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1681182900758},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1681182900758},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1681182900758},{"_id":"public/live2d-widget/assets/screenshot-2.png","hash":"76b844653136184c573b3632e12296e008a7ff5c","modified":1681182900758},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1681182900758},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1681182900758},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1681182900758},{"_id":"source/_posts/img.png","hash":"2908ac318c2f963d29cb2e8322d7dfa78498499a","modified":1681746668455},{"_id":"source/_posts/img_1.png","hash":"f241dddf6452fc32b87eca55a030a0a4df7638e2","modified":1681746741158},{"_id":"source/_posts/js1.md","hash":"c6c2b10f5a04eec455f4ed5d6e32bee63c30c2bf","modified":1681905346158},{"_id":"source/_posts/js.md","hash":"eb650cf254b4fc032fc45bd489196e1fd5aad7cd","modified":1681266022656},{"_id":"source/_posts/Studyplan.md","hash":"dc18b43b214f7911878071c5c6bce7c72b06604e","modified":1683130255204},{"_id":"source/_posts/大二下.md","hash":"f6e1b7195885391b61ba14476d918a6e71893201","modified":1683635312064},{"_id":"source/_posts/android.md","hash":"4980784848d7d173c729fb2b4c3c7918ff23cbeb","modified":1683255014784},{"_id":"source/_posts/dayandday.md","hash":"2a7125fad058ce188af361924e5036a380b0cac6","modified":1684834455914},{"_id":"source/_posts/ww.md","hash":"3198241de2792bd50b7bb8858adc23b356fd16b5","modified":1681132775362},{"_id":"source/_posts/dailylearn.md","hash":"e250e42ed76d0416c37415e884ff8cb114073537","modified":1688311277631},{"_id":"source/_posts/forLove.md","hash":"cb905e4b5173303cf271bf5013aa9c7559d2b93d","modified":1687276561795},{"_id":"source/_posts/RedandBlackTree.md","hash":"1ed24cc7b8f8c64aeafa093c51d4d5a611289624","modified":1688310254878},{"_id":"source/_posts/JavaLiu.md","hash":"78d033294e0e1a6e4369d6f536e4897696f0a3eb","modified":1688808094931},{"_id":"source/_posts/java期末考试复习1.md","hash":"47cfa4d25da3352936804d009fa840ec8675b82e","modified":1688743964748}],"Category":[],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}],"Page":[{"title":"page","layout":"false","_content":"\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <script src=\"https://www.jq22.com/jquery/jquery-1.10.2.js\"></script>\n  <style type=\"text/css\">\n    @import url(\"https://fonts.googleapis.com/css?family=Montserrat:200,300,400,600\");\n    .more-pens {\n      position: fixed;\n      left: 20px;\n      bottom: 20px;\n      z-index: 10;\n      font-family: \"Montserrat\";\n      font-size: 12px;\n    }\n\n    a.white-mode,\n    a.white-mode:link,\n    a.white-mode:visited,\n    a.white-mode:active {\n      font-family: \"Montserrat\";\n      font-size: 12px;\n      text-decoration: none;\n      /* background: #212121; */\n      padding: 4px 8px;\n      color: #f7f7f7;\n    }\n\n    a.white-mode:hover,\n    a.white-mode:link:hover,\n    a.white-mode:visited:hover,\n    a.white-mode:active:hover {\n      background: #edf3f8;\n      color: #212121;\n    }\n\n    .title {\n      z-index: 9999 !important;\n      position: absolute;\n      left: 50%;\n      top: 42%;\n      transform: translateX(-50%) translateY(-50%);\n      font-family: \"Montserrat\";\n      text-align: center;\n      width: 100%;\n    }\n\n    .title h1 {\n      z-index: 99;\n      position: relative;\n      color: #fff;\n      font-weight: 100;\n      font-size: 70px;\n      padding: 0;\n      margin: 0;\n      line-height: 1;\n      text-shadow: 0 0 10px #ff006c, 0 0 20px #ff006c, 0 0 30px #ff006c,\n      0 0 40px #ff417d, 0 0 70px #ff417d, 0 0 80px #ff417d,\n      0 0 100px #ff417d, 0 0 150px #ff417d;\n    }\n\n    .title h1 span {\n      z-index: 99;\n      font-weight: 600;\n      padding: 0;\n      margin: 0;\n      color: #ffffff;\n    }\n\n    .title h3 {\n      z-index: 99;\n      font-weight: 200;\n      font-size: 26px;\n      padding: 0;\n      margin: 0;\n      line-height: 1;\n      color: #ffffff;\n      letter-spacing: 2px;\n    }\n\n    /* 爱心css */\n    canvas {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    .img {\n      position: absolute;\n      left: 50%;\n      top: 60%;\n      transform: translate(-50%, -50%);\n      width: 180px;   /* 160 */\n      height: 180px;\n    }\n    #pinkboard {\n      position: relative;\n      top: 0%;\n      left: 0%;\n      height: 429px;\n    }\n    .STARDUST1 {\n      position: relative !important;\n      top: -60px;\n    }\n    .STARDUST2 {\n      position: relative !important;\n      top: -40px;\n    }\n    .STARDUST3 {\n      position: relative !important;\n      top: -20px;\n    }\n    /* 星空css */\n    html,\n    body {\n      padding: 0px;\n      margin: 0px;\n      width: 100%;\n      height: 100%;\n      position: fixed;\n    }\n\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      -webkit-filter: contrast(120%);\n      filter: contrast(120%);\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n      /* background-color: black; */\n    }\n\n    .container2 {\n      /* z-index: 8; */\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n    }\n\n    .content {\n      width: inherit;\n      height: inherit;\n      width: 100%;\n      height: 100%;\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n    }\n\n    #universe {\n      width: 100%;\n      height: 100%;\n    }\n\n    #footerContent {\n      font-family: sans-serif;\n      font-size: 110%;\n      color: rgba(200, 220, 255, 0.3);\n      width: 100%;\n      position: fixed;\n      bottom: 0px;\n      padding: 20px;\n      text-align: center;\n      z-index: 20;\n    }\n\n    /* #footer {\n      position: absolute;\n      bottom: 0px;\n      height: 300px;\n      width: 100%;\n    } */\n\n    #scene {\n      height: 100%;\n      position: absolute;\n      left: 50%;\n      margin-left: -800px;\n    }\n\n    a {\n      text-decoration: none;\n      color: rgba(200, 220, 255, 1);\n      opacity: 0.4;\n      transition: opacity 0.4s ease;\n    }\n\n    a:hover {\n      opacity: 1;\n    }\n  </style>\n\n</head>\n\n<body>\n<audio autoplay=\"autopaly\">\n  <source src=\"renxi.mp3\" type=\"audio/mp3\" />\n</audio>\n<!-- 星空html -->\n<!-- <div> -->\n<div class=\"container2\">\n  <div class=\"content\">\n    <canvas id=\"universe\"></canvas>\n  </div>\n</div>\n<!-- </div> -->\n<div class=\"title\">\n  <!-- 星团文字html -->\n\n  <!-- 爱心html -->\n  <canvas id=\"pinkboard\"> </canvas>\n  <div class=\"main\"><h1>wei</h1>></div>\n\n</div>\n\n<!--爱心js  -->\n<script>\n  /*\n   * Settings\n   */\n  var settings = {\n    particles: {\n      length: 500, // maximum amount of particles\n      duration: 2, // particle duration in sec\n      velocity: 100, // particle velocity in pixels/sec\n      effect: -0.75, // play with this for a nice effect\n      size: 30, // particle size in pixels\n    },\n  };\n\n  /*\n   * RequestAnimationFrame polyfill by Erik M?ller\n   */\n  (function () {\n    var b = 0;\n    var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n    for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n      window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n      window.cancelAnimationFrame =\n              window[c[a] + \"CancelAnimationFrame\"] ||\n              window[c[a] + \"CancelRequestAnimationFrame\"];\n    }\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = function (h, e) {\n        var d = new Date().getTime();\n        var f = Math.max(0, 16 - (d - b));\n        var g = window.setTimeout(function () {\n          h(d + f);\n        }, f);\n        b = d + f;\n        return g;\n      };\n    }\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = function (d) {\n        clearTimeout(d);\n      };\n    }\n  })();\n\n  /*\n   * Point class\n   */\n  var Point = (function () {\n    function Point(x, y) {\n      this.x = typeof x !== \"undefined\" ? x : 0;\n      this.y = typeof y !== \"undefined\" ? y : 0;\n    }\n    Point.prototype.clone = function () {\n      return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function (length) {\n      if (typeof length == \"undefined\")\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      this.normalize();\n      this.x *= length;\n      this.y *= length;\n      return this;\n    };\n    Point.prototype.normalize = function () {\n      var length = this.length();\n      this.x /= length;\n      this.y /= length;\n      return this;\n    };\n    return Point;\n  })();\n\n  /*\n   * Particle class\n   */\n  var Particle = (function () {\n    function Particle() {\n      this.position = new Point();\n      this.velocity = new Point();\n      this.acceleration = new Point();\n      this.age = 0;\n    }\n    Particle.prototype.initialize = function (x, y, dx, dy) {\n      this.position.x = x;\n      this.position.y = y;\n      this.velocity.x = dx;\n      this.velocity.y = dy;\n      this.acceleration.x = dx * settings.particles.effect;\n      this.acceleration.y = dy * settings.particles.effect;\n      this.age = 0;\n    };\n    Particle.prototype.update = function (deltaTime) {\n      this.position.x += this.velocity.x * deltaTime;\n      this.position.y += this.velocity.y * deltaTime;\n      this.velocity.x += this.acceleration.x * deltaTime;\n      this.velocity.y += this.acceleration.y * deltaTime;\n      this.age += deltaTime;\n    };\n    Particle.prototype.draw = function (context, image) {\n      function ease(t) {\n        return --t * t * t + 1;\n      }\n      var size = image.width * ease(this.age / settings.particles.duration);\n      context.globalAlpha = 1 - this.age / settings.particles.duration;\n      context.drawImage(\n              image,\n              this.position.x - size / 2,\n              this.position.y - size / 2,\n              size,\n              size\n      );\n    };\n    return Particle;\n  })();\n\n  /*\n   * ParticlePool class\n   */\n  var ParticlePool = (function () {\n    var particles,\n            firstActive = 0,\n            firstFree = 0,\n            duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n      // create and populate particle pool\n      particles = new Array(length);\n      for (var i = 0; i < particles.length; i++)\n        particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function (x, y, dx, dy) {\n      particles[firstFree].initialize(x, y, dx, dy);\n\n      // handle circular queue\n      firstFree++;\n      if (firstFree == particles.length) firstFree = 0;\n      if (firstActive == firstFree) firstActive++;\n      if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function (deltaTime) {\n      var i;\n\n      // update active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].update(deltaTime);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].update(deltaTime);\n        for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n      }\n\n      // remove inactive particles\n      while (\n              particles[firstActive].age >= duration &&\n              firstActive != firstFree\n              ) {\n        firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n      }\n    };\n    ParticlePool.prototype.draw = function (context, image) {\n      // draw active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].draw(context, image);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].draw(context, image);\n        for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n      }\n    };\n    return ParticlePool;\n  })();\n\n  /*\n   * Putting it all together\n   */\n  (function (canvas) {\n    var context = canvas.getContext(\"2d\"),\n            particles = new ParticlePool(settings.particles.length),\n            particleRate = settings.particles.length / settings.particles.duration, // particles/sec\n            time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n      return new Point(\n              160 * Math.pow(Math.sin(t), 3),\n              130 * Math.cos(t) -\n              50 * Math.cos(2 * t) -\n              20 * Math.cos(3 * t) -\n              10 * Math.cos(4 * t) +\n              25\n      );\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function () {\n      var canvas = document.createElement(\"canvas\"),\n              context = canvas.getContext(\"2d\");\n      canvas.width = settings.particles.size;\n      canvas.height = settings.particles.size;\n      // helper function to create the path\n      function to(t) {\n        var point = pointOnHeart(t);\n        point.x =\n                settings.particles.size / 2 +\n                (point.x * settings.particles.size) / 350;\n        point.y =\n                settings.particles.size / 2 -\n                (point.y * settings.particles.size) / 350;\n        return point;\n      }\n      // create the path\n      context.beginPath();\n      var t = -Math.PI;\n      var point = to(t);\n      context.moveTo(point.x, point.y);\n      while (t < Math.PI) {\n        t += 0.01; // baby steps!\n        point = to(t);\n        context.lineTo(point.x, point.y);\n      }\n      context.closePath();\n      // create the fill\n      context.fillStyle = \"#ea80b0\";\n      context.fill();\n      // create the image\n      var image = new Image();\n      image.src = canvas.toDataURL();\n      return image;\n    })();\n\n    // render that thing!\n    function render() {\n      // next animation frame\n      requestAnimationFrame(render);\n\n      // update time\n      var newTime = new Date().getTime() / 1000,\n              deltaTime = newTime - (time || newTime);\n      time = newTime;\n\n      // clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // create new particles\n      var amount = particleRate * deltaTime;\n      for (var i = 0; i < amount; i++) {\n        var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n        var dir = pos.clone().length(settings.particles.velocity);\n        particles.add(\n                canvas.width / 2 + pos.x,\n                canvas.height / 2 - pos.y,\n                dir.x,\n                -dir.y\n        );\n      }\n\n      // update and draw particles\n      particles.update(deltaTime);\n      particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function () {\n      onResize();\n      render();\n    }, 10);\n  })(document.getElementById(\"pinkboard\"));\n</script>\n<!-- 星空js -->\n<script>\n  window.requestAnimationFrame =\n          window.requestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.msRequestAnimationFrame;\n\n  var starDensity = 0.216;\n  var speedCoeff = 0.05;\n  var width;\n  var height;\n  var starCount;\n  var circleRadius;\n  var circleCenter;\n  var first = true;\n  var giantColor = \"180,184,240\";\n  var starColor = \"226,225,142\";\n  var cometColor = \"226,225,224\";\n  var canva = document.getElementById(\"universe\");\n  canva.style.zIndex = 200;\n  var stars = [];\n\n  windowResizeHandler();\n  window.addEventListener(\"resize\", windowResizeHandler, false);\n\n  createUniverse();\n\n  function createUniverse() {\n    universe = canva.getContext(\"2d\");\n\n    for (var i = 0; i < starCount; i++) {\n      stars[i] = new Star();\n      stars[i].reset();\n    }\n\n    draw();\n  }\n\n  function draw() {\n    universe.clearRect(0, 0, width, height);\n\n    var starsLength = stars.length;\n\n    for (var i = 0; i < starsLength; i++) {\n      var star = stars[i];\n      star.move();\n      star.fadeIn();\n      star.fadeOut();\n      star.draw();\n    }\n\n    window.requestAnimationFrame(draw);\n  }\n\n  function Star() {\n    this.reset = function () {\n      this.giant = getProbability(3);\n      this.comet = this.giant || first ? false : getProbability(10);\n      this.x = getRandInterval(0, width - 10);\n      this.y = getRandInterval(0, height);\n      this.r = getRandInterval(1.1, 2.6);\n      this.dx =\n              getRandInterval(speedCoeff, 6 * speedCoeff) +\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120) +\n              speedCoeff * 2;\n      this.dy =\n              -getRandInterval(speedCoeff, 6 * speedCoeff) -\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120);\n      this.fadingOut = null;\n      this.fadingIn = true;\n      this.opacity = 0;\n      this.opacityTresh = getRandInterval(\n              0.2,\n              1 - (this.comet + 1 - 1) * 0.4\n      );\n      this.do = getRandInterval(0.0005, 0.002) + (this.comet + 1 - 1) * 0.001;\n    };\n\n    this.fadeIn = function () {\n      if (this.fadingIn) {\n        this.fadingIn = this.opacity > this.opacityTresh ? false : true;\n        this.opacity += this.do;\n      }\n    };\n\n    this.fadeOut = function () {\n      if (this.fadingOut) {\n        this.fadingOut = this.opacity < 0 ? false : true;\n        this.opacity -= this.do / 2;\n        if (this.x > width || this.y < 0) {\n          this.fadingOut = false;\n          this.reset();\n        }\n      }\n    };\n\n    this.draw = function () {\n      universe.beginPath();\n\n      if (this.giant) {\n        universe.fillStyle = \"rgba(\" + giantColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 2, 0, 2 * Math.PI, false);\n      } else if (this.comet) {\n        universe.fillStyle = \"rgba(\" + cometColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, false);\n\n        //comet tail\n        for (var i = 0; i < 30; i++) {\n          universe.fillStyle =\n                  \"rgba(\" +\n                  cometColor +\n                  \",\" +\n                  (this.opacity - (this.opacity / 20) * i) +\n                  \")\";\n          universe.rect(\n                  this.x - (this.dx / 4) * i,\n                  this.y - (this.dy / 4) * i - 2,\n                  2,\n                  2\n          );\n          universe.fill();\n        }\n      } else {\n        universe.fillStyle = \"rgba(\" + starColor + \",\" + this.opacity + \")\";\n        universe.rect(this.x, this.y, this.r, this.r);\n      }\n\n      universe.closePath();\n      universe.fill();\n    };\n\n    this.move = function () {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.fadingOut === false) {\n        this.reset();\n      }\n      if (this.x > width - width / 4 || this.y < 0) {\n        this.fadingOut = true;\n      }\n    };\n\n    (function () {\n      setTimeout(function () {\n        first = false;\n      }, 50);\n    })();\n  }\n\n  function getProbability(percents) {\n    return Math.floor(Math.random() * 1000) + 1 < percents * 10;\n  }\n\n  function getRandInterval(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  function windowResizeHandler() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    starCount = width * starDensity;\n    circleRadius = width > height ? height / 2 : width / 2;\n    circleCenter = {\n      x: width / 2,\n      y: height / 2,\n    };\n\n    canva.setAttribute(\"width\", width);\n    canva.setAttribute(\"height\", height);\n  }\n</script>\n<!-- 星团js -->\n<script>\n  let particles = [];\n  let microparticles = [];\n\n  const c1 = createCanvas({\n    width: $(window).width(),\n    height: $(window).height(),\n  });\n\n  const tela = c1.canvas;\n  const canvas = c1.context;\n\n  // $(\"body\").append(tela);\n  $(\"body\").append(c1.canvas);\n\n  class Particle1 {\n    constructor(canvas) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n      this.life = 1000 + Math.random() * 3000;\n\n      this.x =\n              $(window).width() / 2 + (Math.random() * 20 - Math.random() * 20);\n      this.y = $(window).height();\n      this.s = 2 + Math.random();\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.direction = this.random > 0.5 ? -1 : 1;\n      this.radius = 1 + 3 * this.random;\n      this.color = \"#ff417d\";\n\n      this.ID = setInterval(\n              function () {\n                microparticles.push(\n                        new microParticle(c1.context, {\n                          x: this.x,\n                          y: this.y,\n                        })\n                );\n              }.bind(this),\n              this.random * 20\n      );\n\n      setTimeout(\n              function () {\n                clearInterval(this.ID);\n              }.bind(this),\n              this.life\n      );\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      // this.canvas.lineWidth = 2;\n      this.canvas.shadowOffsetX = 0;\n      this.canvas.shadowOffsetY = 0;\n      // this.canvas.shadowBlur = 6;\n      this.canvas.shadowColor = \"#000000\";\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              this.direction *\n              Math.sin(this.progress / (this.random1 * 430)) *\n              this.s;\n      this.y -= Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        clearInterval(this.ID);\n        return false;\n      }\n\n      if (this.y < 0) {\n        clearInterval(this.ID);\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  class microParticle {\n    constructor(canvas, options) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n\n      this.x = options.x;\n      this.y = options.y;\n      this.s = 2 + Math.random() * 3;\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.radius = 1 + this.random * 0.5;\n      this.color = \"#4EFCFE\"; //this.random > .5 ? \"#a9722c\" : \"#FFFED7\"\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.canvas.lineWidth = 2;\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              Math.sin(this.progress / (100 / (this.random1 - this.random2 * 10))) *\n              this.s;\n      this.y += Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        return false;\n      }\n\n      if (this.y > this.h) {\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  var random_life = 1000;\n\n  setInterval(\n          function () {\n            particles.push(new Particle1(canvas));\n            random_life = 2000 * Math.random();\n          }.bind(this),\n          random_life\n  );\n\n  function clear() {\n    let grd = canvas.createRadialGradient(\n            tela.width / 2,\n            tela.height / 2,\n            0,\n            tela.width / 2,\n            tela.height / 2,\n            tela.width\n    );\n    grd.addColorStop(0, \"rgba(20,20,20,1)\");\n    grd.addColorStop(1, \"rgba(0,0,0,0)\");\n    // Fill with gradient\n    canvas.globalAlpha = 0.16;\n    canvas.fillStyle = grd;\n    canvas.fillRect(0, 0, tela.width, tela.height);\n  }\n\n  function blur(ctx, canvas, amt) {\n    // ctx.filter = `blur(${amt}px)`\n    // ctx.drawImage(canvas, 0, 0)\n    // ctx.filter = 'none'\n  }\n\n  function update() {\n    clear();\n    particles = particles.filter(function (p) {\n      return p.move();\n    });\n    microparticles = microparticles.filter(function (mp) {\n      return mp.move();\n    });\n    requestAnimationFrame(update.bind(this));\n  }\n\n  function createCanvas(properties) {\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = properties.width;\n    //   canvas.style.zIndex = 999;\n    canvas.height = properties.height;\n    let context = canvas.getContext(\"2d\");\n    return {\n      canvas: canvas,\n      context: context,\n    };\n  }\n  update();\n</script>\n\n\n\n</body>\n\n\n\n\n\n","source":"ww.md","raw":"\n---\ntitle: page\nlayout: false\n---\n\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <script src=\"https://www.jq22.com/jquery/jquery-1.10.2.js\"></script>\n  <style type=\"text/css\">\n    @import url(\"https://fonts.googleapis.com/css?family=Montserrat:200,300,400,600\");\n    .more-pens {\n      position: fixed;\n      left: 20px;\n      bottom: 20px;\n      z-index: 10;\n      font-family: \"Montserrat\";\n      font-size: 12px;\n    }\n\n    a.white-mode,\n    a.white-mode:link,\n    a.white-mode:visited,\n    a.white-mode:active {\n      font-family: \"Montserrat\";\n      font-size: 12px;\n      text-decoration: none;\n      /* background: #212121; */\n      padding: 4px 8px;\n      color: #f7f7f7;\n    }\n\n    a.white-mode:hover,\n    a.white-mode:link:hover,\n    a.white-mode:visited:hover,\n    a.white-mode:active:hover {\n      background: #edf3f8;\n      color: #212121;\n    }\n\n    .title {\n      z-index: 9999 !important;\n      position: absolute;\n      left: 50%;\n      top: 42%;\n      transform: translateX(-50%) translateY(-50%);\n      font-family: \"Montserrat\";\n      text-align: center;\n      width: 100%;\n    }\n\n    .title h1 {\n      z-index: 99;\n      position: relative;\n      color: #fff;\n      font-weight: 100;\n      font-size: 70px;\n      padding: 0;\n      margin: 0;\n      line-height: 1;\n      text-shadow: 0 0 10px #ff006c, 0 0 20px #ff006c, 0 0 30px #ff006c,\n      0 0 40px #ff417d, 0 0 70px #ff417d, 0 0 80px #ff417d,\n      0 0 100px #ff417d, 0 0 150px #ff417d;\n    }\n\n    .title h1 span {\n      z-index: 99;\n      font-weight: 600;\n      padding: 0;\n      margin: 0;\n      color: #ffffff;\n    }\n\n    .title h3 {\n      z-index: 99;\n      font-weight: 200;\n      font-size: 26px;\n      padding: 0;\n      margin: 0;\n      line-height: 1;\n      color: #ffffff;\n      letter-spacing: 2px;\n    }\n\n    /* 爱心css */\n    canvas {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n    .img {\n      position: absolute;\n      left: 50%;\n      top: 60%;\n      transform: translate(-50%, -50%);\n      width: 180px;   /* 160 */\n      height: 180px;\n    }\n    #pinkboard {\n      position: relative;\n      top: 0%;\n      left: 0%;\n      height: 429px;\n    }\n    .STARDUST1 {\n      position: relative !important;\n      top: -60px;\n    }\n    .STARDUST2 {\n      position: relative !important;\n      top: -40px;\n    }\n    .STARDUST3 {\n      position: relative !important;\n      top: -20px;\n    }\n    /* 星空css */\n    html,\n    body {\n      padding: 0px;\n      margin: 0px;\n      width: 100%;\n      height: 100%;\n      position: fixed;\n    }\n\n    body {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      -webkit-filter: contrast(120%);\n      filter: contrast(120%);\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n      /* background-color: black; */\n    }\n\n    .container2 {\n      /* z-index: 8; */\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n    }\n\n    .content {\n      width: inherit;\n      height: inherit;\n      width: 100%;\n      height: 100%;\n      background-image: radial-gradient(\n              1600px at 70% 120%,\n              rgba(33, 39, 80, 1) 10%,\n              #020409 100%\n      ) !important;\n    }\n\n    #universe {\n      width: 100%;\n      height: 100%;\n    }\n\n    #footerContent {\n      font-family: sans-serif;\n      font-size: 110%;\n      color: rgba(200, 220, 255, 0.3);\n      width: 100%;\n      position: fixed;\n      bottom: 0px;\n      padding: 20px;\n      text-align: center;\n      z-index: 20;\n    }\n\n    /* #footer {\n      position: absolute;\n      bottom: 0px;\n      height: 300px;\n      width: 100%;\n    } */\n\n    #scene {\n      height: 100%;\n      position: absolute;\n      left: 50%;\n      margin-left: -800px;\n    }\n\n    a {\n      text-decoration: none;\n      color: rgba(200, 220, 255, 1);\n      opacity: 0.4;\n      transition: opacity 0.4s ease;\n    }\n\n    a:hover {\n      opacity: 1;\n    }\n  </style>\n\n</head>\n\n<body>\n<audio autoplay=\"autopaly\">\n  <source src=\"renxi.mp3\" type=\"audio/mp3\" />\n</audio>\n<!-- 星空html -->\n<!-- <div> -->\n<div class=\"container2\">\n  <div class=\"content\">\n    <canvas id=\"universe\"></canvas>\n  </div>\n</div>\n<!-- </div> -->\n<div class=\"title\">\n  <!-- 星团文字html -->\n\n  <!-- 爱心html -->\n  <canvas id=\"pinkboard\"> </canvas>\n  <div class=\"main\"><h1>wei</h1>></div>\n\n</div>\n\n<!--爱心js  -->\n<script>\n  /*\n   * Settings\n   */\n  var settings = {\n    particles: {\n      length: 500, // maximum amount of particles\n      duration: 2, // particle duration in sec\n      velocity: 100, // particle velocity in pixels/sec\n      effect: -0.75, // play with this for a nice effect\n      size: 30, // particle size in pixels\n    },\n  };\n\n  /*\n   * RequestAnimationFrame polyfill by Erik M?ller\n   */\n  (function () {\n    var b = 0;\n    var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n    for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n      window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n      window.cancelAnimationFrame =\n              window[c[a] + \"CancelAnimationFrame\"] ||\n              window[c[a] + \"CancelRequestAnimationFrame\"];\n    }\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = function (h, e) {\n        var d = new Date().getTime();\n        var f = Math.max(0, 16 - (d - b));\n        var g = window.setTimeout(function () {\n          h(d + f);\n        }, f);\n        b = d + f;\n        return g;\n      };\n    }\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = function (d) {\n        clearTimeout(d);\n      };\n    }\n  })();\n\n  /*\n   * Point class\n   */\n  var Point = (function () {\n    function Point(x, y) {\n      this.x = typeof x !== \"undefined\" ? x : 0;\n      this.y = typeof y !== \"undefined\" ? y : 0;\n    }\n    Point.prototype.clone = function () {\n      return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function (length) {\n      if (typeof length == \"undefined\")\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      this.normalize();\n      this.x *= length;\n      this.y *= length;\n      return this;\n    };\n    Point.prototype.normalize = function () {\n      var length = this.length();\n      this.x /= length;\n      this.y /= length;\n      return this;\n    };\n    return Point;\n  })();\n\n  /*\n   * Particle class\n   */\n  var Particle = (function () {\n    function Particle() {\n      this.position = new Point();\n      this.velocity = new Point();\n      this.acceleration = new Point();\n      this.age = 0;\n    }\n    Particle.prototype.initialize = function (x, y, dx, dy) {\n      this.position.x = x;\n      this.position.y = y;\n      this.velocity.x = dx;\n      this.velocity.y = dy;\n      this.acceleration.x = dx * settings.particles.effect;\n      this.acceleration.y = dy * settings.particles.effect;\n      this.age = 0;\n    };\n    Particle.prototype.update = function (deltaTime) {\n      this.position.x += this.velocity.x * deltaTime;\n      this.position.y += this.velocity.y * deltaTime;\n      this.velocity.x += this.acceleration.x * deltaTime;\n      this.velocity.y += this.acceleration.y * deltaTime;\n      this.age += deltaTime;\n    };\n    Particle.prototype.draw = function (context, image) {\n      function ease(t) {\n        return --t * t * t + 1;\n      }\n      var size = image.width * ease(this.age / settings.particles.duration);\n      context.globalAlpha = 1 - this.age / settings.particles.duration;\n      context.drawImage(\n              image,\n              this.position.x - size / 2,\n              this.position.y - size / 2,\n              size,\n              size\n      );\n    };\n    return Particle;\n  })();\n\n  /*\n   * ParticlePool class\n   */\n  var ParticlePool = (function () {\n    var particles,\n            firstActive = 0,\n            firstFree = 0,\n            duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n      // create and populate particle pool\n      particles = new Array(length);\n      for (var i = 0; i < particles.length; i++)\n        particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function (x, y, dx, dy) {\n      particles[firstFree].initialize(x, y, dx, dy);\n\n      // handle circular queue\n      firstFree++;\n      if (firstFree == particles.length) firstFree = 0;\n      if (firstActive == firstFree) firstActive++;\n      if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function (deltaTime) {\n      var i;\n\n      // update active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].update(deltaTime);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].update(deltaTime);\n        for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n      }\n\n      // remove inactive particles\n      while (\n              particles[firstActive].age >= duration &&\n              firstActive != firstFree\n              ) {\n        firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n      }\n    };\n    ParticlePool.prototype.draw = function (context, image) {\n      // draw active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].draw(context, image);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].draw(context, image);\n        for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n      }\n    };\n    return ParticlePool;\n  })();\n\n  /*\n   * Putting it all together\n   */\n  (function (canvas) {\n    var context = canvas.getContext(\"2d\"),\n            particles = new ParticlePool(settings.particles.length),\n            particleRate = settings.particles.length / settings.particles.duration, // particles/sec\n            time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n      return new Point(\n              160 * Math.pow(Math.sin(t), 3),\n              130 * Math.cos(t) -\n              50 * Math.cos(2 * t) -\n              20 * Math.cos(3 * t) -\n              10 * Math.cos(4 * t) +\n              25\n      );\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function () {\n      var canvas = document.createElement(\"canvas\"),\n              context = canvas.getContext(\"2d\");\n      canvas.width = settings.particles.size;\n      canvas.height = settings.particles.size;\n      // helper function to create the path\n      function to(t) {\n        var point = pointOnHeart(t);\n        point.x =\n                settings.particles.size / 2 +\n                (point.x * settings.particles.size) / 350;\n        point.y =\n                settings.particles.size / 2 -\n                (point.y * settings.particles.size) / 350;\n        return point;\n      }\n      // create the path\n      context.beginPath();\n      var t = -Math.PI;\n      var point = to(t);\n      context.moveTo(point.x, point.y);\n      while (t < Math.PI) {\n        t += 0.01; // baby steps!\n        point = to(t);\n        context.lineTo(point.x, point.y);\n      }\n      context.closePath();\n      // create the fill\n      context.fillStyle = \"#ea80b0\";\n      context.fill();\n      // create the image\n      var image = new Image();\n      image.src = canvas.toDataURL();\n      return image;\n    })();\n\n    // render that thing!\n    function render() {\n      // next animation frame\n      requestAnimationFrame(render);\n\n      // update time\n      var newTime = new Date().getTime() / 1000,\n              deltaTime = newTime - (time || newTime);\n      time = newTime;\n\n      // clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // create new particles\n      var amount = particleRate * deltaTime;\n      for (var i = 0; i < amount; i++) {\n        var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n        var dir = pos.clone().length(settings.particles.velocity);\n        particles.add(\n                canvas.width / 2 + pos.x,\n                canvas.height / 2 - pos.y,\n                dir.x,\n                -dir.y\n        );\n      }\n\n      // update and draw particles\n      particles.update(deltaTime);\n      particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function () {\n      onResize();\n      render();\n    }, 10);\n  })(document.getElementById(\"pinkboard\"));\n</script>\n<!-- 星空js -->\n<script>\n  window.requestAnimationFrame =\n          window.requestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.msRequestAnimationFrame;\n\n  var starDensity = 0.216;\n  var speedCoeff = 0.05;\n  var width;\n  var height;\n  var starCount;\n  var circleRadius;\n  var circleCenter;\n  var first = true;\n  var giantColor = \"180,184,240\";\n  var starColor = \"226,225,142\";\n  var cometColor = \"226,225,224\";\n  var canva = document.getElementById(\"universe\");\n  canva.style.zIndex = 200;\n  var stars = [];\n\n  windowResizeHandler();\n  window.addEventListener(\"resize\", windowResizeHandler, false);\n\n  createUniverse();\n\n  function createUniverse() {\n    universe = canva.getContext(\"2d\");\n\n    for (var i = 0; i < starCount; i++) {\n      stars[i] = new Star();\n      stars[i].reset();\n    }\n\n    draw();\n  }\n\n  function draw() {\n    universe.clearRect(0, 0, width, height);\n\n    var starsLength = stars.length;\n\n    for (var i = 0; i < starsLength; i++) {\n      var star = stars[i];\n      star.move();\n      star.fadeIn();\n      star.fadeOut();\n      star.draw();\n    }\n\n    window.requestAnimationFrame(draw);\n  }\n\n  function Star() {\n    this.reset = function () {\n      this.giant = getProbability(3);\n      this.comet = this.giant || first ? false : getProbability(10);\n      this.x = getRandInterval(0, width - 10);\n      this.y = getRandInterval(0, height);\n      this.r = getRandInterval(1.1, 2.6);\n      this.dx =\n              getRandInterval(speedCoeff, 6 * speedCoeff) +\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120) +\n              speedCoeff * 2;\n      this.dy =\n              -getRandInterval(speedCoeff, 6 * speedCoeff) -\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120);\n      this.fadingOut = null;\n      this.fadingIn = true;\n      this.opacity = 0;\n      this.opacityTresh = getRandInterval(\n              0.2,\n              1 - (this.comet + 1 - 1) * 0.4\n      );\n      this.do = getRandInterval(0.0005, 0.002) + (this.comet + 1 - 1) * 0.001;\n    };\n\n    this.fadeIn = function () {\n      if (this.fadingIn) {\n        this.fadingIn = this.opacity > this.opacityTresh ? false : true;\n        this.opacity += this.do;\n      }\n    };\n\n    this.fadeOut = function () {\n      if (this.fadingOut) {\n        this.fadingOut = this.opacity < 0 ? false : true;\n        this.opacity -= this.do / 2;\n        if (this.x > width || this.y < 0) {\n          this.fadingOut = false;\n          this.reset();\n        }\n      }\n    };\n\n    this.draw = function () {\n      universe.beginPath();\n\n      if (this.giant) {\n        universe.fillStyle = \"rgba(\" + giantColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 2, 0, 2 * Math.PI, false);\n      } else if (this.comet) {\n        universe.fillStyle = \"rgba(\" + cometColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, false);\n\n        //comet tail\n        for (var i = 0; i < 30; i++) {\n          universe.fillStyle =\n                  \"rgba(\" +\n                  cometColor +\n                  \",\" +\n                  (this.opacity - (this.opacity / 20) * i) +\n                  \")\";\n          universe.rect(\n                  this.x - (this.dx / 4) * i,\n                  this.y - (this.dy / 4) * i - 2,\n                  2,\n                  2\n          );\n          universe.fill();\n        }\n      } else {\n        universe.fillStyle = \"rgba(\" + starColor + \",\" + this.opacity + \")\";\n        universe.rect(this.x, this.y, this.r, this.r);\n      }\n\n      universe.closePath();\n      universe.fill();\n    };\n\n    this.move = function () {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.fadingOut === false) {\n        this.reset();\n      }\n      if (this.x > width - width / 4 || this.y < 0) {\n        this.fadingOut = true;\n      }\n    };\n\n    (function () {\n      setTimeout(function () {\n        first = false;\n      }, 50);\n    })();\n  }\n\n  function getProbability(percents) {\n    return Math.floor(Math.random() * 1000) + 1 < percents * 10;\n  }\n\n  function getRandInterval(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  function windowResizeHandler() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    starCount = width * starDensity;\n    circleRadius = width > height ? height / 2 : width / 2;\n    circleCenter = {\n      x: width / 2,\n      y: height / 2,\n    };\n\n    canva.setAttribute(\"width\", width);\n    canva.setAttribute(\"height\", height);\n  }\n</script>\n<!-- 星团js -->\n<script>\n  let particles = [];\n  let microparticles = [];\n\n  const c1 = createCanvas({\n    width: $(window).width(),\n    height: $(window).height(),\n  });\n\n  const tela = c1.canvas;\n  const canvas = c1.context;\n\n  // $(\"body\").append(tela);\n  $(\"body\").append(c1.canvas);\n\n  class Particle1 {\n    constructor(canvas) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n      this.life = 1000 + Math.random() * 3000;\n\n      this.x =\n              $(window).width() / 2 + (Math.random() * 20 - Math.random() * 20);\n      this.y = $(window).height();\n      this.s = 2 + Math.random();\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.direction = this.random > 0.5 ? -1 : 1;\n      this.radius = 1 + 3 * this.random;\n      this.color = \"#ff417d\";\n\n      this.ID = setInterval(\n              function () {\n                microparticles.push(\n                        new microParticle(c1.context, {\n                          x: this.x,\n                          y: this.y,\n                        })\n                );\n              }.bind(this),\n              this.random * 20\n      );\n\n      setTimeout(\n              function () {\n                clearInterval(this.ID);\n              }.bind(this),\n              this.life\n      );\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      // this.canvas.lineWidth = 2;\n      this.canvas.shadowOffsetX = 0;\n      this.canvas.shadowOffsetY = 0;\n      // this.canvas.shadowBlur = 6;\n      this.canvas.shadowColor = \"#000000\";\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              this.direction *\n              Math.sin(this.progress / (this.random1 * 430)) *\n              this.s;\n      this.y -= Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        clearInterval(this.ID);\n        return false;\n      }\n\n      if (this.y < 0) {\n        clearInterval(this.ID);\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  class microParticle {\n    constructor(canvas, options) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n\n      this.x = options.x;\n      this.y = options.y;\n      this.s = 2 + Math.random() * 3;\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.radius = 1 + this.random * 0.5;\n      this.color = \"#4EFCFE\"; //this.random > .5 ? \"#a9722c\" : \"#FFFED7\"\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.canvas.lineWidth = 2;\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              Math.sin(this.progress / (100 / (this.random1 - this.random2 * 10))) *\n              this.s;\n      this.y += Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        return false;\n      }\n\n      if (this.y > this.h) {\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  var random_life = 1000;\n\n  setInterval(\n          function () {\n            particles.push(new Particle1(canvas));\n            random_life = 2000 * Math.random();\n          }.bind(this),\n          random_life\n  );\n\n  function clear() {\n    let grd = canvas.createRadialGradient(\n            tela.width / 2,\n            tela.height / 2,\n            0,\n            tela.width / 2,\n            tela.height / 2,\n            tela.width\n    );\n    grd.addColorStop(0, \"rgba(20,20,20,1)\");\n    grd.addColorStop(1, \"rgba(0,0,0,0)\");\n    // Fill with gradient\n    canvas.globalAlpha = 0.16;\n    canvas.fillStyle = grd;\n    canvas.fillRect(0, 0, tela.width, tela.height);\n  }\n\n  function blur(ctx, canvas, amt) {\n    // ctx.filter = `blur(${amt}px)`\n    // ctx.drawImage(canvas, 0, 0)\n    // ctx.filter = 'none'\n  }\n\n  function update() {\n    clear();\n    particles = particles.filter(function (p) {\n      return p.move();\n    });\n    microparticles = microparticles.filter(function (mp) {\n      return mp.move();\n    });\n    requestAnimationFrame(update.bind(this));\n  }\n\n  function createCanvas(properties) {\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = properties.width;\n    //   canvas.style.zIndex = 999;\n    canvas.height = properties.height;\n    let context = canvas.getContext(\"2d\");\n    return {\n      canvas: canvas,\n      context: context,\n    };\n  }\n  update();\n</script>\n\n\n\n</body>\n\n\n\n\n\n","date":"2023-04-11T02:14:54.983Z","updated":"2023-04-11T02:14:54.983Z","path":"ww.html","comments":1,"_id":"clgbow4m20000cou3byxn0gic","content":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <script src=\"https://www.jq22.com/jquery/jquery-1.10.2.js\"></script>\n  <style type=\"text/css\">\n    @import url(\"https://fonts.googleapis.com/css?family=Montserrat:200,300,400,600\");\n    .more-pens {\n      position: fixed;\n      left: 20px;\n      bottom: 20px;\n      z-index: 10;\n      font-family: \"Montserrat\";\n      font-size: 12px;\n    }\n\n<pre><code>a.white-mode,\na.white-mode:link,\na.white-mode:visited,\na.white-mode:active &#123;\n  font-family: &quot;Montserrat&quot;;\n  font-size: 12px;\n  text-decoration: none;\n  /* background: #212121; */\n  padding: 4px 8px;\n  color: #f7f7f7;\n&#125;\n\na.white-mode:hover,\na.white-mode:link:hover,\na.white-mode:visited:hover,\na.white-mode:active:hover &#123;\n  background: #edf3f8;\n  color: #212121;\n&#125;\n\n.title &#123;\n  z-index: 9999 !important;\n  position: absolute;\n  left: 50%;\n  top: 42%;\n  transform: translateX(-50%) translateY(-50%);\n  font-family: &quot;Montserrat&quot;;\n  text-align: center;\n  width: 100%;\n&#125;\n\n.title h1 &#123;\n  z-index: 99;\n  position: relative;\n  color: #fff;\n  font-weight: 100;\n  font-size: 70px;\n  padding: 0;\n  margin: 0;\n  line-height: 1;\n  text-shadow: 0 0 10px #ff006c, 0 0 20px #ff006c, 0 0 30px #ff006c,\n  0 0 40px #ff417d, 0 0 70px #ff417d, 0 0 80px #ff417d,\n  0 0 100px #ff417d, 0 0 150px #ff417d;\n&#125;\n\n.title h1 span &#123;\n  z-index: 99;\n  font-weight: 600;\n  padding: 0;\n  margin: 0;\n  color: #ffffff;\n&#125;\n\n.title h3 &#123;\n  z-index: 99;\n  font-weight: 200;\n  font-size: 26px;\n  padding: 0;\n  margin: 0;\n  line-height: 1;\n  color: #ffffff;\n  letter-spacing: 2px;\n&#125;\n\n/* 爱心css */\ncanvas &#123;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n&#125;\n.img &#123;\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  transform: translate(-50%, -50%);\n  width: 180px;   /* 160 */\n  height: 180px;\n&#125;\n#pinkboard &#123;\n  position: relative;\n  top: 0%;\n  left: 0%;\n  height: 429px;\n&#125;\n.STARDUST1 &#123;\n  position: relative !important;\n  top: -60px;\n&#125;\n.STARDUST2 &#123;\n  position: relative !important;\n  top: -40px;\n&#125;\n.STARDUST3 &#123;\n  position: relative !important;\n  top: -20px;\n&#125;\n/* 星空css */\nhtml,\nbody &#123;\n  padding: 0px;\n  margin: 0px;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n&#125;\n\nbody &#123;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-filter: contrast(120%);\n  filter: contrast(120%);\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n  /* background-color: black; */\n&#125;\n\n.container2 &#123;\n  /* z-index: 8; */\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n&#125;\n\n.content &#123;\n  width: inherit;\n  height: inherit;\n  width: 100%;\n  height: 100%;\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n&#125;\n\n#universe &#123;\n  width: 100%;\n  height: 100%;\n&#125;\n\n#footerContent &#123;\n  font-family: sans-serif;\n  font-size: 110%;\n  color: rgba(200, 220, 255, 0.3);\n  width: 100%;\n  position: fixed;\n  bottom: 0px;\n  padding: 20px;\n  text-align: center;\n  z-index: 20;\n&#125;\n\n/* #footer &#123;\n  position: absolute;\n  bottom: 0px;\n  height: 300px;\n  width: 100%;\n&#125; */\n\n#scene &#123;\n  height: 100%;\n  position: absolute;\n  left: 50%;\n  margin-left: -800px;\n&#125;\n\na &#123;\n  text-decoration: none;\n  color: rgba(200, 220, 255, 1);\n  opacity: 0.4;\n  transition: opacity 0.4s ease;\n&#125;\n\na:hover &#123;\n  opacity: 1;\n&#125;\n</code></pre>\n<p>  </style></p>\n</head>\n\n<body>\n<audio autoplay=\"autopaly\">\n  <source src=\"renxi.mp3\" type=\"audio/mp3\" />\n</audio>\n<!-- 星空html -->\n<!-- <div> -->\n<div class=\"container2\">\n  <div class=\"content\">\n    <canvas id=\"universe\"></canvas>\n  </div>\n</div>\n<!-- </div> -->\n<div class=\"title\">\n  <!-- 星团文字html -->\n\n  <!-- 爱心html -->\n<p>  <canvas id=\"pinkboard\"> </canvas><br>  <div class=\"main\"><h1>wei</h1>&gt;</div></p>\n</div>\n\n<!--爱心js  -->\n<script>\n  /*\n   * Settings\n   */\n  var settings = {\n    particles: {\n      length: 500, // maximum amount of particles\n      duration: 2, // particle duration in sec\n      velocity: 100, // particle velocity in pixels/sec\n      effect: -0.75, // play with this for a nice effect\n      size: 30, // particle size in pixels\n    },\n  };\n\n  /*\n   * RequestAnimationFrame polyfill by Erik M?ller\n   */\n  (function () {\n    var b = 0;\n    var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n    for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n      window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n      window.cancelAnimationFrame =\n              window[c[a] + \"CancelAnimationFrame\"] ||\n              window[c[a] + \"CancelRequestAnimationFrame\"];\n    }\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = function (h, e) {\n        var d = new Date().getTime();\n        var f = Math.max(0, 16 - (d - b));\n        var g = window.setTimeout(function () {\n          h(d + f);\n        }, f);\n        b = d + f;\n        return g;\n      };\n    }\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = function (d) {\n        clearTimeout(d);\n      };\n    }\n  })();\n\n  /*\n   * Point class\n   */\n  var Point = (function () {\n    function Point(x, y) {\n      this.x = typeof x !== \"undefined\" ? x : 0;\n      this.y = typeof y !== \"undefined\" ? y : 0;\n    }\n    Point.prototype.clone = function () {\n      return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function (length) {\n      if (typeof length == \"undefined\")\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      this.normalize();\n      this.x *= length;\n      this.y *= length;\n      return this;\n    };\n    Point.prototype.normalize = function () {\n      var length = this.length();\n      this.x /= length;\n      this.y /= length;\n      return this;\n    };\n    return Point;\n  })();\n\n  /*\n   * Particle class\n   */\n  var Particle = (function () {\n    function Particle() {\n      this.position = new Point();\n      this.velocity = new Point();\n      this.acceleration = new Point();\n      this.age = 0;\n    }\n    Particle.prototype.initialize = function (x, y, dx, dy) {\n      this.position.x = x;\n      this.position.y = y;\n      this.velocity.x = dx;\n      this.velocity.y = dy;\n      this.acceleration.x = dx * settings.particles.effect;\n      this.acceleration.y = dy * settings.particles.effect;\n      this.age = 0;\n    };\n    Particle.prototype.update = function (deltaTime) {\n      this.position.x += this.velocity.x * deltaTime;\n      this.position.y += this.velocity.y * deltaTime;\n      this.velocity.x += this.acceleration.x * deltaTime;\n      this.velocity.y += this.acceleration.y * deltaTime;\n      this.age += deltaTime;\n    };\n    Particle.prototype.draw = function (context, image) {\n      function ease(t) {\n        return --t * t * t + 1;\n      }\n      var size = image.width * ease(this.age / settings.particles.duration);\n      context.globalAlpha = 1 - this.age / settings.particles.duration;\n      context.drawImage(\n              image,\n              this.position.x - size / 2,\n              this.position.y - size / 2,\n              size,\n              size\n      );\n    };\n    return Particle;\n  })();\n\n  /*\n   * ParticlePool class\n   */\n  var ParticlePool = (function () {\n    var particles,\n            firstActive = 0,\n            firstFree = 0,\n            duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n      // create and populate particle pool\n      particles = new Array(length);\n      for (var i = 0; i < particles.length; i++)\n        particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function (x, y, dx, dy) {\n      particles[firstFree].initialize(x, y, dx, dy);\n\n      // handle circular queue\n      firstFree++;\n      if (firstFree == particles.length) firstFree = 0;\n      if (firstActive == firstFree) firstActive++;\n      if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function (deltaTime) {\n      var i;\n\n      // update active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].update(deltaTime);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].update(deltaTime);\n        for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n      }\n\n      // remove inactive particles\n      while (\n              particles[firstActive].age >= duration &&\n              firstActive != firstFree\n              ) {\n        firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n      }\n    };\n    ParticlePool.prototype.draw = function (context, image) {\n      // draw active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].draw(context, image);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].draw(context, image);\n        for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n      }\n    };\n    return ParticlePool;\n  })();\n\n  /*\n   * Putting it all together\n   */\n  (function (canvas) {\n    var context = canvas.getContext(\"2d\"),\n            particles = new ParticlePool(settings.particles.length),\n            particleRate = settings.particles.length / settings.particles.duration, // particles/sec\n            time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n      return new Point(\n              160 * Math.pow(Math.sin(t), 3),\n              130 * Math.cos(t) -\n              50 * Math.cos(2 * t) -\n              20 * Math.cos(3 * t) -\n              10 * Math.cos(4 * t) +\n              25\n      );\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function () {\n      var canvas = document.createElement(\"canvas\"),\n              context = canvas.getContext(\"2d\");\n      canvas.width = settings.particles.size;\n      canvas.height = settings.particles.size;\n      // helper function to create the path\n      function to(t) {\n        var point = pointOnHeart(t);\n        point.x =\n                settings.particles.size / 2 +\n                (point.x * settings.particles.size) / 350;\n        point.y =\n                settings.particles.size / 2 -\n                (point.y * settings.particles.size) / 350;\n        return point;\n      }\n      // create the path\n      context.beginPath();\n      var t = -Math.PI;\n      var point = to(t);\n      context.moveTo(point.x, point.y);\n      while (t < Math.PI) {\n        t += 0.01; // baby steps!\n        point = to(t);\n        context.lineTo(point.x, point.y);\n      }\n      context.closePath();\n      // create the fill\n      context.fillStyle = \"#ea80b0\";\n      context.fill();\n      // create the image\n      var image = new Image();\n      image.src = canvas.toDataURL();\n      return image;\n    })();\n\n    // render that thing!\n    function render() {\n      // next animation frame\n      requestAnimationFrame(render);\n\n      // update time\n      var newTime = new Date().getTime() / 1000,\n              deltaTime = newTime - (time || newTime);\n      time = newTime;\n\n      // clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // create new particles\n      var amount = particleRate * deltaTime;\n      for (var i = 0; i < amount; i++) {\n        var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n        var dir = pos.clone().length(settings.particles.velocity);\n        particles.add(\n                canvas.width / 2 + pos.x,\n                canvas.height / 2 - pos.y,\n                dir.x,\n                -dir.y\n        );\n      }\n\n      // update and draw particles\n      particles.update(deltaTime);\n      particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function () {\n      onResize();\n      render();\n    }, 10);\n  })(document.getElementById(\"pinkboard\"));\n</script>\n<!-- 星空js -->\n<script>\n  window.requestAnimationFrame =\n          window.requestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.msRequestAnimationFrame;\n\n  var starDensity = 0.216;\n  var speedCoeff = 0.05;\n  var width;\n  var height;\n  var starCount;\n  var circleRadius;\n  var circleCenter;\n  var first = true;\n  var giantColor = \"180,184,240\";\n  var starColor = \"226,225,142\";\n  var cometColor = \"226,225,224\";\n  var canva = document.getElementById(\"universe\");\n  canva.style.zIndex = 200;\n  var stars = [];\n\n  windowResizeHandler();\n  window.addEventListener(\"resize\", windowResizeHandler, false);\n\n  createUniverse();\n\n  function createUniverse() {\n    universe = canva.getContext(\"2d\");\n\n    for (var i = 0; i < starCount; i++) {\n      stars[i] = new Star();\n      stars[i].reset();\n    }\n\n    draw();\n  }\n\n  function draw() {\n    universe.clearRect(0, 0, width, height);\n\n    var starsLength = stars.length;\n\n    for (var i = 0; i < starsLength; i++) {\n      var star = stars[i];\n      star.move();\n      star.fadeIn();\n      star.fadeOut();\n      star.draw();\n    }\n\n    window.requestAnimationFrame(draw);\n  }\n\n  function Star() {\n    this.reset = function () {\n      this.giant = getProbability(3);\n      this.comet = this.giant || first ? false : getProbability(10);\n      this.x = getRandInterval(0, width - 10);\n      this.y = getRandInterval(0, height);\n      this.r = getRandInterval(1.1, 2.6);\n      this.dx =\n              getRandInterval(speedCoeff, 6 * speedCoeff) +\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120) +\n              speedCoeff * 2;\n      this.dy =\n              -getRandInterval(speedCoeff, 6 * speedCoeff) -\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120);\n      this.fadingOut = null;\n      this.fadingIn = true;\n      this.opacity = 0;\n      this.opacityTresh = getRandInterval(\n              0.2,\n              1 - (this.comet + 1 - 1) * 0.4\n      );\n      this.do = getRandInterval(0.0005, 0.002) + (this.comet + 1 - 1) * 0.001;\n    };\n\n    this.fadeIn = function () {\n      if (this.fadingIn) {\n        this.fadingIn = this.opacity > this.opacityTresh ? false : true;\n        this.opacity += this.do;\n      }\n    };\n\n    this.fadeOut = function () {\n      if (this.fadingOut) {\n        this.fadingOut = this.opacity < 0 ? false : true;\n        this.opacity -= this.do / 2;\n        if (this.x > width || this.y < 0) {\n          this.fadingOut = false;\n          this.reset();\n        }\n      }\n    };\n\n    this.draw = function () {\n      universe.beginPath();\n\n      if (this.giant) {\n        universe.fillStyle = \"rgba(\" + giantColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 2, 0, 2 * Math.PI, false);\n      } else if (this.comet) {\n        universe.fillStyle = \"rgba(\" + cometColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, false);\n\n        //comet tail\n        for (var i = 0; i < 30; i++) {\n          universe.fillStyle =\n                  \"rgba(\" +\n                  cometColor +\n                  \",\" +\n                  (this.opacity - (this.opacity / 20) * i) +\n                  \")\";\n          universe.rect(\n                  this.x - (this.dx / 4) * i,\n                  this.y - (this.dy / 4) * i - 2,\n                  2,\n                  2\n          );\n          universe.fill();\n        }\n      } else {\n        universe.fillStyle = \"rgba(\" + starColor + \",\" + this.opacity + \")\";\n        universe.rect(this.x, this.y, this.r, this.r);\n      }\n\n      universe.closePath();\n      universe.fill();\n    };\n\n    this.move = function () {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.fadingOut === false) {\n        this.reset();\n      }\n      if (this.x > width - width / 4 || this.y < 0) {\n        this.fadingOut = true;\n      }\n    };\n\n    (function () {\n      setTimeout(function () {\n        first = false;\n      }, 50);\n    })();\n  }\n\n  function getProbability(percents) {\n    return Math.floor(Math.random() * 1000) + 1 < percents * 10;\n  }\n\n  function getRandInterval(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  function windowResizeHandler() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    starCount = width * starDensity;\n    circleRadius = width > height ? height / 2 : width / 2;\n    circleCenter = {\n      x: width / 2,\n      y: height / 2,\n    };\n\n    canva.setAttribute(\"width\", width);\n    canva.setAttribute(\"height\", height);\n  }\n</script>\n<!-- 星团js -->\n<script>\n  let particles = [];\n  let microparticles = [];\n\n  const c1 = createCanvas({\n    width: $(window).width(),\n    height: $(window).height(),\n  });\n\n  const tela = c1.canvas;\n  const canvas = c1.context;\n\n  // $(\"body\").append(tela);\n  $(\"body\").append(c1.canvas);\n\n  class Particle1 {\n    constructor(canvas) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n      this.life = 1000 + Math.random() * 3000;\n\n      this.x =\n              $(window).width() / 2 + (Math.random() * 20 - Math.random() * 20);\n      this.y = $(window).height();\n      this.s = 2 + Math.random();\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.direction = this.random > 0.5 ? -1 : 1;\n      this.radius = 1 + 3 * this.random;\n      this.color = \"#ff417d\";\n\n      this.ID = setInterval(\n              function () {\n                microparticles.push(\n                        new microParticle(c1.context, {\n                          x: this.x,\n                          y: this.y,\n                        })\n                );\n              }.bind(this),\n              this.random * 20\n      );\n\n      setTimeout(\n              function () {\n                clearInterval(this.ID);\n              }.bind(this),\n              this.life\n      );\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      // this.canvas.lineWidth = 2;\n      this.canvas.shadowOffsetX = 0;\n      this.canvas.shadowOffsetY = 0;\n      // this.canvas.shadowBlur = 6;\n      this.canvas.shadowColor = \"#000000\";\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              this.direction *\n              Math.sin(this.progress / (this.random1 * 430)) *\n              this.s;\n      this.y -= Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        clearInterval(this.ID);\n        return false;\n      }\n\n      if (this.y < 0) {\n        clearInterval(this.ID);\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  class microParticle {\n    constructor(canvas, options) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n\n      this.x = options.x;\n      this.y = options.y;\n      this.s = 2 + Math.random() * 3;\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.radius = 1 + this.random * 0.5;\n      this.color = \"#4EFCFE\"; //this.random > .5 ? \"#a9722c\" : \"#FFFED7\"\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.canvas.lineWidth = 2;\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              Math.sin(this.progress / (100 / (this.random1 - this.random2 * 10))) *\n              this.s;\n      this.y += Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        return false;\n      }\n\n      if (this.y > this.h) {\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  var random_life = 1000;\n\n  setInterval(\n          function () {\n            particles.push(new Particle1(canvas));\n            random_life = 2000 * Math.random();\n          }.bind(this),\n          random_life\n  );\n\n  function clear() {\n    let grd = canvas.createRadialGradient(\n            tela.width / 2,\n            tela.height / 2,\n            0,\n            tela.width / 2,\n            tela.height / 2,\n            tela.width\n    );\n    grd.addColorStop(0, \"rgba(20,20,20,1)\");\n    grd.addColorStop(1, \"rgba(0,0,0,0)\");\n    // Fill with gradient\n    canvas.globalAlpha = 0.16;\n    canvas.fillStyle = grd;\n    canvas.fillRect(0, 0, tela.width, tela.height);\n  }\n\n  function blur(ctx, canvas, amt) {\n    // ctx.filter = `blur(${amt}px)`\n    // ctx.drawImage(canvas, 0, 0)\n    // ctx.filter = 'none'\n  }\n\n  function update() {\n    clear();\n    particles = particles.filter(function (p) {\n      return p.move();\n    });\n    microparticles = microparticles.filter(function (mp) {\n      return mp.move();\n    });\n    requestAnimationFrame(update.bind(this));\n  }\n\n  function createCanvas(properties) {\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = properties.width;\n    //   canvas.style.zIndex = 999;\n    canvas.height = properties.height;\n    let context = canvas.getContext(\"2d\");\n    return {\n      canvas: canvas,\n      context: context,\n    };\n  }\n  update();\n</script>\n\n\n\n</body>\n\n\n\n\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <script src=\"https://www.jq22.com/jquery/jquery-1.10.2.js\"></script>\n  <style type=\"text/css\">\n    @import url(\"https://fonts.googleapis.com/css?family=Montserrat:200,300,400,600\");\n    .more-pens {\n      position: fixed;\n      left: 20px;\n      bottom: 20px;\n      z-index: 10;\n      font-family: \"Montserrat\";\n      font-size: 12px;\n    }\n\n<pre><code>a.white-mode,\na.white-mode:link,\na.white-mode:visited,\na.white-mode:active &#123;\n  font-family: &quot;Montserrat&quot;;\n  font-size: 12px;\n  text-decoration: none;\n  /* background: #212121; */\n  padding: 4px 8px;\n  color: #f7f7f7;\n&#125;\n\na.white-mode:hover,\na.white-mode:link:hover,\na.white-mode:visited:hover,\na.white-mode:active:hover &#123;\n  background: #edf3f8;\n  color: #212121;\n&#125;\n\n.title &#123;\n  z-index: 9999 !important;\n  position: absolute;\n  left: 50%;\n  top: 42%;\n  transform: translateX(-50%) translateY(-50%);\n  font-family: &quot;Montserrat&quot;;\n  text-align: center;\n  width: 100%;\n&#125;\n\n.title h1 &#123;\n  z-index: 99;\n  position: relative;\n  color: #fff;\n  font-weight: 100;\n  font-size: 70px;\n  padding: 0;\n  margin: 0;\n  line-height: 1;\n  text-shadow: 0 0 10px #ff006c, 0 0 20px #ff006c, 0 0 30px #ff006c,\n  0 0 40px #ff417d, 0 0 70px #ff417d, 0 0 80px #ff417d,\n  0 0 100px #ff417d, 0 0 150px #ff417d;\n&#125;\n\n.title h1 span &#123;\n  z-index: 99;\n  font-weight: 600;\n  padding: 0;\n  margin: 0;\n  color: #ffffff;\n&#125;\n\n.title h3 &#123;\n  z-index: 99;\n  font-weight: 200;\n  font-size: 26px;\n  padding: 0;\n  margin: 0;\n  line-height: 1;\n  color: #ffffff;\n  letter-spacing: 2px;\n&#125;\n\n/* 爱心css */\ncanvas &#123;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n&#125;\n.img &#123;\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  transform: translate(-50%, -50%);\n  width: 180px;   /* 160 */\n  height: 180px;\n&#125;\n#pinkboard &#123;\n  position: relative;\n  top: 0%;\n  left: 0%;\n  height: 429px;\n&#125;\n.STARDUST1 &#123;\n  position: relative !important;\n  top: -60px;\n&#125;\n.STARDUST2 &#123;\n  position: relative !important;\n  top: -40px;\n&#125;\n.STARDUST3 &#123;\n  position: relative !important;\n  top: -20px;\n&#125;\n/* 星空css */\nhtml,\nbody &#123;\n  padding: 0px;\n  margin: 0px;\n  width: 100%;\n  height: 100%;\n  position: fixed;\n&#125;\n\nbody &#123;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  -webkit-filter: contrast(120%);\n  filter: contrast(120%);\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n  /* background-color: black; */\n&#125;\n\n.container2 &#123;\n  /* z-index: 8; */\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n&#125;\n\n.content &#123;\n  width: inherit;\n  height: inherit;\n  width: 100%;\n  height: 100%;\n  background-image: radial-gradient(\n          1600px at 70% 120%,\n          rgba(33, 39, 80, 1) 10%,\n          #020409 100%\n  ) !important;\n&#125;\n\n#universe &#123;\n  width: 100%;\n  height: 100%;\n&#125;\n\n#footerContent &#123;\n  font-family: sans-serif;\n  font-size: 110%;\n  color: rgba(200, 220, 255, 0.3);\n  width: 100%;\n  position: fixed;\n  bottom: 0px;\n  padding: 20px;\n  text-align: center;\n  z-index: 20;\n&#125;\n\n/* #footer &#123;\n  position: absolute;\n  bottom: 0px;\n  height: 300px;\n  width: 100%;\n&#125; */\n\n#scene &#123;\n  height: 100%;\n  position: absolute;\n  left: 50%;\n  margin-left: -800px;\n&#125;\n\na &#123;\n  text-decoration: none;\n  color: rgba(200, 220, 255, 1);\n  opacity: 0.4;\n  transition: opacity 0.4s ease;\n&#125;\n\na:hover &#123;\n  opacity: 1;\n&#125;\n</code></pre>\n<p>  </style></p>\n</head>\n\n<body>\n<audio autoplay=\"autopaly\">\n  <source src=\"renxi.mp3\" type=\"audio/mp3\" />\n</audio>\n<!-- 星空html -->\n<!-- <div> -->\n<div class=\"container2\">\n  <div class=\"content\">\n    <canvas id=\"universe\"></canvas>\n  </div>\n</div>\n<!-- </div> -->\n<div class=\"title\">\n  <!-- 星团文字html -->\n\n  <!-- 爱心html -->\n<p>  <canvas id=\"pinkboard\"> </canvas><br>  <div class=\"main\"><h1>wei</h1>&gt;</div></p>\n</div>\n\n<!--爱心js  -->\n<script>\n  /*\n   * Settings\n   */\n  var settings = {\n    particles: {\n      length: 500, // maximum amount of particles\n      duration: 2, // particle duration in sec\n      velocity: 100, // particle velocity in pixels/sec\n      effect: -0.75, // play with this for a nice effect\n      size: 30, // particle size in pixels\n    },\n  };\n\n  /*\n   * RequestAnimationFrame polyfill by Erik M?ller\n   */\n  (function () {\n    var b = 0;\n    var c = [\"ms\", \"moz\", \"webkit\", \"o\"];\n    for (var a = 0; a < c.length && !window.requestAnimationFrame; ++a) {\n      window.requestAnimationFrame = window[c[a] + \"RequestAnimationFrame\"];\n      window.cancelAnimationFrame =\n              window[c[a] + \"CancelAnimationFrame\"] ||\n              window[c[a] + \"CancelRequestAnimationFrame\"];\n    }\n    if (!window.requestAnimationFrame) {\n      window.requestAnimationFrame = function (h, e) {\n        var d = new Date().getTime();\n        var f = Math.max(0, 16 - (d - b));\n        var g = window.setTimeout(function () {\n          h(d + f);\n        }, f);\n        b = d + f;\n        return g;\n      };\n    }\n    if (!window.cancelAnimationFrame) {\n      window.cancelAnimationFrame = function (d) {\n        clearTimeout(d);\n      };\n    }\n  })();\n\n  /*\n   * Point class\n   */\n  var Point = (function () {\n    function Point(x, y) {\n      this.x = typeof x !== \"undefined\" ? x : 0;\n      this.y = typeof y !== \"undefined\" ? y : 0;\n    }\n    Point.prototype.clone = function () {\n      return new Point(this.x, this.y);\n    };\n    Point.prototype.length = function (length) {\n      if (typeof length == \"undefined\")\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      this.normalize();\n      this.x *= length;\n      this.y *= length;\n      return this;\n    };\n    Point.prototype.normalize = function () {\n      var length = this.length();\n      this.x /= length;\n      this.y /= length;\n      return this;\n    };\n    return Point;\n  })();\n\n  /*\n   * Particle class\n   */\n  var Particle = (function () {\n    function Particle() {\n      this.position = new Point();\n      this.velocity = new Point();\n      this.acceleration = new Point();\n      this.age = 0;\n    }\n    Particle.prototype.initialize = function (x, y, dx, dy) {\n      this.position.x = x;\n      this.position.y = y;\n      this.velocity.x = dx;\n      this.velocity.y = dy;\n      this.acceleration.x = dx * settings.particles.effect;\n      this.acceleration.y = dy * settings.particles.effect;\n      this.age = 0;\n    };\n    Particle.prototype.update = function (deltaTime) {\n      this.position.x += this.velocity.x * deltaTime;\n      this.position.y += this.velocity.y * deltaTime;\n      this.velocity.x += this.acceleration.x * deltaTime;\n      this.velocity.y += this.acceleration.y * deltaTime;\n      this.age += deltaTime;\n    };\n    Particle.prototype.draw = function (context, image) {\n      function ease(t) {\n        return --t * t * t + 1;\n      }\n      var size = image.width * ease(this.age / settings.particles.duration);\n      context.globalAlpha = 1 - this.age / settings.particles.duration;\n      context.drawImage(\n              image,\n              this.position.x - size / 2,\n              this.position.y - size / 2,\n              size,\n              size\n      );\n    };\n    return Particle;\n  })();\n\n  /*\n   * ParticlePool class\n   */\n  var ParticlePool = (function () {\n    var particles,\n            firstActive = 0,\n            firstFree = 0,\n            duration = settings.particles.duration;\n\n    function ParticlePool(length) {\n      // create and populate particle pool\n      particles = new Array(length);\n      for (var i = 0; i < particles.length; i++)\n        particles[i] = new Particle();\n    }\n    ParticlePool.prototype.add = function (x, y, dx, dy) {\n      particles[firstFree].initialize(x, y, dx, dy);\n\n      // handle circular queue\n      firstFree++;\n      if (firstFree == particles.length) firstFree = 0;\n      if (firstActive == firstFree) firstActive++;\n      if (firstActive == particles.length) firstActive = 0;\n    };\n    ParticlePool.prototype.update = function (deltaTime) {\n      var i;\n\n      // update active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].update(deltaTime);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].update(deltaTime);\n        for (i = 0; i < firstFree; i++) particles[i].update(deltaTime);\n      }\n\n      // remove inactive particles\n      while (\n              particles[firstActive].age >= duration &&\n              firstActive != firstFree\n              ) {\n        firstActive++;\n        if (firstActive == particles.length) firstActive = 0;\n      }\n    };\n    ParticlePool.prototype.draw = function (context, image) {\n      // draw active particles\n      if (firstActive < firstFree) {\n        for (i = firstActive; i < firstFree; i++)\n          particles[i].draw(context, image);\n      }\n      if (firstFree < firstActive) {\n        for (i = firstActive; i < particles.length; i++)\n          particles[i].draw(context, image);\n        for (i = 0; i < firstFree; i++) particles[i].draw(context, image);\n      }\n    };\n    return ParticlePool;\n  })();\n\n  /*\n   * Putting it all together\n   */\n  (function (canvas) {\n    var context = canvas.getContext(\"2d\"),\n            particles = new ParticlePool(settings.particles.length),\n            particleRate = settings.particles.length / settings.particles.duration, // particles/sec\n            time;\n\n    // get point on heart with -PI <= t <= PI\n    function pointOnHeart(t) {\n      return new Point(\n              160 * Math.pow(Math.sin(t), 3),\n              130 * Math.cos(t) -\n              50 * Math.cos(2 * t) -\n              20 * Math.cos(3 * t) -\n              10 * Math.cos(4 * t) +\n              25\n      );\n    }\n\n    // creating the particle image using a dummy canvas\n    var image = (function () {\n      var canvas = document.createElement(\"canvas\"),\n              context = canvas.getContext(\"2d\");\n      canvas.width = settings.particles.size;\n      canvas.height = settings.particles.size;\n      // helper function to create the path\n      function to(t) {\n        var point = pointOnHeart(t);\n        point.x =\n                settings.particles.size / 2 +\n                (point.x * settings.particles.size) / 350;\n        point.y =\n                settings.particles.size / 2 -\n                (point.y * settings.particles.size) / 350;\n        return point;\n      }\n      // create the path\n      context.beginPath();\n      var t = -Math.PI;\n      var point = to(t);\n      context.moveTo(point.x, point.y);\n      while (t < Math.PI) {\n        t += 0.01; // baby steps!\n        point = to(t);\n        context.lineTo(point.x, point.y);\n      }\n      context.closePath();\n      // create the fill\n      context.fillStyle = \"#ea80b0\";\n      context.fill();\n      // create the image\n      var image = new Image();\n      image.src = canvas.toDataURL();\n      return image;\n    })();\n\n    // render that thing!\n    function render() {\n      // next animation frame\n      requestAnimationFrame(render);\n\n      // update time\n      var newTime = new Date().getTime() / 1000,\n              deltaTime = newTime - (time || newTime);\n      time = newTime;\n\n      // clear canvas\n      context.clearRect(0, 0, canvas.width, canvas.height);\n\n      // create new particles\n      var amount = particleRate * deltaTime;\n      for (var i = 0; i < amount; i++) {\n        var pos = pointOnHeart(Math.PI - 2 * Math.PI * Math.random());\n        var dir = pos.clone().length(settings.particles.velocity);\n        particles.add(\n                canvas.width / 2 + pos.x,\n                canvas.height / 2 - pos.y,\n                dir.x,\n                -dir.y\n        );\n      }\n\n      // update and draw particles\n      particles.update(deltaTime);\n      particles.draw(context, image);\n    }\n\n    // handle (re-)sizing of the canvas\n    function onResize() {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n    }\n    window.onresize = onResize;\n\n    // delay rendering bootstrap\n    setTimeout(function () {\n      onResize();\n      render();\n    }, 10);\n  })(document.getElementById(\"pinkboard\"));\n</script>\n<!-- 星空js -->\n<script>\n  window.requestAnimationFrame =\n          window.requestAnimationFrame ||\n          window.mozRequestAnimationFrame ||\n          window.webkitRequestAnimationFrame ||\n          window.msRequestAnimationFrame;\n\n  var starDensity = 0.216;\n  var speedCoeff = 0.05;\n  var width;\n  var height;\n  var starCount;\n  var circleRadius;\n  var circleCenter;\n  var first = true;\n  var giantColor = \"180,184,240\";\n  var starColor = \"226,225,142\";\n  var cometColor = \"226,225,224\";\n  var canva = document.getElementById(\"universe\");\n  canva.style.zIndex = 200;\n  var stars = [];\n\n  windowResizeHandler();\n  window.addEventListener(\"resize\", windowResizeHandler, false);\n\n  createUniverse();\n\n  function createUniverse() {\n    universe = canva.getContext(\"2d\");\n\n    for (var i = 0; i < starCount; i++) {\n      stars[i] = new Star();\n      stars[i].reset();\n    }\n\n    draw();\n  }\n\n  function draw() {\n    universe.clearRect(0, 0, width, height);\n\n    var starsLength = stars.length;\n\n    for (var i = 0; i < starsLength; i++) {\n      var star = stars[i];\n      star.move();\n      star.fadeIn();\n      star.fadeOut();\n      star.draw();\n    }\n\n    window.requestAnimationFrame(draw);\n  }\n\n  function Star() {\n    this.reset = function () {\n      this.giant = getProbability(3);\n      this.comet = this.giant || first ? false : getProbability(10);\n      this.x = getRandInterval(0, width - 10);\n      this.y = getRandInterval(0, height);\n      this.r = getRandInterval(1.1, 2.6);\n      this.dx =\n              getRandInterval(speedCoeff, 6 * speedCoeff) +\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120) +\n              speedCoeff * 2;\n      this.dy =\n              -getRandInterval(speedCoeff, 6 * speedCoeff) -\n              (this.comet + 1 - 1) * speedCoeff * getRandInterval(50, 120);\n      this.fadingOut = null;\n      this.fadingIn = true;\n      this.opacity = 0;\n      this.opacityTresh = getRandInterval(\n              0.2,\n              1 - (this.comet + 1 - 1) * 0.4\n      );\n      this.do = getRandInterval(0.0005, 0.002) + (this.comet + 1 - 1) * 0.001;\n    };\n\n    this.fadeIn = function () {\n      if (this.fadingIn) {\n        this.fadingIn = this.opacity > this.opacityTresh ? false : true;\n        this.opacity += this.do;\n      }\n    };\n\n    this.fadeOut = function () {\n      if (this.fadingOut) {\n        this.fadingOut = this.opacity < 0 ? false : true;\n        this.opacity -= this.do / 2;\n        if (this.x > width || this.y < 0) {\n          this.fadingOut = false;\n          this.reset();\n        }\n      }\n    };\n\n    this.draw = function () {\n      universe.beginPath();\n\n      if (this.giant) {\n        universe.fillStyle = \"rgba(\" + giantColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 2, 0, 2 * Math.PI, false);\n      } else if (this.comet) {\n        universe.fillStyle = \"rgba(\" + cometColor + \",\" + this.opacity + \")\";\n        universe.arc(this.x, this.y, 1.5, 0, 2 * Math.PI, false);\n\n        //comet tail\n        for (var i = 0; i < 30; i++) {\n          universe.fillStyle =\n                  \"rgba(\" +\n                  cometColor +\n                  \",\" +\n                  (this.opacity - (this.opacity / 20) * i) +\n                  \")\";\n          universe.rect(\n                  this.x - (this.dx / 4) * i,\n                  this.y - (this.dy / 4) * i - 2,\n                  2,\n                  2\n          );\n          universe.fill();\n        }\n      } else {\n        universe.fillStyle = \"rgba(\" + starColor + \",\" + this.opacity + \")\";\n        universe.rect(this.x, this.y, this.r, this.r);\n      }\n\n      universe.closePath();\n      universe.fill();\n    };\n\n    this.move = function () {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.fadingOut === false) {\n        this.reset();\n      }\n      if (this.x > width - width / 4 || this.y < 0) {\n        this.fadingOut = true;\n      }\n    };\n\n    (function () {\n      setTimeout(function () {\n        first = false;\n      }, 50);\n    })();\n  }\n\n  function getProbability(percents) {\n    return Math.floor(Math.random() * 1000) + 1 < percents * 10;\n  }\n\n  function getRandInterval(min, max) {\n    return Math.random() * (max - min) + min;\n  }\n\n  function windowResizeHandler() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    starCount = width * starDensity;\n    circleRadius = width > height ? height / 2 : width / 2;\n    circleCenter = {\n      x: width / 2,\n      y: height / 2,\n    };\n\n    canva.setAttribute(\"width\", width);\n    canva.setAttribute(\"height\", height);\n  }\n</script>\n<!-- 星团js -->\n<script>\n  let particles = [];\n  let microparticles = [];\n\n  const c1 = createCanvas({\n    width: $(window).width(),\n    height: $(window).height(),\n  });\n\n  const tela = c1.canvas;\n  const canvas = c1.context;\n\n  // $(\"body\").append(tela);\n  $(\"body\").append(c1.canvas);\n\n  class Particle1 {\n    constructor(canvas) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n      this.life = 1000 + Math.random() * 3000;\n\n      this.x =\n              $(window).width() / 2 + (Math.random() * 20 - Math.random() * 20);\n      this.y = $(window).height();\n      this.s = 2 + Math.random();\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.direction = this.random > 0.5 ? -1 : 1;\n      this.radius = 1 + 3 * this.random;\n      this.color = \"#ff417d\";\n\n      this.ID = setInterval(\n              function () {\n                microparticles.push(\n                        new microParticle(c1.context, {\n                          x: this.x,\n                          y: this.y,\n                        })\n                );\n              }.bind(this),\n              this.random * 20\n      );\n\n      setTimeout(\n              function () {\n                clearInterval(this.ID);\n              }.bind(this),\n              this.life\n      );\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      // this.canvas.lineWidth = 2;\n      this.canvas.shadowOffsetX = 0;\n      this.canvas.shadowOffsetY = 0;\n      // this.canvas.shadowBlur = 6;\n      this.canvas.shadowColor = \"#000000\";\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              this.direction *\n              Math.sin(this.progress / (this.random1 * 430)) *\n              this.s;\n      this.y -= Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        clearInterval(this.ID);\n        return false;\n      }\n\n      if (this.y < 0) {\n        clearInterval(this.ID);\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  class microParticle {\n    constructor(canvas, options) {\n      this.random = Math.random();\n      this.random1 = Math.random();\n      this.random2 = Math.random();\n      this.progress = 0;\n      this.canvas = canvas;\n\n      this.x = options.x;\n      this.y = options.y;\n      this.s = 2 + Math.random() * 3;\n      this.w = $(window).width();\n      this.h = $(window).height();\n      this.radius = 1 + this.random * 0.5;\n      this.color = \"#4EFCFE\"; //this.random > .5 ? \"#a9722c\" : \"#FFFED7\"\n    }\n\n    render() {\n      this.canvas.beginPath();\n      this.canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\n      this.canvas.lineWidth = 2;\n      this.canvas.fillStyle = this.color;\n      this.canvas.fill();\n      this.canvas.closePath();\n    }\n\n    move() {\n      this.x -=\n              Math.sin(this.progress / (100 / (this.random1 - this.random2 * 10))) *\n              this.s;\n      this.y += Math.cos(this.progress / this.h) * this.s;\n\n      if (this.x < 0 || this.x > this.w - this.radius) {\n        return false;\n      }\n\n      if (this.y > this.h) {\n        return false;\n      }\n      this.render();\n      this.progress++;\n      return true;\n    }\n  }\n\n  var random_life = 1000;\n\n  setInterval(\n          function () {\n            particles.push(new Particle1(canvas));\n            random_life = 2000 * Math.random();\n          }.bind(this),\n          random_life\n  );\n\n  function clear() {\n    let grd = canvas.createRadialGradient(\n            tela.width / 2,\n            tela.height / 2,\n            0,\n            tela.width / 2,\n            tela.height / 2,\n            tela.width\n    );\n    grd.addColorStop(0, \"rgba(20,20,20,1)\");\n    grd.addColorStop(1, \"rgba(0,0,0,0)\");\n    // Fill with gradient\n    canvas.globalAlpha = 0.16;\n    canvas.fillStyle = grd;\n    canvas.fillRect(0, 0, tela.width, tela.height);\n  }\n\n  function blur(ctx, canvas, amt) {\n    // ctx.filter = `blur(${amt}px)`\n    // ctx.drawImage(canvas, 0, 0)\n    // ctx.filter = 'none'\n  }\n\n  function update() {\n    clear();\n    particles = particles.filter(function (p) {\n      return p.move();\n    });\n    microparticles = microparticles.filter(function (mp) {\n      return mp.move();\n    });\n    requestAnimationFrame(update.bind(this));\n  }\n\n  function createCanvas(properties) {\n    let canvas = document.createElement(\"canvas\");\n    canvas.width = properties.width;\n    //   canvas.style.zIndex = 999;\n    canvas.height = properties.height;\n    let context = canvas.getContext(\"2d\");\n    return {\n      canvas: canvas,\n      context: context,\n    };\n  }\n  update();\n</script>\n\n\n\n</body>\n\n\n\n\n\n"},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"\n#这好像就是一个简历#\n#每一天的学习究竟是为了啥,是为了赚钱,其实吧学习本身就是开心的事,只是你一值不愿意承认 .....\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n\n#这好像就是一个简历#\n#每一天的学习究竟是为了啥,是为了赚钱,其实吧学习本身就是开心的事,只是你一值不愿意承认 .....\n","updated":"2023-04-08T14:56:28.603Z","path":"about/index.html","comments":1,"_id":"clgbow4ma0002cou35bl39yci","content":"<p>#这好像就是一个简历#<br>#每一天的学习究竟是为了啥,是为了赚钱,其实吧学习本身就是开心的事,只是你一值不愿意承认 …..</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>#这好像就是一个简历#<br>#每一天的学习究竟是为了啥,是为了赚钱,其实吧学习本身就是开心的事,只是你一值不愿意承认 …..</p>\n"},{"title":"404","date":"2020-05-29T16:00:00.000Z","type":"404","layout":"404","description":"Cannot find the page you want :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-05-30 00:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Cannot find the page you want :(\"\n---","updated":"2023-04-06T13:31:46.995Z","path":"404/index.html","comments":1,"_id":"clgbow4mc0004cou32yqf9ix2","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2023-04-06T13:26:17.697Z","path":"contact/index.html","comments":1,"_id":"clgbow4md0006cou39esz7f4k","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2023-04-06T13:26:56.297Z","path":"friends/index.html","comments":1,"_id":"clgbow4me0007cou3815h69af","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2023-04-06T13:24:26.957Z","path":"categories/index.html","comments":1,"_id":"clgbow4me0008cou3gp9t0q3y","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-10T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-10 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2023-04-06T13:25:21.775Z","path":"tags/index.html","comments":1,"_id":"clgbow4mf0009cou38odjasea","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-06T12:37:02.110Z","updated":"2023-03-30T14:05:33.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgbow4m60001cou38y104xhm","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"js","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-04-12T02:19:34.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"# 客户端和服务器\n\n客户端：入网设备或者是可联网的软件里面，主要作用是接受和处理来自服务器的信息，并向服务器发送请求。常见的客户端包括浏览器、手机APP等。\n\n服务器：存储网页、站点和应用的计算机，主要作用是响应客户端的请求，向客户端提供所需的信息和服务。客户端需要使用的内容和数据通常需要从服务器上获取后才能使用。\n\n其他部分\n\n- 互联网：是由众多计算机网络互相连接而成的全球性网络，它采用TCP/IP协议族作为通信规范。\n- DNS：域名系统，是一种将域名和IP地址相互映射的分布式数据库系统，它可以将用户输入的域名转换成对应的IP地址，以便客户端能够通过IP地址访问服务器。\n- HTTP：超文本传输协议，定义了客户端和服务器之间交流的语言和规范，它是通过互联网进行数据通信的基础。\n\n组成文件：网页通常由HTML、CSS和JavaScript代码组成，其中HTML用于描述网页内容和结构，CSS用于控制网页的样式和布局，JavaScript用于实现网页的交互和动态效果。\n\n解析文件顺序\n\n1. HTML文件：首先解析HTML文件，获取其中的link和script元素，以确定需要加载的CSS和JavaScript文件的链接地址。\n\n2. CSS文件：解析CSS文件，生成对应的CSSOM树，用于渲染网页的样式和布局。\n\n3. JavaScript文件：执行JavaScript脚本，实现网页的动态效果和交互功能。\n\n4. 绘制网页：最后将HTML和CSS渲染成网页的界面，实现交互和动态效果。\n\nJavaScript基本知识\n\n- 变量：JavaScript中的变量是一种用于存储数据的容器，其中存储的数据可以是任何类型。例如，可以使用变量来存储字符串、数字、数组、对象等。\n- 声明变量：可以使用let或者const关键字来声明变量，其中let用于声明可修改的变量，const用于声明不可修改的常量。\n- 函数：JavaScript中的函数是一种可以被多次调用的代码块，可以接受参数并返回值。函数可以用于实现复杂的逻辑，例如数据处理、算法实现等。\n- 事件：JavaScript中的事件是一种在特定情况下自动触发的行为，例如点击、鼠标移动、键盘按下等。可以使用事件来实现网页的交互和动态效果。\n- DOM：文档对象模型，是一种将HTML和XML文档表示为对象的方式，可以通过JavaScript来操作和修改网页中的元素和内容。","source":"_posts/js.md","raw":"---\ntitle: js\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-04-12 10:19:34\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n# 客户端和服务器\n\n客户端：入网设备或者是可联网的软件里面，主要作用是接受和处理来自服务器的信息，并向服务器发送请求。常见的客户端包括浏览器、手机APP等。\n\n服务器：存储网页、站点和应用的计算机，主要作用是响应客户端的请求，向客户端提供所需的信息和服务。客户端需要使用的内容和数据通常需要从服务器上获取后才能使用。\n\n其他部分\n\n- 互联网：是由众多计算机网络互相连接而成的全球性网络，它采用TCP/IP协议族作为通信规范。\n- DNS：域名系统，是一种将域名和IP地址相互映射的分布式数据库系统，它可以将用户输入的域名转换成对应的IP地址，以便客户端能够通过IP地址访问服务器。\n- HTTP：超文本传输协议，定义了客户端和服务器之间交流的语言和规范，它是通过互联网进行数据通信的基础。\n\n组成文件：网页通常由HTML、CSS和JavaScript代码组成，其中HTML用于描述网页内容和结构，CSS用于控制网页的样式和布局，JavaScript用于实现网页的交互和动态效果。\n\n解析文件顺序\n\n1. HTML文件：首先解析HTML文件，获取其中的link和script元素，以确定需要加载的CSS和JavaScript文件的链接地址。\n\n2. CSS文件：解析CSS文件，生成对应的CSSOM树，用于渲染网页的样式和布局。\n\n3. JavaScript文件：执行JavaScript脚本，实现网页的动态效果和交互功能。\n\n4. 绘制网页：最后将HTML和CSS渲染成网页的界面，实现交互和动态效果。\n\nJavaScript基本知识\n\n- 变量：JavaScript中的变量是一种用于存储数据的容器，其中存储的数据可以是任何类型。例如，可以使用变量来存储字符串、数字、数组、对象等。\n- 声明变量：可以使用let或者const关键字来声明变量，其中let用于声明可修改的变量，const用于声明不可修改的常量。\n- 函数：JavaScript中的函数是一种可以被多次调用的代码块，可以接受参数并返回值。函数可以用于实现复杂的逻辑，例如数据处理、算法实现等。\n- 事件：JavaScript中的事件是一种在特定情况下自动触发的行为，例如点击、鼠标移动、键盘按下等。可以使用事件来实现网页的交互和动态效果。\n- DOM：文档对象模型，是一种将HTML和XML文档表示为对象的方式，可以通过JavaScript来操作和修改网页中的元素和内容。","slug":"js","published":1,"updated":"2023-04-12T02:20:22.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgl0lgli0001jku3b0o23b5t","content":"<h1 id=\"客户端和服务器\"><a href=\"#客户端和服务器\" class=\"headerlink\" title=\"客户端和服务器\"></a>客户端和服务器</h1><p>客户端：入网设备或者是可联网的软件里面，主要作用是接受和处理来自服务器的信息，并向服务器发送请求。常见的客户端包括浏览器、手机APP等。</p>\n<p>服务器：存储网页、站点和应用的计算机，主要作用是响应客户端的请求，向客户端提供所需的信息和服务。客户端需要使用的内容和数据通常需要从服务器上获取后才能使用。</p>\n<p>其他部分</p>\n<ul>\n<li>互联网：是由众多计算机网络互相连接而成的全球性网络，它采用TCP/IP协议族作为通信规范。</li>\n<li>DNS：域名系统，是一种将域名和IP地址相互映射的分布式数据库系统，它可以将用户输入的域名转换成对应的IP地址，以便客户端能够通过IP地址访问服务器。</li>\n<li>HTTP：超文本传输协议，定义了客户端和服务器之间交流的语言和规范，它是通过互联网进行数据通信的基础。</li>\n</ul>\n<p>组成文件：网页通常由HTML、CSS和JavaScript代码组成，其中HTML用于描述网页内容和结构，CSS用于控制网页的样式和布局，JavaScript用于实现网页的交互和动态效果。</p>\n<p>解析文件顺序</p>\n<ol>\n<li><p>HTML文件：首先解析HTML文件，获取其中的link和script元素，以确定需要加载的CSS和JavaScript文件的链接地址。</p>\n</li>\n<li><p>CSS文件：解析CSS文件，生成对应的CSSOM树，用于渲染网页的样式和布局。</p>\n</li>\n<li><p>JavaScript文件：执行JavaScript脚本，实现网页的动态效果和交互功能。</p>\n</li>\n<li><p>绘制网页：最后将HTML和CSS渲染成网页的界面，实现交互和动态效果。</p>\n</li>\n</ol>\n<p>JavaScript基本知识</p>\n<ul>\n<li>变量：JavaScript中的变量是一种用于存储数据的容器，其中存储的数据可以是任何类型。例如，可以使用变量来存储字符串、数字、数组、对象等。</li>\n<li>声明变量：可以使用let或者const关键字来声明变量，其中let用于声明可修改的变量，const用于声明不可修改的常量。</li>\n<li>函数：JavaScript中的函数是一种可以被多次调用的代码块，可以接受参数并返回值。函数可以用于实现复杂的逻辑，例如数据处理、算法实现等。</li>\n<li>事件：JavaScript中的事件是一种在特定情况下自动触发的行为，例如点击、鼠标移动、键盘按下等。可以使用事件来实现网页的交互和动态效果。</li>\n<li>DOM：文档对象模型，是一种将HTML和XML文档表示为对象的方式，可以通过JavaScript来操作和修改网页中的元素和内容。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"客户端和服务器\"><a href=\"#客户端和服务器\" class=\"headerlink\" title=\"客户端和服务器\"></a>客户端和服务器</h1><p>客户端：入网设备或者是可联网的软件里面，主要作用是接受和处理来自服务器的信息，并向服务器发送请求。常见的客户端包括浏览器、手机APP等。</p>\n<p>服务器：存储网页、站点和应用的计算机，主要作用是响应客户端的请求，向客户端提供所需的信息和服务。客户端需要使用的内容和数据通常需要从服务器上获取后才能使用。</p>\n<p>其他部分</p>\n<ul>\n<li>互联网：是由众多计算机网络互相连接而成的全球性网络，它采用TCP/IP协议族作为通信规范。</li>\n<li>DNS：域名系统，是一种将域名和IP地址相互映射的分布式数据库系统，它可以将用户输入的域名转换成对应的IP地址，以便客户端能够通过IP地址访问服务器。</li>\n<li>HTTP：超文本传输协议，定义了客户端和服务器之间交流的语言和规范，它是通过互联网进行数据通信的基础。</li>\n</ul>\n<p>组成文件：网页通常由HTML、CSS和JavaScript代码组成，其中HTML用于描述网页内容和结构，CSS用于控制网页的样式和布局，JavaScript用于实现网页的交互和动态效果。</p>\n<p>解析文件顺序</p>\n<ol>\n<li><p>HTML文件：首先解析HTML文件，获取其中的link和script元素，以确定需要加载的CSS和JavaScript文件的链接地址。</p>\n</li>\n<li><p>CSS文件：解析CSS文件，生成对应的CSSOM树，用于渲染网页的样式和布局。</p>\n</li>\n<li><p>JavaScript文件：执行JavaScript脚本，实现网页的动态效果和交互功能。</p>\n</li>\n<li><p>绘制网页：最后将HTML和CSS渲染成网页的界面，实现交互和动态效果。</p>\n</li>\n</ol>\n<p>JavaScript基本知识</p>\n<ul>\n<li>变量：JavaScript中的变量是一种用于存储数据的容器，其中存储的数据可以是任何类型。例如，可以使用变量来存储字符串、数字、数组、对象等。</li>\n<li>声明变量：可以使用let或者const关键字来声明变量，其中let用于声明可修改的变量，const用于声明不可修改的常量。</li>\n<li>函数：JavaScript中的函数是一种可以被多次调用的代码块，可以接受参数并返回值。函数可以用于实现复杂的逻辑，例如数据处理、算法实现等。</li>\n<li>事件：JavaScript中的事件是一种在特定情况下自动触发的行为，例如点击、鼠标移动、键盘按下等。可以使用事件来实现网页的交互和动态效果。</li>\n<li>DOM：文档对象模型，是一种将HTML和XML文档表示为对象的方式，可以通过JavaScript来操作和修改网页中的元素和内容。</li>\n</ul>\n"},{"title":"Studyplan","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-05-03T16:10:39.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"当然可以，以下是中文版的 React 文档链接：\n\n学习 JavaScript 基础知识\n\n可以参考 MDN 的 JavaScript 文档：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\n学习 React 基础知识\n\n可以参考 React 官方文档：https://zh-hans.reactjs.org/docs/getting-started.html\n学习 React 中的状态管理和数据流\n\n可以参考 React Hooks 官方文档：https://zh-hans.reactjs.org/docs/hooks-intro.html 和 Redux 中文文档：https://www.redux.org.cn/\n学习 React 中的路由和导航\n\n可以参考 React Router 官方文档：https://reactrouter.com/web/guides/quick-start\n学习 React 中的样式和布局\n\n可以参考 Styled Components 官方文档：https://styled-components.com/docs\n学习 React 中的测试和调试\n\n可以参考 Jest 官方文档：https://jestjs.io/docs/getting-started 和 React Testing Library 官方文档：https://testing-library.com/docs/react-testing-library/intro/\n学习 React 中的性能优化和最佳实践\n\n可以参考 React 官方文档的性能优化章节：https://zh-hans.reactjs.org/docs/optimizing-performance.html\n希望这些中文文档链接能对你有所帮助。\n\n我还有一本js的红宝书但是我不知道就是我具体要学习里面的那些内容,我是想做开发的\n\n《JavaScript高级程序设计（红宝书）》是一本经典的 JavaScript 学习教材，涵盖了 JavaScript 的核心概念和高级特性。如果你想成为一名开发者，掌握 JavaScript 是必不可少的。\n\n以下是建议的学习顺序和重点：\n\n基本语法和数据类型\n了解 JavaScript 的基本语法和数据类型，包括变量、数据类型、运算符、控制语句等。\n\n函数和作用域\n学习 JavaScript 的函数和作用域，包括函数声明和表达式、闭包、this、作用域链等。\n\n对象和面向对象编程\n学习 JavaScript 的对象和面向对象编程，包括对象字面量、构造函数、原型和原型链、继承等。\n\n异步编程和事件处理\n学习 JavaScript 的异步编程和事件处理，包括回调函数、Promise、async/await、事件处理器等。\n\nDOM 和浏览器编程\n学习 JavaScript 对 DOM 的操作和浏览器编程，包括文档对象模型、事件处理器、表单验证等。\n\nAjax 和跨域请求\n学习 JavaScript 的 Ajax 和跨域请求，包括XMLHttpRequest对象、fetch API、JSONP、CORS等。\n\nES6 和新特性\n学习 JavaScript 的 ES6 和新特性，包括箭头函数、模板字面量、解构赋值、let/const、class、模块化等。\n\n除了以上的内容，你也可以根据自己的实际需求和项目要求进行针对性的学习和应用。\n\n另外，建议你在学习 JavaScript 时也同时学习一个前端框架，比如 React、Vue、Angular 等，这样可以让你更快地应用和巩固所学的知识，并且提高开发效率和质量。\n\n一边学习框架的意识是啥,我该怎么做\n\n学习框架的意识是指在学习框架时，不仅要学习框架本身的语法和特性，还要理解框架的设计思想和使用场景。这样可以更好地理解和应用框架，同时也可以提高自己的代码质量和开发效率。\n\n下面是一些建议，可以帮助你在学习框架时培养框架意识：\n\n理解框架的设计思想和哲学\n每个框架都有自己的设计思想和哲学，比如 React 的组件化、Vue 的响应式数据绑定等。了解这些设计思想可以帮助你更好地理解框架的用法和优点。\n\n学习框架的核心概念和特性\n学习框架时，要重点掌握框架的核心概念和特性，比如 React 的虚拟 DOM、Vue 的生命周期等。这些概念和特性是框架的基础，也是后续学习和应用的基础。\n\n理解框架的使用场景和限制\n框架并不是万能的，它们各有适用的场景和限制。比如 React 更适用于大型应用的组件化开发，而 Vue 更适用于快速开发小型应用。了解这些使用场景和限制可以帮助你更好地选择和应用框架。\n\n学习框架的周边生态和工具\n每个框架都有自己的周边生态和工具，比如 React 的 React Router、Redux，Vue 的 Vuex、Vue Router 等。学习这些周边生态和工具可以帮助你更好地使用框架，同时也可以拓展自己的技能栈。\n\n阅读框架的源代码和文档\n阅读框架的源代码和文档可以帮助你更深入地了解框架的实现和用法。特别是在遇到问题时，阅读源代码和文档可以帮助你更快地找到解决方案。\n\n总之，学习框架不仅是学习语法和特性，更是一种开发思维和方法论的培养。希望以上建议能够对你有所帮助。\n\n你能介绍一些常用的框架吗？\n\n当今前端开发中，有很多优秀的框架供我们选择。以下是一些常用的框架：\n\nReact：由 Facebook 推出的一款组件化 UI 框架，主要用于构建大型单页面应用，具有高度的灵活性和可重用性。\n\nVue：一个渐进式的 JavaScript 框架，易于上手，具有响应式数据绑定和组件化等特性，适合用于中小型项目的开发。\n\nAngular：由 Google 推出的一款全面的前端框架，具有强大的工具链和生态系统，适合用于大型应用的开发。\n\njQuery：一款轻量级的 JavaScript 库，主要用于 DOM 操作和事件处理等，适合用于快速开发和简单项目的实现。\n\nBootstrap：一个流行的前端框架，包含了 HTML、CSS 和 JavaScript 组件，提供了快速开发网站的工具和模板。\n\nExpress：一个基于 Node.js 平台的 Web 应用程序框架，具有简单、灵活、高效等特点，适用于快速构建 Web 应用程序和 API。\n\n除了以上的框架，还有很多其他的优秀框架，比如 Ember.js、Backbone.js、Svelte 等。选择框架时，需要根据实际项目的需求、团队的技术水平和个人的喜好等因素进行综合考虑。","source":"_posts/Studyplan.md","raw":"---\ntitle: Studyplan\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-05-04 00:10:39\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n当然可以，以下是中文版的 React 文档链接：\n\n学习 JavaScript 基础知识\n\n可以参考 MDN 的 JavaScript 文档：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\n学习 React 基础知识\n\n可以参考 React 官方文档：https://zh-hans.reactjs.org/docs/getting-started.html\n学习 React 中的状态管理和数据流\n\n可以参考 React Hooks 官方文档：https://zh-hans.reactjs.org/docs/hooks-intro.html 和 Redux 中文文档：https://www.redux.org.cn/\n学习 React 中的路由和导航\n\n可以参考 React Router 官方文档：https://reactrouter.com/web/guides/quick-start\n学习 React 中的样式和布局\n\n可以参考 Styled Components 官方文档：https://styled-components.com/docs\n学习 React 中的测试和调试\n\n可以参考 Jest 官方文档：https://jestjs.io/docs/getting-started 和 React Testing Library 官方文档：https://testing-library.com/docs/react-testing-library/intro/\n学习 React 中的性能优化和最佳实践\n\n可以参考 React 官方文档的性能优化章节：https://zh-hans.reactjs.org/docs/optimizing-performance.html\n希望这些中文文档链接能对你有所帮助。\n\n我还有一本js的红宝书但是我不知道就是我具体要学习里面的那些内容,我是想做开发的\n\n《JavaScript高级程序设计（红宝书）》是一本经典的 JavaScript 学习教材，涵盖了 JavaScript 的核心概念和高级特性。如果你想成为一名开发者，掌握 JavaScript 是必不可少的。\n\n以下是建议的学习顺序和重点：\n\n基本语法和数据类型\n了解 JavaScript 的基本语法和数据类型，包括变量、数据类型、运算符、控制语句等。\n\n函数和作用域\n学习 JavaScript 的函数和作用域，包括函数声明和表达式、闭包、this、作用域链等。\n\n对象和面向对象编程\n学习 JavaScript 的对象和面向对象编程，包括对象字面量、构造函数、原型和原型链、继承等。\n\n异步编程和事件处理\n学习 JavaScript 的异步编程和事件处理，包括回调函数、Promise、async/await、事件处理器等。\n\nDOM 和浏览器编程\n学习 JavaScript 对 DOM 的操作和浏览器编程，包括文档对象模型、事件处理器、表单验证等。\n\nAjax 和跨域请求\n学习 JavaScript 的 Ajax 和跨域请求，包括XMLHttpRequest对象、fetch API、JSONP、CORS等。\n\nES6 和新特性\n学习 JavaScript 的 ES6 和新特性，包括箭头函数、模板字面量、解构赋值、let/const、class、模块化等。\n\n除了以上的内容，你也可以根据自己的实际需求和项目要求进行针对性的学习和应用。\n\n另外，建议你在学习 JavaScript 时也同时学习一个前端框架，比如 React、Vue、Angular 等，这样可以让你更快地应用和巩固所学的知识，并且提高开发效率和质量。\n\n一边学习框架的意识是啥,我该怎么做\n\n学习框架的意识是指在学习框架时，不仅要学习框架本身的语法和特性，还要理解框架的设计思想和使用场景。这样可以更好地理解和应用框架，同时也可以提高自己的代码质量和开发效率。\n\n下面是一些建议，可以帮助你在学习框架时培养框架意识：\n\n理解框架的设计思想和哲学\n每个框架都有自己的设计思想和哲学，比如 React 的组件化、Vue 的响应式数据绑定等。了解这些设计思想可以帮助你更好地理解框架的用法和优点。\n\n学习框架的核心概念和特性\n学习框架时，要重点掌握框架的核心概念和特性，比如 React 的虚拟 DOM、Vue 的生命周期等。这些概念和特性是框架的基础，也是后续学习和应用的基础。\n\n理解框架的使用场景和限制\n框架并不是万能的，它们各有适用的场景和限制。比如 React 更适用于大型应用的组件化开发，而 Vue 更适用于快速开发小型应用。了解这些使用场景和限制可以帮助你更好地选择和应用框架。\n\n学习框架的周边生态和工具\n每个框架都有自己的周边生态和工具，比如 React 的 React Router、Redux，Vue 的 Vuex、Vue Router 等。学习这些周边生态和工具可以帮助你更好地使用框架，同时也可以拓展自己的技能栈。\n\n阅读框架的源代码和文档\n阅读框架的源代码和文档可以帮助你更深入地了解框架的实现和用法。特别是在遇到问题时，阅读源代码和文档可以帮助你更快地找到解决方案。\n\n总之，学习框架不仅是学习语法和特性，更是一种开发思维和方法论的培养。希望以上建议能够对你有所帮助。\n\n你能介绍一些常用的框架吗？\n\n当今前端开发中，有很多优秀的框架供我们选择。以下是一些常用的框架：\n\nReact：由 Facebook 推出的一款组件化 UI 框架，主要用于构建大型单页面应用，具有高度的灵活性和可重用性。\n\nVue：一个渐进式的 JavaScript 框架，易于上手，具有响应式数据绑定和组件化等特性，适合用于中小型项目的开发。\n\nAngular：由 Google 推出的一款全面的前端框架，具有强大的工具链和生态系统，适合用于大型应用的开发。\n\njQuery：一款轻量级的 JavaScript 库，主要用于 DOM 操作和事件处理等，适合用于快速开发和简单项目的实现。\n\nBootstrap：一个流行的前端框架，包含了 HTML、CSS 和 JavaScript 组件，提供了快速开发网站的工具和模板。\n\nExpress：一个基于 Node.js 平台的 Web 应用程序框架，具有简单、灵活、高效等特点，适用于快速构建 Web 应用程序和 API。\n\n除了以上的框架，还有很多其他的优秀框架，比如 Ember.js、Backbone.js、Svelte 等。选择框架时，需要根据实际项目的需求、团队的技术水平和个人的喜好等因素进行综合考虑。","slug":"Studyplan","published":1,"updated":"2023-05-03T16:10:55.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clh7waszn0000asu33k329xjs","content":"<p>当然可以，以下是中文版的 React 文档链接：</p>\n<p>学习 JavaScript 基础知识</p>\n<p>可以参考 MDN 的 JavaScript 文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a><br>学习 React 基础知识</p>\n<p>可以参考 React 官方文档：<a href=\"https://zh-hans.reactjs.org/docs/getting-started.html\">https://zh-hans.reactjs.org/docs/getting-started.html</a><br>学习 React 中的状态管理和数据流</p>\n<p>可以参考 React Hooks 官方文档：<a href=\"https://zh-hans.reactjs.org/docs/hooks-intro.html\">https://zh-hans.reactjs.org/docs/hooks-intro.html</a> 和 Redux 中文文档：<a href=\"https://www.redux.org.cn/\">https://www.redux.org.cn/</a><br>学习 React 中的路由和导航</p>\n<p>可以参考 React Router 官方文档：<a href=\"https://reactrouter.com/web/guides/quick-start\">https://reactrouter.com/web/guides/quick-start</a><br>学习 React 中的样式和布局</p>\n<p>可以参考 Styled Components 官方文档：<a href=\"https://styled-components.com/docs\">https://styled-components.com/docs</a><br>学习 React 中的测试和调试</p>\n<p>可以参考 Jest 官方文档：<a href=\"https://jestjs.io/docs/getting-started\">https://jestjs.io/docs/getting-started</a> 和 React Testing Library 官方文档：<a href=\"https://testing-library.com/docs/react-testing-library/intro/\">https://testing-library.com/docs/react-testing-library/intro/</a><br>学习 React 中的性能优化和最佳实践</p>\n<p>可以参考 React 官方文档的性能优化章节：<a href=\"https://zh-hans.reactjs.org/docs/optimizing-performance.html\">https://zh-hans.reactjs.org/docs/optimizing-performance.html</a><br>希望这些中文文档链接能对你有所帮助。</p>\n<p>我还有一本js的红宝书但是我不知道就是我具体要学习里面的那些内容,我是想做开发的</p>\n<p>《JavaScript高级程序设计（红宝书）》是一本经典的 JavaScript 学习教材，涵盖了 JavaScript 的核心概念和高级特性。如果你想成为一名开发者，掌握 JavaScript 是必不可少的。</p>\n<p>以下是建议的学习顺序和重点：</p>\n<p>基本语法和数据类型<br>了解 JavaScript 的基本语法和数据类型，包括变量、数据类型、运算符、控制语句等。</p>\n<p>函数和作用域<br>学习 JavaScript 的函数和作用域，包括函数声明和表达式、闭包、this、作用域链等。</p>\n<p>对象和面向对象编程<br>学习 JavaScript 的对象和面向对象编程，包括对象字面量、构造函数、原型和原型链、继承等。</p>\n<p>异步编程和事件处理<br>学习 JavaScript 的异步编程和事件处理，包括回调函数、Promise、async/await、事件处理器等。</p>\n<p>DOM 和浏览器编程<br>学习 JavaScript 对 DOM 的操作和浏览器编程，包括文档对象模型、事件处理器、表单验证等。</p>\n<p>Ajax 和跨域请求<br>学习 JavaScript 的 Ajax 和跨域请求，包括XMLHttpRequest对象、fetch API、JSONP、CORS等。</p>\n<p>ES6 和新特性<br>学习 JavaScript 的 ES6 和新特性，包括箭头函数、模板字面量、解构赋值、let/const、class、模块化等。</p>\n<p>除了以上的内容，你也可以根据自己的实际需求和项目要求进行针对性的学习和应用。</p>\n<p>另外，建议你在学习 JavaScript 时也同时学习一个前端框架，比如 React、Vue、Angular 等，这样可以让你更快地应用和巩固所学的知识，并且提高开发效率和质量。</p>\n<p>一边学习框架的意识是啥,我该怎么做</p>\n<p>学习框架的意识是指在学习框架时，不仅要学习框架本身的语法和特性，还要理解框架的设计思想和使用场景。这样可以更好地理解和应用框架，同时也可以提高自己的代码质量和开发效率。</p>\n<p>下面是一些建议，可以帮助你在学习框架时培养框架意识：</p>\n<p>理解框架的设计思想和哲学<br>每个框架都有自己的设计思想和哲学，比如 React 的组件化、Vue 的响应式数据绑定等。了解这些设计思想可以帮助你更好地理解框架的用法和优点。</p>\n<p>学习框架的核心概念和特性<br>学习框架时，要重点掌握框架的核心概念和特性，比如 React 的虚拟 DOM、Vue 的生命周期等。这些概念和特性是框架的基础，也是后续学习和应用的基础。</p>\n<p>理解框架的使用场景和限制<br>框架并不是万能的，它们各有适用的场景和限制。比如 React 更适用于大型应用的组件化开发，而 Vue 更适用于快速开发小型应用。了解这些使用场景和限制可以帮助你更好地选择和应用框架。</p>\n<p>学习框架的周边生态和工具<br>每个框架都有自己的周边生态和工具，比如 React 的 React Router、Redux，Vue 的 Vuex、Vue Router 等。学习这些周边生态和工具可以帮助你更好地使用框架，同时也可以拓展自己的技能栈。</p>\n<p>阅读框架的源代码和文档<br>阅读框架的源代码和文档可以帮助你更深入地了解框架的实现和用法。特别是在遇到问题时，阅读源代码和文档可以帮助你更快地找到解决方案。</p>\n<p>总之，学习框架不仅是学习语法和特性，更是一种开发思维和方法论的培养。希望以上建议能够对你有所帮助。</p>\n<p>你能介绍一些常用的框架吗？</p>\n<p>当今前端开发中，有很多优秀的框架供我们选择。以下是一些常用的框架：</p>\n<p>React：由 Facebook 推出的一款组件化 UI 框架，主要用于构建大型单页面应用，具有高度的灵活性和可重用性。</p>\n<p>Vue：一个渐进式的 JavaScript 框架，易于上手，具有响应式数据绑定和组件化等特性，适合用于中小型项目的开发。</p>\n<p>Angular：由 Google 推出的一款全面的前端框架，具有强大的工具链和生态系统，适合用于大型应用的开发。</p>\n<p>jQuery：一款轻量级的 JavaScript 库，主要用于 DOM 操作和事件处理等，适合用于快速开发和简单项目的实现。</p>\n<p>Bootstrap：一个流行的前端框架，包含了 HTML、CSS 和 JavaScript 组件，提供了快速开发网站的工具和模板。</p>\n<p>Express：一个基于 Node.js 平台的 Web 应用程序框架，具有简单、灵活、高效等特点，适用于快速构建 Web 应用程序和 API。</p>\n<p>除了以上的框架，还有很多其他的优秀框架，比如 Ember.js、Backbone.js、Svelte 等。选择框架时，需要根据实际项目的需求、团队的技术水平和个人的喜好等因素进行综合考虑。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>当然可以，以下是中文版的 React 文档链接：</p>\n<p>学习 JavaScript 基础知识</p>\n<p>可以参考 MDN 的 JavaScript 文档：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a><br>学习 React 基础知识</p>\n<p>可以参考 React 官方文档：<a href=\"https://zh-hans.reactjs.org/docs/getting-started.html\">https://zh-hans.reactjs.org/docs/getting-started.html</a><br>学习 React 中的状态管理和数据流</p>\n<p>可以参考 React Hooks 官方文档：<a href=\"https://zh-hans.reactjs.org/docs/hooks-intro.html\">https://zh-hans.reactjs.org/docs/hooks-intro.html</a> 和 Redux 中文文档：<a href=\"https://www.redux.org.cn/\">https://www.redux.org.cn/</a><br>学习 React 中的路由和导航</p>\n<p>可以参考 React Router 官方文档：<a href=\"https://reactrouter.com/web/guides/quick-start\">https://reactrouter.com/web/guides/quick-start</a><br>学习 React 中的样式和布局</p>\n<p>可以参考 Styled Components 官方文档：<a href=\"https://styled-components.com/docs\">https://styled-components.com/docs</a><br>学习 React 中的测试和调试</p>\n<p>可以参考 Jest 官方文档：<a href=\"https://jestjs.io/docs/getting-started\">https://jestjs.io/docs/getting-started</a> 和 React Testing Library 官方文档：<a href=\"https://testing-library.com/docs/react-testing-library/intro/\">https://testing-library.com/docs/react-testing-library/intro/</a><br>学习 React 中的性能优化和最佳实践</p>\n<p>可以参考 React 官方文档的性能优化章节：<a href=\"https://zh-hans.reactjs.org/docs/optimizing-performance.html\">https://zh-hans.reactjs.org/docs/optimizing-performance.html</a><br>希望这些中文文档链接能对你有所帮助。</p>\n<p>我还有一本js的红宝书但是我不知道就是我具体要学习里面的那些内容,我是想做开发的</p>\n<p>《JavaScript高级程序设计（红宝书）》是一本经典的 JavaScript 学习教材，涵盖了 JavaScript 的核心概念和高级特性。如果你想成为一名开发者，掌握 JavaScript 是必不可少的。</p>\n<p>以下是建议的学习顺序和重点：</p>\n<p>基本语法和数据类型<br>了解 JavaScript 的基本语法和数据类型，包括变量、数据类型、运算符、控制语句等。</p>\n<p>函数和作用域<br>学习 JavaScript 的函数和作用域，包括函数声明和表达式、闭包、this、作用域链等。</p>\n<p>对象和面向对象编程<br>学习 JavaScript 的对象和面向对象编程，包括对象字面量、构造函数、原型和原型链、继承等。</p>\n<p>异步编程和事件处理<br>学习 JavaScript 的异步编程和事件处理，包括回调函数、Promise、async/await、事件处理器等。</p>\n<p>DOM 和浏览器编程<br>学习 JavaScript 对 DOM 的操作和浏览器编程，包括文档对象模型、事件处理器、表单验证等。</p>\n<p>Ajax 和跨域请求<br>学习 JavaScript 的 Ajax 和跨域请求，包括XMLHttpRequest对象、fetch API、JSONP、CORS等。</p>\n<p>ES6 和新特性<br>学习 JavaScript 的 ES6 和新特性，包括箭头函数、模板字面量、解构赋值、let/const、class、模块化等。</p>\n<p>除了以上的内容，你也可以根据自己的实际需求和项目要求进行针对性的学习和应用。</p>\n<p>另外，建议你在学习 JavaScript 时也同时学习一个前端框架，比如 React、Vue、Angular 等，这样可以让你更快地应用和巩固所学的知识，并且提高开发效率和质量。</p>\n<p>一边学习框架的意识是啥,我该怎么做</p>\n<p>学习框架的意识是指在学习框架时，不仅要学习框架本身的语法和特性，还要理解框架的设计思想和使用场景。这样可以更好地理解和应用框架，同时也可以提高自己的代码质量和开发效率。</p>\n<p>下面是一些建议，可以帮助你在学习框架时培养框架意识：</p>\n<p>理解框架的设计思想和哲学<br>每个框架都有自己的设计思想和哲学，比如 React 的组件化、Vue 的响应式数据绑定等。了解这些设计思想可以帮助你更好地理解框架的用法和优点。</p>\n<p>学习框架的核心概念和特性<br>学习框架时，要重点掌握框架的核心概念和特性，比如 React 的虚拟 DOM、Vue 的生命周期等。这些概念和特性是框架的基础，也是后续学习和应用的基础。</p>\n<p>理解框架的使用场景和限制<br>框架并不是万能的，它们各有适用的场景和限制。比如 React 更适用于大型应用的组件化开发，而 Vue 更适用于快速开发小型应用。了解这些使用场景和限制可以帮助你更好地选择和应用框架。</p>\n<p>学习框架的周边生态和工具<br>每个框架都有自己的周边生态和工具，比如 React 的 React Router、Redux，Vue 的 Vuex、Vue Router 等。学习这些周边生态和工具可以帮助你更好地使用框架，同时也可以拓展自己的技能栈。</p>\n<p>阅读框架的源代码和文档<br>阅读框架的源代码和文档可以帮助你更深入地了解框架的实现和用法。特别是在遇到问题时，阅读源代码和文档可以帮助你更快地找到解决方案。</p>\n<p>总之，学习框架不仅是学习语法和特性，更是一种开发思维和方法论的培养。希望以上建议能够对你有所帮助。</p>\n<p>你能介绍一些常用的框架吗？</p>\n<p>当今前端开发中，有很多优秀的框架供我们选择。以下是一些常用的框架：</p>\n<p>React：由 Facebook 推出的一款组件化 UI 框架，主要用于构建大型单页面应用，具有高度的灵活性和可重用性。</p>\n<p>Vue：一个渐进式的 JavaScript 框架，易于上手，具有响应式数据绑定和组件化等特性，适合用于中小型项目的开发。</p>\n<p>Angular：由 Google 推出的一款全面的前端框架，具有强大的工具链和生态系统，适合用于大型应用的开发。</p>\n<p>jQuery：一款轻量级的 JavaScript 库，主要用于 DOM 操作和事件处理等，适合用于快速开发和简单项目的实现。</p>\n<p>Bootstrap：一个流行的前端框架，包含了 HTML、CSS 和 JavaScript 组件，提供了快速开发网站的工具和模板。</p>\n<p>Express：一个基于 Node.js 平台的 Web 应用程序框架，具有简单、灵活、高效等特点，适用于快速构建 Web 应用程序和 API。</p>\n<p>除了以上的框架，还有很多其他的优秀框架，比如 Ember.js、Backbone.js、Svelte 等。选择框架时，需要根据实际项目的需求、团队的技术水平和个人的喜好等因素进行综合考虑。</p>\n"},{"title":"android","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-05-05T02:50:14.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"","source":"_posts/android.md","raw":"---\ntitle: android\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-05-05 10:50:14\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n","slug":"android","published":1,"updated":"2023-05-05T02:50:14.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhg9488h0000hou35kdcf7zv","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":""},{"title":"js1","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-04-17T15:45:00.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"## 客户端web api\n当你给网页或者网页应用编写客户端的 JavaScript 时，你很快会遇上应用程序接口（API）—— 这些编程特性可用来操控网站所基于的浏览器与操作系统的不同方面，或是操控由其他网站或服务端传来的数据。在这个单元里，我们将一同探索什么是 API，以及如何使用一些在你开发中将经常遇见的 API。\n\n###web aip简介\nJavaScript——一种内置于浏览器的高级脚本语言，你可以用来实现 Web 页面/应用中的功能。注意 JavaScript 也可用于其他像 Node 这样的的编程环境。但现在你不必考虑这些。\n客户端 API — 内置于浏览器的结构程序，位于 JavaScript 语言顶部，使您可以更容易的实现功能。\n第三方 API — 置于第三方普通的结构程序（例如 Twitter，Facebook），使您可以在自己的 Web 页面中使用那些平台的某些功能（例如在您的 Web 页面显示最新的 Tweets）。\nJavaScript 库 — 通常是包含具有特定功能的一个或多个 JavaScript 文件，把这些文件关联到您的 Web 页以快速或授权编写常见的功能。例如包含 jQuery 和 Mootools\nJavaScript 框架 — 从库开始的下一步，JavaScript 框架视图把 HTML、CSS、JavaScript 和其他安装的技术打包在一起，然后用来从头编写一个完整的 Web 应用\n\n###API 如何工作？\nAPI 使用一个或多个 JavaScript objects 在您的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。\n\napi 是基于对象的.这些对象就是作为用作api使用的数据.的容器\n以及api提供的功能\ngeolocation的例子.这是一个非常简单的api.对象就是geolocation\nposition coordinates coordinates包括有关设备的\n大量有用的数据.包括经纬度,高度,运动速度,以及运动方向\n使用井号（#）来创建标题，井号的数量对应标题的级别。例如，使用三个井号（###）来创建三级标题（<h3>）。\n使用空行来分隔段落，不要使用空格或制表符来缩进段落。\n使用两个或更多的空格加上回车来创建换行或新行（<br>）。\n使用反引号（`）来创建内联代码，或者使用三个反引号（```）来创建代码块。\n根据这些规则，我可以把你的内容变成这样：\n\n# bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api\n\napi 就是应用程序接口她们就是抽象了复杂的代码.提供一些简单的接口规则直接使用, 让开发人员简单的创建复杂的功能,其实就是封装了一些代码,变的好用且简单了不少\n\n客户端里面web api 操作文档api\n\n## 1 document对象\n\n## 2 bom window对象里\n\n### window对象\n\n简介: 在浏览器里面的全局的一些对象和属性,可以改变就是浏览器里面的一些基本的属性\n\n1. 在gloabl作用域里面; `var sayage=() =>alert(this.age); var age = 29;` 在这样的定义下就会全变成window对象的属性,包含在里面\n2. 窗口关系\n3. 大小\n4. 视口位置,就是内阁滚轮控制的界面\n5. 导航和打开新的界面\n6. 定时器 `settimeout(字符串或者函数,时间);` 比较常用的就是`if(a< b) { settimeout (x,x)}`就是限制了不少不会一直不停的干下去\n   7.系统对话框`alert` 显示 `confirm` 确定 `prompt` 输入文本三个方法里面就是了\n\nconst 和let 就是不会添加到window对象里面,var 就会,区分使用就好了\n\n### 1 narvigator\n\n1. 检测插件\n2. 注册处理系统\n3. 负责提供浏览器的信息.例如就是名称平台.语言.它可以检查浏览器是否支持一些特性 例如jsva,cookie.vr等.可以使用window.navigator属性来访问navigator对象.\n\n   `javaEnabled()` 返回一个布尔值，表示浏览器是否启用了Java\n   `taintEnabled()` 返回一个布尔值，表示浏览器是否启用了数据污染\n   `vibrate()` 使设备振动一定的时间\n   `registerProtocolHandler()` 注册一个自定义的协议处理器\n   `requestMediaKeySystemAccess()` 请求一个媒体密钥系统的访问对象\n\n   属性 描述\n   `appCodeName` 返回浏览器的代码名\n   `appName` 返回浏览器的名称\n   `appVersion` 返回浏览器的版本信息\n   `cookieEnabled` 返回一个布尔值，表示浏览器是否启用了Cookie\n   `geolocation` 返回一个Geolocation对象，用于获取设备的地理位置信息\n   `language` 返回浏览器的首选语言\n   `onLine` 返回一个布尔\n\n\n\n\n井字棋   2023/5/4 \n1 js 箭头函数\n箭头函数是ES6引入的一种新的函数声明方式，可以让我们更方便地创建函数。\n\n箭头函数的语法形式如下：\n\nCopy\n(parameters) => { statements }\n其中，parameters表示函数的参数列表，可以是一个或多个参数。如果没有参数，则必须使用空括号表示。statements是函数体，可以是一条语句或多条语句。\n\n箭头函数有以下特点：\n\n简洁的语法形式：箭头函数可以使用更简洁的语法形式来定义函数，例如省略了function关键字和return关键字。\n\n没有自己的this对象：箭头函数没有自己的this对象，它会继承父级作用域的this对象。这意味着，在箭头函数内部，this指向的是定义该箭头函数的父级作用域的this，而不是箭头函数自己的this。\n\n不能作为构造函数：由于箭头函数没有自己的this对象，因此不能用作构造函数。\n\n下面是一些使用箭头函数的示例：\n\njavascript\nCopy\n// 一个简单的箭头函数\nconst add = (a, b) => a + b;\n\n// 箭头函数作为回调函数\nconst arr = [1, 2, 3];\nconst newArr = arr.map(item => item * 2);\n\n// 箭头函数内部使用父级作用域的this对象\n\nconst obj = {\nname: 'Sage',\ngetName: function() {\nreturn () => console.log(this.name);\n}\n};\nconst func = obj.getName();\nfunc(); // 输出：Sage\n需要注意的是，由于箭头函数没有自己的this对象，因此不能使用call()、apply()、bind()等方法来改变this的指向。\n\neg: 就是简单的函数的定义啥的\n\n//箭头函数不能用构造器,new错误\nvar Foo = () =>{};\nvar Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n其实就是箭头函数不能作为构造函数,没有自己的this对象,导致就是不能构造函数,如果创建一个可以用来构造函数的函数就是要使用普通函数而不是箭头函数,例如下面的一个可以构造函数的\n// var Foo =() => {};\n// var foo = new Foo();//这样是不能构造函数的\nfunction Foo()\n{\nthis.bar = 'hello';\n}\nvar foo = new Foo();\nconsole.log(foo.bar);\n//着就是号了就是简单的前面的没this对象罢了\n\n5/5\n1 是什么?\n是一个申明式的,高效的灵活的用于构建用户界面的js库,用react\n可以把一些简单的独立的代码片段组合成复杂 的ui界面,这些代码片段就是组件\nclass ShoppingList  extends React.Component {\n//    就是组件类\nrender() /*render方法返回你希望*/{\nreturn (\n<div className=\"shopping-list\">\n<h1>Shopping List for {this.props.name}</h1>\n<ul>\n<li>Instagram</li>\n<li>WhatsApp</li>\n<li>Oculus</li>\n</ul>\n</div>\n);\n}\n}\n\n\n5/6\n\nclass Square extends React.Component {\nrender() {\nreturn (\n//渲染出来一个单独的button\n<button className=\"square\">\n{/* TODO */}\n</button>\n);\n}\n}\n\n\n//渲染出九个方块\nclass Board extends React.Component {\nrenderSquare(i) {\nreturn <Square />;\n}\n\nrender() {\nconst status = 'Next player: X';\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n}\n}\n//含有默认值的一个棋盘\nclass Game extends React.Component {\nrender() {\nreturn (\n<div className=\"game\">\n<div className=\"game-board\">\n<Board />\n</div>\n<div className=\"game-info\">\n<div>{/* status */}</div>\n<ol>{/* TODO */}</ol>\n</div>\n</div>\n);\n}\n}\n\n// ========================================\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Game />);\n\n\n5/9\n// 定义 Square 组件，表示每个格子\nclass Square extends React.Component {\nrender() {\n// 通过 props 获取格子的值和点击事件处理函数\nreturn (\n<button className=\"square\" onClick={() => this.props.onClick()}>\n{this.props.value}\n</button>\n);\n}\n}\n\n// 定义 Board 组件，表示游戏棋盘\nclass Board extends React.Component {\n// 渲染每个格子\nrenderSquare(i) {\n// 通过 props 获取当前格子的值和点击事件处理函数\nreturn (\n<Square\nvalue={this.props.squares[i]}\nonClick={() => this.props.onClick(i)}\n/>\n);\n}\n\n    render() {\n        // 渲染九宫格\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n// 定义 Game 组件，表示游戏主界面\nclass Game extends React.Component {\nconstructor(props) {\nsuper(props);\n// 初始化状态\nthis.state = {\nhistory: [\n{\nsquares: Array(9).fill(null),\n},\n],\nstepNumber: 0,\nxIsNext: true,\n};\n}\n\n    // 点击事件处理函数，更新状态\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            // 如果已经有一方获胜或者当前格子已经有值了，则不做任何操作\n            return;\n        }\n\n        // 更新当前格子的值\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n        // 更新状态\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                },\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    // 跳转到指定步数\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        // 渲染历史记录\n        const moves = history.map((step, move) => {\n            const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        // 渲染游戏界面\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// 判断是否有获胜者\nfunction calculateWinner(squares) {\nconst lines = [\n[0, 1, 2],\n[3, 4, 5],\n[6, 7, 8],\n[0, 3, 6],\n[1, 4, 7],\n[2, 5, 8],\n[0, 4, 8],\n[2, 4, 6],\n];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n\n    return null;\n}\n\n// 渲染游戏界面\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Game />);\n\n通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。\n\n\njsx 简介\nconst element = <h1>hello,world </h1>;\n是js 的一个语法扩展,描述ui应该有交互的本质形式.jsx也是可以生成react元素,在探讨就是怎么渲染位dom,本质上喝其他 的ui逻辑内在耦合,比如就是胡在ui里面需要绑定的处理事件,在js代码里面就是jsx和ui放在一起会在视觉上会有辅助作用\njsx就是一个把js和ui结构和样式结合起来的一个扩展,它使得创建react组件变得非常容易和直观\nconst name = 'Josh Perez';\nconst element = <h1>hello,{name}</h1>;\nfunction formatName(user)\n{\n\n}\n希望看见的内容/\n\n5/22\n组件\njs创建组件\n1 函数组件\n必须大写开头,必须返回值\n表单处理\n受控组件的表单处理\n表单元素,表单元素里面的可变的状态,再setstate里面修改\n\n2 步骤\nstate ={text:' sdf'}\n3 文本框\ninput\ntextarea value = this.state.constent\nselect 下拉框  \n表单的受控组件\n\n1 添加就是name = state.txt\n2 表单的类型获取 属性的值\n3 再chang事件里面就是秀给name'该对应的state\n\n\n项目的介绍\n\n1 \n这个礼拜的内容就是做出来一个项目了\n2 \n\n\n5/23\nclass Main{\npublic boolean isNumber (String s ){\ns = s.trim();\n// 1 拿到数组以后就是把首位的空额\nif(s.length() == 0)\nreturn false;\n// 2 如过就是空数组的话就是false\n\n        boolean numFlag = false;\n        //1 数字的话就是对的,但是如果的符号位的话就是只会出现在\n        // 第一位或者指数后面的第一位\n        boolean dotFlat  = false;\n        boolean eFlag= false;\n\n\n        for (int i = 0; i < s.length(); i++) {\n\n            char ch = s.charAt(i);\n            if(ch >= '0' && ch <= '9'){\n                numFlag = true;\n\n                //判断就是数字还是啥的\n            }else if(ch == '+' || ch =='-'){\n                if(i != 0 && s.charAt(i - 1) != 'e' && s.charAt(i - 1 ) !=\n                'E')\n                    return false;\n\n                //如果是+-号的话就是判断是不是就是\n                //只会出现在第一位和e E的后面才会出现\n                \n            }else if (ch == '.'){\n                //2 只能出现一次而且不能出现在指数后面\n                // 就是一开始的dotFlat会是false 而且就是eflag是false\n                if(dotFlat || eFlag){\n//                    dotFlat = true;\nreturn false;\n}\nelse dotFlat = true;//\n//就是小数点的问题//.. 会出现问题就是说喽如果.\n//出现的话就是变成true就好了\n\n            }else if(ch == 'e' || ch =='E'){\n                if(!numFlag || eFlag) {\n                    return false;\n                    // e 前面要有数后面叶要数\n                }\n                    eFlag = true;\n                    numFlag = false;//后面没数的话就会变的false//简直就是天才\n                }  else {\n                    return false;\n                }\n            }\n\n\n         return numFlag;\n        }\n\n/*\n* */\n\n  public static void main(String[] args) {\n  Main solution = new Main();\n  String s1 = \" 0 \";\n  String s2 = \" 0.1 \";\n  String s3 = \" 0.1e10 \";\n  String s4 = \" abc \";\n  String s5 = \" 1a \";\n  String s6 = \" 2e10 \";\n  String s7 = \" +1.0 \";\n  String s8 = \" -1.0 \";\n  String s9 = \" 3. \";\n  String s10 = \" .3 \";\n  System.out.println(solution.isNumber(s1)); // true\n  System.out.println(solution.isNumber(s2)); // true\n  System.out.println(solution.isNumber(s3)); // true\n  System.out.println(solution.isNumber(s4)); // false\n  System.out.println(solution.isNumber(s5)); // false\n  System.out.println(solution.isNumber(s6)); // true\n  System.out.println(solution.isNumber(s7)); // true\n  System.out.println(solution.isNumber(s8)); // true\n  System.out.println(solution.isNumber(s9)); // true\n  System.out.println(solution.isNumber(s10)); // true\n  }\n  }\n\n\n2 回顾java课程\n","source":"_posts/dayandday.md","raw":"---\ntitle: js1\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-04-17 23:45:00\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n## 客户端web api\n当你给网页或者网页应用编写客户端的 JavaScript 时，你很快会遇上应用程序接口（API）—— 这些编程特性可用来操控网站所基于的浏览器与操作系统的不同方面，或是操控由其他网站或服务端传来的数据。在这个单元里，我们将一同探索什么是 API，以及如何使用一些在你开发中将经常遇见的 API。\n\n###web aip简介\nJavaScript——一种内置于浏览器的高级脚本语言，你可以用来实现 Web 页面/应用中的功能。注意 JavaScript 也可用于其他像 Node 这样的的编程环境。但现在你不必考虑这些。\n客户端 API — 内置于浏览器的结构程序，位于 JavaScript 语言顶部，使您可以更容易的实现功能。\n第三方 API — 置于第三方普通的结构程序（例如 Twitter，Facebook），使您可以在自己的 Web 页面中使用那些平台的某些功能（例如在您的 Web 页面显示最新的 Tweets）。\nJavaScript 库 — 通常是包含具有特定功能的一个或多个 JavaScript 文件，把这些文件关联到您的 Web 页以快速或授权编写常见的功能。例如包含 jQuery 和 Mootools\nJavaScript 框架 — 从库开始的下一步，JavaScript 框架视图把 HTML、CSS、JavaScript 和其他安装的技术打包在一起，然后用来从头编写一个完整的 Web 应用\n\n###API 如何工作？\nAPI 使用一个或多个 JavaScript objects 在您的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。\n\napi 是基于对象的.这些对象就是作为用作api使用的数据.的容器\n以及api提供的功能\ngeolocation的例子.这是一个非常简单的api.对象就是geolocation\nposition coordinates coordinates包括有关设备的\n大量有用的数据.包括经纬度,高度,运动速度,以及运动方向\n使用井号（#）来创建标题，井号的数量对应标题的级别。例如，使用三个井号（###）来创建三级标题（<h3>）。\n使用空行来分隔段落，不要使用空格或制表符来缩进段落。\n使用两个或更多的空格加上回车来创建换行或新行（<br>）。\n使用反引号（`）来创建内联代码，或者使用三个反引号（```）来创建代码块。\n根据这些规则，我可以把你的内容变成这样：\n\n# bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api\n\napi 就是应用程序接口她们就是抽象了复杂的代码.提供一些简单的接口规则直接使用, 让开发人员简单的创建复杂的功能,其实就是封装了一些代码,变的好用且简单了不少\n\n客户端里面web api 操作文档api\n\n## 1 document对象\n\n## 2 bom window对象里\n\n### window对象\n\n简介: 在浏览器里面的全局的一些对象和属性,可以改变就是浏览器里面的一些基本的属性\n\n1. 在gloabl作用域里面; `var sayage=() =>alert(this.age); var age = 29;` 在这样的定义下就会全变成window对象的属性,包含在里面\n2. 窗口关系\n3. 大小\n4. 视口位置,就是内阁滚轮控制的界面\n5. 导航和打开新的界面\n6. 定时器 `settimeout(字符串或者函数,时间);` 比较常用的就是`if(a< b) { settimeout (x,x)}`就是限制了不少不会一直不停的干下去\n   7.系统对话框`alert` 显示 `confirm` 确定 `prompt` 输入文本三个方法里面就是了\n\nconst 和let 就是不会添加到window对象里面,var 就会,区分使用就好了\n\n### 1 narvigator\n\n1. 检测插件\n2. 注册处理系统\n3. 负责提供浏览器的信息.例如就是名称平台.语言.它可以检查浏览器是否支持一些特性 例如jsva,cookie.vr等.可以使用window.navigator属性来访问navigator对象.\n\n   `javaEnabled()` 返回一个布尔值，表示浏览器是否启用了Java\n   `taintEnabled()` 返回一个布尔值，表示浏览器是否启用了数据污染\n   `vibrate()` 使设备振动一定的时间\n   `registerProtocolHandler()` 注册一个自定义的协议处理器\n   `requestMediaKeySystemAccess()` 请求一个媒体密钥系统的访问对象\n\n   属性 描述\n   `appCodeName` 返回浏览器的代码名\n   `appName` 返回浏览器的名称\n   `appVersion` 返回浏览器的版本信息\n   `cookieEnabled` 返回一个布尔值，表示浏览器是否启用了Cookie\n   `geolocation` 返回一个Geolocation对象，用于获取设备的地理位置信息\n   `language` 返回浏览器的首选语言\n   `onLine` 返回一个布尔\n\n\n\n\n井字棋   2023/5/4 \n1 js 箭头函数\n箭头函数是ES6引入的一种新的函数声明方式，可以让我们更方便地创建函数。\n\n箭头函数的语法形式如下：\n\nCopy\n(parameters) => { statements }\n其中，parameters表示函数的参数列表，可以是一个或多个参数。如果没有参数，则必须使用空括号表示。statements是函数体，可以是一条语句或多条语句。\n\n箭头函数有以下特点：\n\n简洁的语法形式：箭头函数可以使用更简洁的语法形式来定义函数，例如省略了function关键字和return关键字。\n\n没有自己的this对象：箭头函数没有自己的this对象，它会继承父级作用域的this对象。这意味着，在箭头函数内部，this指向的是定义该箭头函数的父级作用域的this，而不是箭头函数自己的this。\n\n不能作为构造函数：由于箭头函数没有自己的this对象，因此不能用作构造函数。\n\n下面是一些使用箭头函数的示例：\n\njavascript\nCopy\n// 一个简单的箭头函数\nconst add = (a, b) => a + b;\n\n// 箭头函数作为回调函数\nconst arr = [1, 2, 3];\nconst newArr = arr.map(item => item * 2);\n\n// 箭头函数内部使用父级作用域的this对象\n\nconst obj = {\nname: 'Sage',\ngetName: function() {\nreturn () => console.log(this.name);\n}\n};\nconst func = obj.getName();\nfunc(); // 输出：Sage\n需要注意的是，由于箭头函数没有自己的this对象，因此不能使用call()、apply()、bind()等方法来改变this的指向。\n\neg: 就是简单的函数的定义啥的\n\n//箭头函数不能用构造器,new错误\nvar Foo = () =>{};\nvar Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor\n其实就是箭头函数不能作为构造函数,没有自己的this对象,导致就是不能构造函数,如果创建一个可以用来构造函数的函数就是要使用普通函数而不是箭头函数,例如下面的一个可以构造函数的\n// var Foo =() => {};\n// var foo = new Foo();//这样是不能构造函数的\nfunction Foo()\n{\nthis.bar = 'hello';\n}\nvar foo = new Foo();\nconsole.log(foo.bar);\n//着就是号了就是简单的前面的没this对象罢了\n\n5/5\n1 是什么?\n是一个申明式的,高效的灵活的用于构建用户界面的js库,用react\n可以把一些简单的独立的代码片段组合成复杂 的ui界面,这些代码片段就是组件\nclass ShoppingList  extends React.Component {\n//    就是组件类\nrender() /*render方法返回你希望*/{\nreturn (\n<div className=\"shopping-list\">\n<h1>Shopping List for {this.props.name}</h1>\n<ul>\n<li>Instagram</li>\n<li>WhatsApp</li>\n<li>Oculus</li>\n</ul>\n</div>\n);\n}\n}\n\n\n5/6\n\nclass Square extends React.Component {\nrender() {\nreturn (\n//渲染出来一个单独的button\n<button className=\"square\">\n{/* TODO */}\n</button>\n);\n}\n}\n\n\n//渲染出九个方块\nclass Board extends React.Component {\nrenderSquare(i) {\nreturn <Square />;\n}\n\nrender() {\nconst status = 'Next player: X';\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n}\n}\n//含有默认值的一个棋盘\nclass Game extends React.Component {\nrender() {\nreturn (\n<div className=\"game\">\n<div className=\"game-board\">\n<Board />\n</div>\n<div className=\"game-info\">\n<div>{/* status */}</div>\n<ol>{/* TODO */}</ol>\n</div>\n</div>\n);\n}\n}\n\n// ========================================\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Game />);\n\n\n5/9\n// 定义 Square 组件，表示每个格子\nclass Square extends React.Component {\nrender() {\n// 通过 props 获取格子的值和点击事件处理函数\nreturn (\n<button className=\"square\" onClick={() => this.props.onClick()}>\n{this.props.value}\n</button>\n);\n}\n}\n\n// 定义 Board 组件，表示游戏棋盘\nclass Board extends React.Component {\n// 渲染每个格子\nrenderSquare(i) {\n// 通过 props 获取当前格子的值和点击事件处理函数\nreturn (\n<Square\nvalue={this.props.squares[i]}\nonClick={() => this.props.onClick(i)}\n/>\n);\n}\n\n    render() {\n        // 渲染九宫格\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\n// 定义 Game 组件，表示游戏主界面\nclass Game extends React.Component {\nconstructor(props) {\nsuper(props);\n// 初始化状态\nthis.state = {\nhistory: [\n{\nsquares: Array(9).fill(null),\n},\n],\nstepNumber: 0,\nxIsNext: true,\n};\n}\n\n    // 点击事件处理函数，更新状态\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (calculateWinner(squares) || squares[i]) {\n            // 如果已经有一方获胜或者当前格子已经有值了，则不做任何操作\n            return;\n        }\n\n        // 更新当前格子的值\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n        // 更新状态\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                },\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    // 跳转到指定步数\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        // 渲染历史记录\n        const moves = history.map((step, move) => {\n            const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        // 渲染游戏界面\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// 判断是否有获胜者\nfunction calculateWinner(squares) {\nconst lines = [\n[0, 1, 2],\n[3, 4, 5],\n[6, 7, 8],\n[0, 3, 6],\n[1, 4, 7],\n[2, 5, 8],\n[0, 4, 8],\n[2, 4, 6],\n];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n\n    return null;\n}\n\n// 渲染游戏界面\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Game />);\n\n通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。\n\n\njsx 简介\nconst element = <h1>hello,world </h1>;\n是js 的一个语法扩展,描述ui应该有交互的本质形式.jsx也是可以生成react元素,在探讨就是怎么渲染位dom,本质上喝其他 的ui逻辑内在耦合,比如就是胡在ui里面需要绑定的处理事件,在js代码里面就是jsx和ui放在一起会在视觉上会有辅助作用\njsx就是一个把js和ui结构和样式结合起来的一个扩展,它使得创建react组件变得非常容易和直观\nconst name = 'Josh Perez';\nconst element = <h1>hello,{name}</h1>;\nfunction formatName(user)\n{\n\n}\n希望看见的内容/\n\n5/22\n组件\njs创建组件\n1 函数组件\n必须大写开头,必须返回值\n表单处理\n受控组件的表单处理\n表单元素,表单元素里面的可变的状态,再setstate里面修改\n\n2 步骤\nstate ={text:' sdf'}\n3 文本框\ninput\ntextarea value = this.state.constent\nselect 下拉框  \n表单的受控组件\n\n1 添加就是name = state.txt\n2 表单的类型获取 属性的值\n3 再chang事件里面就是秀给name'该对应的state\n\n\n项目的介绍\n\n1 \n这个礼拜的内容就是做出来一个项目了\n2 \n\n\n5/23\nclass Main{\npublic boolean isNumber (String s ){\ns = s.trim();\n// 1 拿到数组以后就是把首位的空额\nif(s.length() == 0)\nreturn false;\n// 2 如过就是空数组的话就是false\n\n        boolean numFlag = false;\n        //1 数字的话就是对的,但是如果的符号位的话就是只会出现在\n        // 第一位或者指数后面的第一位\n        boolean dotFlat  = false;\n        boolean eFlag= false;\n\n\n        for (int i = 0; i < s.length(); i++) {\n\n            char ch = s.charAt(i);\n            if(ch >= '0' && ch <= '9'){\n                numFlag = true;\n\n                //判断就是数字还是啥的\n            }else if(ch == '+' || ch =='-'){\n                if(i != 0 && s.charAt(i - 1) != 'e' && s.charAt(i - 1 ) !=\n                'E')\n                    return false;\n\n                //如果是+-号的话就是判断是不是就是\n                //只会出现在第一位和e E的后面才会出现\n                \n            }else if (ch == '.'){\n                //2 只能出现一次而且不能出现在指数后面\n                // 就是一开始的dotFlat会是false 而且就是eflag是false\n                if(dotFlat || eFlag){\n//                    dotFlat = true;\nreturn false;\n}\nelse dotFlat = true;//\n//就是小数点的问题//.. 会出现问题就是说喽如果.\n//出现的话就是变成true就好了\n\n            }else if(ch == 'e' || ch =='E'){\n                if(!numFlag || eFlag) {\n                    return false;\n                    // e 前面要有数后面叶要数\n                }\n                    eFlag = true;\n                    numFlag = false;//后面没数的话就会变的false//简直就是天才\n                }  else {\n                    return false;\n                }\n            }\n\n\n         return numFlag;\n        }\n\n/*\n* */\n\n  public static void main(String[] args) {\n  Main solution = new Main();\n  String s1 = \" 0 \";\n  String s2 = \" 0.1 \";\n  String s3 = \" 0.1e10 \";\n  String s4 = \" abc \";\n  String s5 = \" 1a \";\n  String s6 = \" 2e10 \";\n  String s7 = \" +1.0 \";\n  String s8 = \" -1.0 \";\n  String s9 = \" 3. \";\n  String s10 = \" .3 \";\n  System.out.println(solution.isNumber(s1)); // true\n  System.out.println(solution.isNumber(s2)); // true\n  System.out.println(solution.isNumber(s3)); // true\n  System.out.println(solution.isNumber(s4)); // false\n  System.out.println(solution.isNumber(s5)); // false\n  System.out.println(solution.isNumber(s6)); // true\n  System.out.println(solution.isNumber(s7)); // true\n  System.out.println(solution.isNumber(s8)); // true\n  System.out.println(solution.isNumber(s9)); // true\n  System.out.println(solution.isNumber(s10)); // true\n  }\n  }\n\n\n2 回顾java课程\n","slug":"dayandday","published":1,"updated":"2023-05-23T09:34:15.914Z","_id":"clhg959rf0002hou3h7njf0en","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"客户端web-api\"><a href=\"#客户端web-api\" class=\"headerlink\" title=\"客户端web api\"></a>客户端web api</h2><p>当你给网页或者网页应用编写客户端的 JavaScript 时，你很快会遇上应用程序接口（API）—— 这些编程特性可用来操控网站所基于的浏览器与操作系统的不同方面，或是操控由其他网站或服务端传来的数据。在这个单元里，我们将一同探索什么是 API，以及如何使用一些在你开发中将经常遇见的 API。</p>\n<p>###web aip简介<br>JavaScript——一种内置于浏览器的高级脚本语言，你可以用来实现 Web 页面/应用中的功能。注意 JavaScript 也可用于其他像 Node 这样的的编程环境。但现在你不必考虑这些。<br>客户端 API — 内置于浏览器的结构程序，位于 JavaScript 语言顶部，使您可以更容易的实现功能。<br>第三方 API — 置于第三方普通的结构程序（例如 Twitter，Facebook），使您可以在自己的 Web 页面中使用那些平台的某些功能（例如在您的 Web 页面显示最新的 Tweets）。<br>JavaScript 库 — 通常是包含具有特定功能的一个或多个 JavaScript 文件，把这些文件关联到您的 Web 页以快速或授权编写常见的功能。例如包含 jQuery 和 Mootools<br>JavaScript 框架 — 从库开始的下一步，JavaScript 框架视图把 HTML、CSS、JavaScript 和其他安装的技术打包在一起，然后用来从头编写一个完整的 Web 应用</p>\n<p>###API 如何工作？<br>API 使用一个或多个 JavaScript objects 在您的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。</p>\n<p>api 是基于对象的.这些对象就是作为用作api使用的数据.的容器<br>以及api提供的功能<br>geolocation的例子.这是一个非常简单的api.对象就是geolocation<br>position coordinates coordinates包括有关设备的<br>大量有用的数据.包括经纬度,高度,运动速度,以及运动方向<br>使用井号（#）来创建标题，井号的数量对应标题的级别。例如，使用三个井号（###）来创建三级标题（<h3>）。<br>使用空行来分隔段落，不要使用空格或制表符来缩进段落。<br>使用两个或更多的空格加上回车来创建换行或新行（<br>）。<br>使用反引号（`）来创建内联代码，或者使用三个反引号（```）来创建代码块。<br>根据这些规则，我可以把你的内容变成这样：</p>\n<h1 id=\"bom-客户端webapi里面就是-浏览器内置的api包括就是操作文档api\"><a href=\"#bom-客户端webapi里面就是-浏览器内置的api包括就是操作文档api\" class=\"headerlink\" title=\"bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api\"></a>bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api</h1><p>api 就是应用程序接口她们就是抽象了复杂的代码.提供一些简单的接口规则直接使用, 让开发人员简单的创建复杂的功能,其实就是封装了一些代码,变的好用且简单了不少</p>\n<p>客户端里面web api 操作文档api</p>\n<h2 id=\"1-document对象\"><a href=\"#1-document对象\" class=\"headerlink\" title=\"1 document对象\"></a>1 document对象</h2><h2 id=\"2-bom-window对象里\"><a href=\"#2-bom-window对象里\" class=\"headerlink\" title=\"2 bom window对象里\"></a>2 bom window对象里</h2><h3 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h3><p>简介: 在浏览器里面的全局的一些对象和属性,可以改变就是浏览器里面的一些基本的属性</p>\n<ol>\n<li>在gloabl作用域里面; <code>var sayage=() =&gt;alert(this.age); var age = 29;</code> 在这样的定义下就会全变成window对象的属性,包含在里面</li>\n<li>窗口关系</li>\n<li>大小</li>\n<li>视口位置,就是内阁滚轮控制的界面</li>\n<li>导航和打开新的界面</li>\n<li>定时器 <code>settimeout(字符串或者函数,时间);</code> 比较常用的就是<code>if(a&lt; b) &#123; settimeout (x,x)&#125;</code>就是限制了不少不会一直不停的干下去<br>7.系统对话框<code>alert</code> 显示 <code>confirm</code> 确定 <code>prompt</code> 输入文本三个方法里面就是了</li>\n</ol>\n<p>const 和let 就是不会添加到window对象里面,var 就会,区分使用就好了</p>\n<h3 id=\"1-narvigator\"><a href=\"#1-narvigator\" class=\"headerlink\" title=\"1 narvigator\"></a>1 narvigator</h3><ol>\n<li><p>检测插件</p>\n</li>\n<li><p>注册处理系统</p>\n</li>\n<li><p>负责提供浏览器的信息.例如就是名称平台.语言.它可以检查浏览器是否支持一些特性 例如jsva,cookie.vr等.可以使用window.navigator属性来访问navigator对象.</p>\n<p><code>javaEnabled()</code> 返回一个布尔值，表示浏览器是否启用了Java<br><code>taintEnabled()</code> 返回一个布尔值，表示浏览器是否启用了数据污染<br><code>vibrate()</code> 使设备振动一定的时间<br><code>registerProtocolHandler()</code> 注册一个自定义的协议处理器<br><code>requestMediaKeySystemAccess()</code> 请求一个媒体密钥系统的访问对象</p>\n<p>属性 描述<br><code>appCodeName</code> 返回浏览器的代码名<br><code>appName</code> 返回浏览器的名称<br><code>appVersion</code> 返回浏览器的版本信息<br><code>cookieEnabled</code> 返回一个布尔值，表示浏览器是否启用了Cookie<br><code>geolocation</code> 返回一个Geolocation对象，用于获取设备的地理位置信息<br><code>language</code> 返回浏览器的首选语言<br><code>onLine</code> 返回一个布尔</p>\n</li>\n</ol>\n<p>井字棋   2023/5/4<br>1 js 箭头函数<br>箭头函数是ES6引入的一种新的函数声明方式，可以让我们更方便地创建函数。</p>\n<p>箭头函数的语法形式如下：</p>\n<p>Copy<br>(parameters) =&gt; { statements }<br>其中，parameters表示函数的参数列表，可以是一个或多个参数。如果没有参数，则必须使用空括号表示。statements是函数体，可以是一条语句或多条语句。</p>\n<p>箭头函数有以下特点：</p>\n<p>简洁的语法形式：箭头函数可以使用更简洁的语法形式来定义函数，例如省略了function关键字和return关键字。</p>\n<p>没有自己的this对象：箭头函数没有自己的this对象，它会继承父级作用域的this对象。这意味着，在箭头函数内部，this指向的是定义该箭头函数的父级作用域的this，而不是箭头函数自己的this。</p>\n<p>不能作为构造函数：由于箭头函数没有自己的this对象，因此不能用作构造函数。</p>\n<p>下面是一些使用箭头函数的示例：</p>\n<p>javascript<br>Copy<br>// 一个简单的箭头函数<br>const add = (a, b) =&gt; a + b;</p>\n<p>// 箭头函数作为回调函数<br>const arr = [1, 2, 3];<br>const newArr = arr.map(item =&gt; item * 2);</p>\n<p>// 箭头函数内部使用父级作用域的this对象</p>\n<p>const obj = {<br>name: ‘Sage’,<br>getName: function() {<br>return () =&gt; console.log(this.name);<br>}<br>};<br>const func = obj.getName();<br>func(); // 输出：Sage<br>需要注意的是，由于箭头函数没有自己的this对象，因此不能使用call()、apply()、bind()等方法来改变this的指向。</p>\n<p>eg: 就是简单的函数的定义啥的</p>\n<p>//箭头函数不能用构造器,new错误<br>var Foo = () =&gt;{};<br>var Foo = () =&gt; {};<br>var foo = new Foo(); // TypeError: Foo is not a constructor<br>其实就是箭头函数不能作为构造函数,没有自己的this对象,导致就是不能构造函数,如果创建一个可以用来构造函数的函数就是要使用普通函数而不是箭头函数,例如下面的一个可以构造函数的<br>// var Foo =() =&gt; {};<br>// var foo = new Foo();//这样是不能构造函数的<br>function Foo()<br>{<br>this.bar = ‘hello’;<br>}<br>var foo = new Foo();<br>console.log(foo.bar);<br>//着就是号了就是简单的前面的没this对象罢了</p>\n<p>5/5<br>1 是什么?<br>是一个申明式的,高效的灵活的用于构建用户界面的js库,用react<br>可以把一些简单的独立的代码片段组合成复杂 的ui界面,这些代码片段就是组件<br>class ShoppingList  extends React.Component {<br>//    就是组件类<br>render() /<em>render方法返回你希望</em>/{<br>return (</p>\n<div className=\"shopping-list\">\n<h1>Shopping List for {this.props.name}</h1>\n<ul>\n<li>Instagram</li>\n<li>WhatsApp</li>\n<li>Oculus</li>\n</ul>\n</div>\n);\n}\n}\n\n\n<p>5/6</p>\n<p>class Square extends React.Component {<br>render() {<br>return (<br>//渲染出来一个单独的button<br><button className=\"square\"><br>{/* TODO */}<br></button><br>);<br>}<br>}</p>\n<p>//渲染出九个方块<br>class Board extends React.Component {<br>renderSquare(i) {<br>return <Square />;<br>}</p>\n<p>render() {<br>const status = ‘Next player: X’;</p>\n<pre><code>return (\n  &lt;div&gt;\n    &lt;div className=&quot;status&quot;&gt;&#123;status&#125;&lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(0)&#125;\n      &#123;this.renderSquare(1)&#125;\n      &#123;this.renderSquare(2)&#125;\n    &lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(3)&#125;\n      &#123;this.renderSquare(4)&#125;\n      &#123;this.renderSquare(5)&#125;\n    &lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(6)&#125;\n      &#123;this.renderSquare(7)&#125;\n      &#123;this.renderSquare(8)&#125;\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<p>}<br>}<br>//含有默认值的一个棋盘<br>class Game extends React.Component {<br>render() {<br>return (</p>\n<div className=\"game\">\n<div className=\"game-board\">\n<Board />\n</div>\n<div className=\"game-info\">\n<div>{/* status */}</div>\n<ol>{/* TODO */}</ol>\n</div>\n</div>\n);\n}\n}\n\n<p>// ========================================</p>\n<p>const root = ReactDOM.createRoot(document.getElementById(“root”));<br>root.render(<Game />);</p>\n<p>5/9<br>// 定义 Square 组件，表示每个格子<br>class Square extends React.Component {<br>render() {<br>// 通过 props 获取格子的值和点击事件处理函数<br>return (<br>&lt;button className=”square” onClick={() =&gt; this.props.onClick()}&gt;<br>{this.props.value}<br></button><br>);<br>}<br>}</p>\n<p>// 定义 Board 组件，表示游戏棋盘<br>class Board extends React.Component {<br>// 渲染每个格子<br>renderSquare(i) {<br>// 通过 props 获取当前格子的值和点击事件处理函数<br>return (<br>&lt;Square<br>value={this.props.squares[i]}<br>onClick={() =&gt; this.props.onClick(i)}<br>/&gt;<br>);<br>}</p>\n<pre><code>render() &#123;\n    // 渲染九宫格\n    return (\n        &lt;div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(0)&#125;\n                &#123;this.renderSquare(1)&#125;\n                &#123;this.renderSquare(2)&#125;\n            &lt;/div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(3)&#125;\n                &#123;this.renderSquare(4)&#125;\n                &#123;this.renderSquare(5)&#125;\n            &lt;/div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(6)&#125;\n                &#123;this.renderSquare(7)&#125;\n                &#123;this.renderSquare(8)&#125;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n&#125;\n</code></pre>\n<p>}</p>\n<p>// 定义 Game 组件，表示游戏主界面<br>class Game extends React.Component {<br>constructor(props) {<br>super(props);<br>// 初始化状态<br>this.state = {<br>history: [<br>{<br>squares: Array(9).fill(null),<br>},<br>],<br>stepNumber: 0,<br>xIsNext: true,<br>};<br>}</p>\n<pre><code>// 点击事件处理函数，更新状态\nhandleClick(i) &#123;\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) &#123;\n        // 如果已经有一方获胜或者当前格子已经有值了，则不做任何操作\n        return;\n    &#125;\n\n    // 更新当前格子的值\n    squares[i] = this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;;\n\n    // 更新状态\n    this.setState(&#123;\n        history: history.concat([\n            &#123;\n                squares: squares,\n            &#125;,\n        ]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n    &#125;);\n&#125;\n\n// 跳转到指定步数\njumpTo(step) &#123;\n    this.setState(&#123;\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n    &#125;);\n&#125;\n\nrender() &#123;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    // 渲染历史记录\n    const moves = history.map((step, move) =&gt; &#123;\n        const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;\n        return (\n            &lt;li key=&#123;move&#125;&gt;\n                &lt;button onClick=&#123;() =&gt; this.jumpTo(move)&#125;&gt;&#123;desc&#125;&lt;/button&gt;\n            &lt;/li&gt;\n        );\n    &#125;);\n\n    let status;\n    if (winner) &#123;\n        status = &quot;Winner: &quot; + winner;\n    &#125; else &#123;\n        status = &quot;Next player: &quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n    &#125;\n\n    // 渲染游戏界面\n    return (\n        &lt;div className=&quot;game&quot;&gt;\n            &lt;div className=&quot;game-board&quot;&gt;\n                &lt;Board squares=&#123;current.squares&#125; onClick=&#123;(i) =&gt; this.handleClick(i)&#125; /&gt;\n            &lt;/div&gt;\n            &lt;div className=&quot;game-info&quot;&gt;\n                &lt;div&gt;&#123;status&#125;&lt;/div&gt;\n                &lt;ol&gt;&#123;moves&#125;&lt;/ol&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n&#125;\n</code></pre>\n<p>}</p>\n<p>// 判断是否有获胜者<br>function calculateWinner(squares) {<br>const lines = [<br>[0, 1, 2],<br>[3, 4, 5],<br>[6, 7, 8],<br>[0, 3, 6],<br>[1, 4, 7],<br>[2, 5, 8],<br>[0, 4, 8],<br>[2, 4, 6],<br>];</p>\n<pre><code>for (let i = 0; i &lt; lines.length; i++) &#123;\n    const [a, b, c] = lines[i];\n    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;\n        return squares[a];\n    &#125;\n&#125;\n\nreturn null;\n</code></pre>\n<p>}</p>\n<p>// 渲染游戏界面<br>const root = ReactDOM.createRoot(document.getElementById(“root”));<br>root.render(<Game />);</p>\n<p>通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。</p>\n<p>jsx 简介<br>const element = <h1>hello,world </h1>;<br>是js 的一个语法扩展,描述ui应该有交互的本质形式.jsx也是可以生成react元素,在探讨就是怎么渲染位dom,本质上喝其他 的ui逻辑内在耦合,比如就是胡在ui里面需要绑定的处理事件,在js代码里面就是jsx和ui放在一起会在视觉上会有辅助作用<br>jsx就是一个把js和ui结构和样式结合起来的一个扩展,它使得创建react组件变得非常容易和直观<br>const name = ‘Josh Perez’;<br>const element = <h1>hello,{name}</h1>;<br>function formatName(user)<br>{</p>\n<p>}<br>希望看见的内容/</p>\n<p>5/22<br>组件<br>js创建组件<br>1 函数组件<br>必须大写开头,必须返回值<br>表单处理<br>受控组件的表单处理<br>表单元素,表单元素里面的可变的状态,再setstate里面修改</p>\n<p>2 步骤<br>state ={text:’ sdf’}<br>3 文本框<br>input<br>textarea value = this.state.constent<br>select 下拉框<br>表单的受控组件</p>\n<p>1 添加就是name = state.txt<br>2 表单的类型获取 属性的值<br>3 再chang事件里面就是秀给name’该对应的state</p>\n<p>项目的介绍</p>\n<p>1<br>这个礼拜的内容就是做出来一个项目了<br>2 </p>\n<p>5/23<br>class Main{<br>public boolean isNumber (String s ){<br>s = s.trim();<br>// 1 拿到数组以后就是把首位的空额<br>if(s.length() == 0)<br>return false;<br>// 2 如过就是空数组的话就是false</p>\n<pre><code>    boolean numFlag = false;\n    //1 数字的话就是对的,但是如果的符号位的话就是只会出现在\n    // 第一位或者指数后面的第一位\n    boolean dotFlat  = false;\n    boolean eFlag= false;\n\n\n    for (int i = 0; i &lt; s.length(); i++) &#123;\n\n        char ch = s.charAt(i);\n        if(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;)&#123;\n            numFlag = true;\n\n            //判断就是数字还是啥的\n        &#125;else if(ch == &#39;+&#39; || ch ==&#39;-&#39;)&#123;\n            if(i != 0 &amp;&amp; s.charAt(i - 1) != &#39;e&#39; &amp;&amp; s.charAt(i - 1 ) !=\n            &#39;E&#39;)\n                return false;\n\n            //如果是+-号的话就是判断是不是就是\n            //只会出现在第一位和e E的后面才会出现\n            \n        &#125;else if (ch == &#39;.&#39;)&#123;\n            //2 只能出现一次而且不能出现在指数后面\n            // 就是一开始的dotFlat会是false 而且就是eflag是false\n            if(dotFlat || eFlag)&#123;\n</code></pre>\n<p>//                    dotFlat = true;<br>return false;<br>}<br>else dotFlat = true;//<br>//就是小数点的问题//.. 会出现问题就是说喽如果.<br>//出现的话就是变成true就好了</p>\n<pre><code>        &#125;else if(ch == &#39;e&#39; || ch ==&#39;E&#39;)&#123;\n            if(!numFlag || eFlag) &#123;\n                return false;\n                // e 前面要有数后面叶要数\n            &#125;\n                eFlag = true;\n                numFlag = false;//后面没数的话就会变的false//简直就是天才\n            &#125;  else &#123;\n                return false;\n            &#125;\n        &#125;\n\n\n     return numFlag;\n    &#125;\n</code></pre>\n<p>/*</p>\n<ul>\n<li><p>*/</p>\n<p>public static void main(String[] args) {<br>Main solution = new Main();<br>String s1 = “ 0 “;<br>String s2 = “ 0.1 “;<br>String s3 = “ 0.1e10 “;<br>String s4 = “ abc “;<br>String s5 = “ 1a “;<br>String s6 = “ 2e10 “;<br>String s7 = “ +1.0 “;<br>String s8 = “ -1.0 “;<br>String s9 = “ 3. “;<br>String s10 = “ .3 “;<br>System.out.println(solution.isNumber(s1)); // true<br>System.out.println(solution.isNumber(s2)); // true<br>System.out.println(solution.isNumber(s3)); // true<br>System.out.println(solution.isNumber(s4)); // false<br>System.out.println(solution.isNumber(s5)); // false<br>System.out.println(solution.isNumber(s6)); // true<br>System.out.println(solution.isNumber(s7)); // true<br>System.out.println(solution.isNumber(s8)); // true<br>System.out.println(solution.isNumber(s9)); // true<br>System.out.println(solution.isNumber(s10)); // true<br>}<br>}</p>\n</li>\n</ul>\n<p>2 回顾java课程</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"客户端web-api\"><a href=\"#客户端web-api\" class=\"headerlink\" title=\"客户端web api\"></a>客户端web api</h2><p>当你给网页或者网页应用编写客户端的 JavaScript 时，你很快会遇上应用程序接口（API）—— 这些编程特性可用来操控网站所基于的浏览器与操作系统的不同方面，或是操控由其他网站或服务端传来的数据。在这个单元里，我们将一同探索什么是 API，以及如何使用一些在你开发中将经常遇见的 API。</p>\n<p>###web aip简介<br>JavaScript——一种内置于浏览器的高级脚本语言，你可以用来实现 Web 页面/应用中的功能。注意 JavaScript 也可用于其他像 Node 这样的的编程环境。但现在你不必考虑这些。<br>客户端 API — 内置于浏览器的结构程序，位于 JavaScript 语言顶部，使您可以更容易的实现功能。<br>第三方 API — 置于第三方普通的结构程序（例如 Twitter，Facebook），使您可以在自己的 Web 页面中使用那些平台的某些功能（例如在您的 Web 页面显示最新的 Tweets）。<br>JavaScript 库 — 通常是包含具有特定功能的一个或多个 JavaScript 文件，把这些文件关联到您的 Web 页以快速或授权编写常见的功能。例如包含 jQuery 和 Mootools<br>JavaScript 框架 — 从库开始的下一步，JavaScript 框架视图把 HTML、CSS、JavaScript 和其他安装的技术打包在一起，然后用来从头编写一个完整的 Web 应用</p>\n<p>###API 如何工作？<br>API 使用一个或多个 JavaScript objects 在您的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。</p>\n<p>api 是基于对象的.这些对象就是作为用作api使用的数据.的容器<br>以及api提供的功能<br>geolocation的例子.这是一个非常简单的api.对象就是geolocation<br>position coordinates coordinates包括有关设备的<br>大量有用的数据.包括经纬度,高度,运动速度,以及运动方向<br>使用井号（#）来创建标题，井号的数量对应标题的级别。例如，使用三个井号（###）来创建三级标题（<h3>）。<br>使用空行来分隔段落，不要使用空格或制表符来缩进段落。<br>使用两个或更多的空格加上回车来创建换行或新行（<br>）。<br>使用反引号（`）来创建内联代码，或者使用三个反引号（```）来创建代码块。<br>根据这些规则，我可以把你的内容变成这样：</p>\n<h1 id=\"bom-客户端webapi里面就是-浏览器内置的api包括就是操作文档api\"><a href=\"#bom-客户端webapi里面就是-浏览器内置的api包括就是操作文档api\" class=\"headerlink\" title=\"bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api\"></a>bom 客户端webapi里面就是 浏览器内置的api包括就是操作文档api</h1><p>api 就是应用程序接口她们就是抽象了复杂的代码.提供一些简单的接口规则直接使用, 让开发人员简单的创建复杂的功能,其实就是封装了一些代码,变的好用且简单了不少</p>\n<p>客户端里面web api 操作文档api</p>\n<h2 id=\"1-document对象\"><a href=\"#1-document对象\" class=\"headerlink\" title=\"1 document对象\"></a>1 document对象</h2><h2 id=\"2-bom-window对象里\"><a href=\"#2-bom-window对象里\" class=\"headerlink\" title=\"2 bom window对象里\"></a>2 bom window对象里</h2><h3 id=\"window对象\"><a href=\"#window对象\" class=\"headerlink\" title=\"window对象\"></a>window对象</h3><p>简介: 在浏览器里面的全局的一些对象和属性,可以改变就是浏览器里面的一些基本的属性</p>\n<ol>\n<li>在gloabl作用域里面; <code>var sayage=() =&gt;alert(this.age); var age = 29;</code> 在这样的定义下就会全变成window对象的属性,包含在里面</li>\n<li>窗口关系</li>\n<li>大小</li>\n<li>视口位置,就是内阁滚轮控制的界面</li>\n<li>导航和打开新的界面</li>\n<li>定时器 <code>settimeout(字符串或者函数,时间);</code> 比较常用的就是<code>if(a&lt; b) &#123; settimeout (x,x)&#125;</code>就是限制了不少不会一直不停的干下去<br>7.系统对话框<code>alert</code> 显示 <code>confirm</code> 确定 <code>prompt</code> 输入文本三个方法里面就是了</li>\n</ol>\n<p>const 和let 就是不会添加到window对象里面,var 就会,区分使用就好了</p>\n<h3 id=\"1-narvigator\"><a href=\"#1-narvigator\" class=\"headerlink\" title=\"1 narvigator\"></a>1 narvigator</h3><ol>\n<li><p>检测插件</p>\n</li>\n<li><p>注册处理系统</p>\n</li>\n<li><p>负责提供浏览器的信息.例如就是名称平台.语言.它可以检查浏览器是否支持一些特性 例如jsva,cookie.vr等.可以使用window.navigator属性来访问navigator对象.</p>\n<p><code>javaEnabled()</code> 返回一个布尔值，表示浏览器是否启用了Java<br><code>taintEnabled()</code> 返回一个布尔值，表示浏览器是否启用了数据污染<br><code>vibrate()</code> 使设备振动一定的时间<br><code>registerProtocolHandler()</code> 注册一个自定义的协议处理器<br><code>requestMediaKeySystemAccess()</code> 请求一个媒体密钥系统的访问对象</p>\n<p>属性 描述<br><code>appCodeName</code> 返回浏览器的代码名<br><code>appName</code> 返回浏览器的名称<br><code>appVersion</code> 返回浏览器的版本信息<br><code>cookieEnabled</code> 返回一个布尔值，表示浏览器是否启用了Cookie<br><code>geolocation</code> 返回一个Geolocation对象，用于获取设备的地理位置信息<br><code>language</code> 返回浏览器的首选语言<br><code>onLine</code> 返回一个布尔</p>\n</li>\n</ol>\n<p>井字棋   2023/5/4<br>1 js 箭头函数<br>箭头函数是ES6引入的一种新的函数声明方式，可以让我们更方便地创建函数。</p>\n<p>箭头函数的语法形式如下：</p>\n<p>Copy<br>(parameters) =&gt; { statements }<br>其中，parameters表示函数的参数列表，可以是一个或多个参数。如果没有参数，则必须使用空括号表示。statements是函数体，可以是一条语句或多条语句。</p>\n<p>箭头函数有以下特点：</p>\n<p>简洁的语法形式：箭头函数可以使用更简洁的语法形式来定义函数，例如省略了function关键字和return关键字。</p>\n<p>没有自己的this对象：箭头函数没有自己的this对象，它会继承父级作用域的this对象。这意味着，在箭头函数内部，this指向的是定义该箭头函数的父级作用域的this，而不是箭头函数自己的this。</p>\n<p>不能作为构造函数：由于箭头函数没有自己的this对象，因此不能用作构造函数。</p>\n<p>下面是一些使用箭头函数的示例：</p>\n<p>javascript<br>Copy<br>// 一个简单的箭头函数<br>const add = (a, b) =&gt; a + b;</p>\n<p>// 箭头函数作为回调函数<br>const arr = [1, 2, 3];<br>const newArr = arr.map(item =&gt; item * 2);</p>\n<p>// 箭头函数内部使用父级作用域的this对象</p>\n<p>const obj = {<br>name: ‘Sage’,<br>getName: function() {<br>return () =&gt; console.log(this.name);<br>}<br>};<br>const func = obj.getName();<br>func(); // 输出：Sage<br>需要注意的是，由于箭头函数没有自己的this对象，因此不能使用call()、apply()、bind()等方法来改变this的指向。</p>\n<p>eg: 就是简单的函数的定义啥的</p>\n<p>//箭头函数不能用构造器,new错误<br>var Foo = () =&gt;{};<br>var Foo = () =&gt; {};<br>var foo = new Foo(); // TypeError: Foo is not a constructor<br>其实就是箭头函数不能作为构造函数,没有自己的this对象,导致就是不能构造函数,如果创建一个可以用来构造函数的函数就是要使用普通函数而不是箭头函数,例如下面的一个可以构造函数的<br>// var Foo =() =&gt; {};<br>// var foo = new Foo();//这样是不能构造函数的<br>function Foo()<br>{<br>this.bar = ‘hello’;<br>}<br>var foo = new Foo();<br>console.log(foo.bar);<br>//着就是号了就是简单的前面的没this对象罢了</p>\n<p>5/5<br>1 是什么?<br>是一个申明式的,高效的灵活的用于构建用户界面的js库,用react<br>可以把一些简单的独立的代码片段组合成复杂 的ui界面,这些代码片段就是组件<br>class ShoppingList  extends React.Component {<br>//    就是组件类<br>render() /<em>render方法返回你希望</em>/{<br>return (</p>\n<div className=\"shopping-list\">\n<h1>Shopping List for {this.props.name}</h1>\n<ul>\n<li>Instagram</li>\n<li>WhatsApp</li>\n<li>Oculus</li>\n</ul>\n</div>\n);\n}\n}\n\n\n<p>5/6</p>\n<p>class Square extends React.Component {<br>render() {<br>return (<br>//渲染出来一个单独的button<br><button className=\"square\"><br>{/* TODO */}<br></button><br>);<br>}<br>}</p>\n<p>//渲染出九个方块<br>class Board extends React.Component {<br>renderSquare(i) {<br>return <Square />;<br>}</p>\n<p>render() {<br>const status = ‘Next player: X’;</p>\n<pre><code>return (\n  &lt;div&gt;\n    &lt;div className=&quot;status&quot;&gt;&#123;status&#125;&lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(0)&#125;\n      &#123;this.renderSquare(1)&#125;\n      &#123;this.renderSquare(2)&#125;\n    &lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(3)&#125;\n      &#123;this.renderSquare(4)&#125;\n      &#123;this.renderSquare(5)&#125;\n    &lt;/div&gt;\n    &lt;div className=&quot;board-row&quot;&gt;\n      &#123;this.renderSquare(6)&#125;\n      &#123;this.renderSquare(7)&#125;\n      &#123;this.renderSquare(8)&#125;\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\n</code></pre>\n<p>}<br>}<br>//含有默认值的一个棋盘<br>class Game extends React.Component {<br>render() {<br>return (</p>\n<div className=\"game\">\n<div className=\"game-board\">\n<Board />\n</div>\n<div className=\"game-info\">\n<div>{/* status */}</div>\n<ol>{/* TODO */}</ol>\n</div>\n</div>\n);\n}\n}\n\n<p>// ========================================</p>\n<p>const root = ReactDOM.createRoot(document.getElementById(“root”));<br>root.render(<Game />);</p>\n<p>5/9<br>// 定义 Square 组件，表示每个格子<br>class Square extends React.Component {<br>render() {<br>// 通过 props 获取格子的值和点击事件处理函数<br>return (<br>&lt;button className=”square” onClick={() =&gt; this.props.onClick()}&gt;<br>{this.props.value}<br></button><br>);<br>}<br>}</p>\n<p>// 定义 Board 组件，表示游戏棋盘<br>class Board extends React.Component {<br>// 渲染每个格子<br>renderSquare(i) {<br>// 通过 props 获取当前格子的值和点击事件处理函数<br>return (<br>&lt;Square<br>value={this.props.squares[i]}<br>onClick={() =&gt; this.props.onClick(i)}<br>/&gt;<br>);<br>}</p>\n<pre><code>render() &#123;\n    // 渲染九宫格\n    return (\n        &lt;div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(0)&#125;\n                &#123;this.renderSquare(1)&#125;\n                &#123;this.renderSquare(2)&#125;\n            &lt;/div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(3)&#125;\n                &#123;this.renderSquare(4)&#125;\n                &#123;this.renderSquare(5)&#125;\n            &lt;/div&gt;\n            &lt;div className=&quot;board-row&quot;&gt;\n                &#123;this.renderSquare(6)&#125;\n                &#123;this.renderSquare(7)&#125;\n                &#123;this.renderSquare(8)&#125;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n&#125;\n</code></pre>\n<p>}</p>\n<p>// 定义 Game 组件，表示游戏主界面<br>class Game extends React.Component {<br>constructor(props) {<br>super(props);<br>// 初始化状态<br>this.state = {<br>history: [<br>{<br>squares: Array(9).fill(null),<br>},<br>],<br>stepNumber: 0,<br>xIsNext: true,<br>};<br>}</p>\n<pre><code>// 点击事件处理函数，更新状态\nhandleClick(i) &#123;\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) &#123;\n        // 如果已经有一方获胜或者当前格子已经有值了，则不做任何操作\n        return;\n    &#125;\n\n    // 更新当前格子的值\n    squares[i] = this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;;\n\n    // 更新状态\n    this.setState(&#123;\n        history: history.concat([\n            &#123;\n                squares: squares,\n            &#125;,\n        ]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n    &#125;);\n&#125;\n\n// 跳转到指定步数\njumpTo(step) &#123;\n    this.setState(&#123;\n        stepNumber: step,\n        xIsNext: step % 2 === 0,\n    &#125;);\n&#125;\n\nrender() &#123;\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    // 渲染历史记录\n    const moves = history.map((step, move) =&gt; &#123;\n        const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;\n        return (\n            &lt;li key=&#123;move&#125;&gt;\n                &lt;button onClick=&#123;() =&gt; this.jumpTo(move)&#125;&gt;&#123;desc&#125;&lt;/button&gt;\n            &lt;/li&gt;\n        );\n    &#125;);\n\n    let status;\n    if (winner) &#123;\n        status = &quot;Winner: &quot; + winner;\n    &#125; else &#123;\n        status = &quot;Next player: &quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n    &#125;\n\n    // 渲染游戏界面\n    return (\n        &lt;div className=&quot;game&quot;&gt;\n            &lt;div className=&quot;game-board&quot;&gt;\n                &lt;Board squares=&#123;current.squares&#125; onClick=&#123;(i) =&gt; this.handleClick(i)&#125; /&gt;\n            &lt;/div&gt;\n            &lt;div className=&quot;game-info&quot;&gt;\n                &lt;div&gt;&#123;status&#125;&lt;/div&gt;\n                &lt;ol&gt;&#123;moves&#125;&lt;/ol&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n&#125;\n</code></pre>\n<p>}</p>\n<p>// 判断是否有获胜者<br>function calculateWinner(squares) {<br>const lines = [<br>[0, 1, 2],<br>[3, 4, 5],<br>[6, 7, 8],<br>[0, 3, 6],<br>[1, 4, 7],<br>[2, 5, 8],<br>[0, 4, 8],<br>[2, 4, 6],<br>];</p>\n<pre><code>for (let i = 0; i &lt; lines.length; i++) &#123;\n    const [a, b, c] = lines[i];\n    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;\n        return squares[a];\n    &#125;\n&#125;\n\nreturn null;\n</code></pre>\n<p>}</p>\n<p>// 渲染游戏界面<br>const root = ReactDOM.createRoot(document.getElementById(“root”));<br>root.render(<Game />);</p>\n<p>通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。</p>\n<p>jsx 简介<br>const element = <h1>hello,world </h1>;<br>是js 的一个语法扩展,描述ui应该有交互的本质形式.jsx也是可以生成react元素,在探讨就是怎么渲染位dom,本质上喝其他 的ui逻辑内在耦合,比如就是胡在ui里面需要绑定的处理事件,在js代码里面就是jsx和ui放在一起会在视觉上会有辅助作用<br>jsx就是一个把js和ui结构和样式结合起来的一个扩展,它使得创建react组件变得非常容易和直观<br>const name = ‘Josh Perez’;<br>const element = <h1>hello,{name}</h1>;<br>function formatName(user)<br>{</p>\n<p>}<br>希望看见的内容/</p>\n<p>5/22<br>组件<br>js创建组件<br>1 函数组件<br>必须大写开头,必须返回值<br>表单处理<br>受控组件的表单处理<br>表单元素,表单元素里面的可变的状态,再setstate里面修改</p>\n<p>2 步骤<br>state ={text:’ sdf’}<br>3 文本框<br>input<br>textarea value = this.state.constent<br>select 下拉框<br>表单的受控组件</p>\n<p>1 添加就是name = state.txt<br>2 表单的类型获取 属性的值<br>3 再chang事件里面就是秀给name’该对应的state</p>\n<p>项目的介绍</p>\n<p>1<br>这个礼拜的内容就是做出来一个项目了<br>2 </p>\n<p>5/23<br>class Main{<br>public boolean isNumber (String s ){<br>s = s.trim();<br>// 1 拿到数组以后就是把首位的空额<br>if(s.length() == 0)<br>return false;<br>// 2 如过就是空数组的话就是false</p>\n<pre><code>    boolean numFlag = false;\n    //1 数字的话就是对的,但是如果的符号位的话就是只会出现在\n    // 第一位或者指数后面的第一位\n    boolean dotFlat  = false;\n    boolean eFlag= false;\n\n\n    for (int i = 0; i &lt; s.length(); i++) &#123;\n\n        char ch = s.charAt(i);\n        if(ch &gt;= &#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;)&#123;\n            numFlag = true;\n\n            //判断就是数字还是啥的\n        &#125;else if(ch == &#39;+&#39; || ch ==&#39;-&#39;)&#123;\n            if(i != 0 &amp;&amp; s.charAt(i - 1) != &#39;e&#39; &amp;&amp; s.charAt(i - 1 ) !=\n            &#39;E&#39;)\n                return false;\n\n            //如果是+-号的话就是判断是不是就是\n            //只会出现在第一位和e E的后面才会出现\n            \n        &#125;else if (ch == &#39;.&#39;)&#123;\n            //2 只能出现一次而且不能出现在指数后面\n            // 就是一开始的dotFlat会是false 而且就是eflag是false\n            if(dotFlat || eFlag)&#123;\n</code></pre>\n<p>//                    dotFlat = true;<br>return false;<br>}<br>else dotFlat = true;//<br>//就是小数点的问题//.. 会出现问题就是说喽如果.<br>//出现的话就是变成true就好了</p>\n<pre><code>        &#125;else if(ch == &#39;e&#39; || ch ==&#39;E&#39;)&#123;\n            if(!numFlag || eFlag) &#123;\n                return false;\n                // e 前面要有数后面叶要数\n            &#125;\n                eFlag = true;\n                numFlag = false;//后面没数的话就会变的false//简直就是天才\n            &#125;  else &#123;\n                return false;\n            &#125;\n        &#125;\n\n\n     return numFlag;\n    &#125;\n</code></pre>\n<p>/*</p>\n<ul>\n<li><p>*/</p>\n<p>public static void main(String[] args) {<br>Main solution = new Main();<br>String s1 = “ 0 “;<br>String s2 = “ 0.1 “;<br>String s3 = “ 0.1e10 “;<br>String s4 = “ abc “;<br>String s5 = “ 1a “;<br>String s6 = “ 2e10 “;<br>String s7 = “ +1.0 “;<br>String s8 = “ -1.0 “;<br>String s9 = “ 3. “;<br>String s10 = “ .3 “;<br>System.out.println(solution.isNumber(s1)); // true<br>System.out.println(solution.isNumber(s2)); // true<br>System.out.println(solution.isNumber(s3)); // true<br>System.out.println(solution.isNumber(s4)); // false<br>System.out.println(solution.isNumber(s5)); // false<br>System.out.println(solution.isNumber(s6)); // true<br>System.out.println(solution.isNumber(s7)); // true<br>System.out.println(solution.isNumber(s8)); // true<br>System.out.println(solution.isNumber(s9)); // true<br>System.out.println(solution.isNumber(s10)); // true<br>}<br>}</p>\n</li>\n</ul>\n<p>2 回顾java课程</p>\n"},{"title":"我最喜欢的ww","_content":"\n##\n<% // 就是简单的添加网页标签的一个动画效果%>\n<script type=\"text/javascript\">\nvar OriginTitile = document.title,\nst;\ndocument.addEventListener(\"visibilitychange\", function () {\ndocument.hidden ? (document.title = \"看不见我🙈~看不见我🙈~\", clearTimeout(st)) : (document.title =\n\"(๑•̀ㅂ•́) ✧被发现了～\", st = setTimeout(function () {\ndocument.title = OriginTitile\n}, 3e3))\n})\n</script>","source":"_posts/ww.md","raw":"---\ntitle: 我最喜欢的ww\n---\n\n##\n<% // 就是简单的添加网页标签的一个动画效果%>\n<script type=\"text/javascript\">\nvar OriginTitile = document.title,\nst;\ndocument.addEventListener(\"visibilitychange\", function () {\ndocument.hidden ? (document.title = \"看不见我🙈~看不见我🙈~\", clearTimeout(st)) : (document.title =\n\"(๑•̀ㅂ•́) ✧被发现了～\", st = setTimeout(function () {\ndocument.title = OriginTitile\n}, 3e3))\n})\n</script>","slug":"ww","published":1,"date":"2023-04-10T11:42:29.856Z","updated":"2023-04-10T13:19:35.362Z","_id":"clhg9803p0003hou34iizcuo0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>&lt;% // 就是简单的添加网页标签的一个动画效果%&gt;</p>\n<script type=\"text/javascript\">\nvar OriginTitile = document.title,\nst;\ndocument.addEventListener(\"visibilitychange\", function () {\ndocument.hidden ? (document.title = \"看不见我🙈~看不见我🙈~\", clearTimeout(st)) : (document.title =\n\"(๑•̀ㅂ•́) ✧被发现了～\", st = setTimeout(function () {\ndocument.title = OriginTitile\n}, 3e3))\n})\n</script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>&lt;% // 就是简单的添加网页标签的一个动画效果%&gt;</p>\n<script type=\"text/javascript\">\nvar OriginTitile = document.title,\nst;\ndocument.addEventListener(\"visibilitychange\", function () {\ndocument.hidden ? (document.title = \"看不见我🙈~看不见我🙈~\", clearTimeout(st)) : (document.title =\n\"(๑•̀ㅂ•́) ✧被发现了～\", st = setTimeout(function () {\ndocument.title = OriginTitile\n}, 3e3))\n})\n</script>"},{"title":"dailylearn","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-05-29T09:31:56.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"if(a != null) 是不是一个对象\n在方法里面定义的对象回放在内存栈里面的,但是堆就是运行产生的数据.\n堆是对象.栈是变量,数据区就是静态变量,代码区就是代码的\n2\n3 生命周期\n创建,使用,清理和回收.不用控制回收.就是析构函数,就是垃圾回收\n没有引用访问就是垃圾了\n4 发现就是无用对象,在合适的时间回收对象的内存,在回收的时候就是cpu空闲的时候或者是内存不够的时候\n5 构造方法\n初始化对象,特点就是和类名字一样.不用放回类型\n为啥  就是new 就出现了一个对象在堆里面\n重载就是为了适合不一样的函数.好用严格好点\n6 void其实是不要出现void 因为返回的是void类型,就不是回构造方法了,不然就是全都是 默认构造 方法.\n7 1 分配空间 2 显示初始化 3 构造 4 吧对象的引用返回\n8 就是不用this 了比较好\n就是直接里面的变量就好不管是不是就是public\n9 this 在对当前对象的引用就是了\nno  = n; 就是this.no = n;\n但是就是如果变量是一样的化还是要this,好用一点,比较的严格好点.以后还是this好点\n10 this this(\"1 , \"ton\");\n就是调用其他的构造方法\n11 方法的重载和静态变量\n1 卡面的就是介绍不少的名字的方法但是好多不一样的形参\n2 就是不要混乱了\n3 其实还是要形参要不一样才是对 的\n4 好处\n就是好点不用多名字\npublic 就好了,不用其他的函数啥的\n12 静态的成员和方法\n对象共享的属性好点, 就是全部都市要static好点\n直接访问就是了也是好点就是可以直接访问的,还是不管的是不是就可以改了.就是静态的对象要先有对象才可以访问\n13 返回统计的个数\n就是可以直接访问就好了.就可以看见个数好点了\npublic static int num;\nif a(){num++;}\n静态方法就是可以直接类访问还是\n\n14 对象才是可以访问的,直接就是要 金泰方法里面全要是静态的成员和方法的,也是可以普通方法访问的\n\n15 对象变量的传递\n即使按照值来传递的\n方法调用的时候还是\n就是直接吧把值传递拷贝一下给另一个\n交换的话还是就是交换,交换方法的时候对外面的交换的没有用\n\n16 引用对象的值,就是地址值就是按照对象的值传递引用只要这样的传递,没有其他的传递\n就是指向的同一个对象就好了,就可以修改了\nnew 以后就不是一个地址了\n\n\n7 继承\n内存  : 就是地址里面的指向\npublic : 全是\nprotected ;要是相同的包才可以调用的\nprivate ; 在一个类里面\n\n两个包的话就是在b继承a里面的\ndefault 就是只会在一个包里面被调用\n方法重写\nsuper 和final\n子类里面再夫类里面的再写, 就是有相同的名字,参数也相同,返回类型要比父类的更小或者是= , 子类方法的访问权限里面要比父类更大的访问权限\n\nsuper 就是对自己父类的一个引用\nfinal 顶一个一个常量的作用\n再后面的变量 就是初始化以后就不能修改了\ni 要先声明再赋值\n\n在里面的化就是i 还是不能修改的\n在s里面也不能指代其他的对象\ns里面就是可以给自己的对象里面的方法修改就好\n\nfinal 就是用来阻止一个类被继承或者是一个方法被重写的\n\n1 子类的构造方法\n又必须调用父类的构造办法\n\n对象的转型\n1 在父类里面 new (类名)  a;  就是把父类变子类\n\n\n##5/29\n1 力扣 :如果代码里面就是0 做除数的化就会导致异常 ,以后要避免\n2 广度优先搜索法\n\n\n##6/3\n多态\n1 java的多态, pet cry() cat dog();\n2 对象的类型都是pet p0 和 p1 就是一个的方法具有动态的多态性,就是不同的方法加后面的不一样的方法重载就好了\n3  就是载一个函数里面的不同的对象就是对应不一样的方法就是了\n3 对象变量就是在栈里面.但是对象是在堆里面的\n4 再添加一个宠物的话就是重写一个函数就是了\n5 实际上就是再用的函数里面就是不用修改的\n\n\n抽象类和方法\n1 在pet里面要不要实现 , 在父类里面就是不用实现的,毕竟就是没实际的,就是把共有的抽象放在父类里面就好了\n2 没有实现的方法\n3 在抽象方法里面的类就是抽象类\n4  就是只加一个分号就好了.后面不要{}\\\n5 就是为了实现多态\n6 有抽象方法的类必须是抽象类\n7 不能创建实例的,就是构造函数\n8 就是被继承的\n9 盖房子\n10 就是在有抽象方法哟吼就是要在一个的类里面就是不同的\n就要设置为抽象方法,变多态就好不少了\n11 就在后面继承多几个方法就好了\n\n数组\n1 int []  s = new int[];\n就是数组了\n2 数组能在对象里面创建一个对象数组\n3 动态初始化\n分陪空间,先分配空间,\n4 静态初始化\nint [] a = {1,2}\n就是直接搞一个数组出来\n5 分陪空间以后才可以用的\n6 命令行的参数\n7 equals() 数组不能改变大小的.就是i 赋值不一样改变数组的大小,二维数组,java 就是没而为数组的 ,其实就是数组的数组,就是多维数组,本质就是数组的数组\n8 不同的行就是不同的长度\n\n\n接口\n1 在有的接口里面iu是定义新的接口\n2 属性是 public statiic final 类型\n3 没构造方法\n4 接口时规范不能使用的\n\n一个类可以实现多个接口\n1 多继承的问题\n2 java 就是不能一个类实现多个接口的\n3  但是就是变量就是可以访问一个实现该接口的对象,也就是一个父类的指向对象是可以指向子类对象的\n4  方法是不用实现的\n5 在实现接口里面的类里面的全部抽象方法\n6 一个类可实现多个接口 , 接口变量的可以实现调用实现接变量的对象\n\n\n接口的案例\n\n\n\n##6/6\njava hashmap\n实现了map clone 接口\n\n继承\n1 只会继承非private 属性和方法\n2 扩展\n3 可以单继承但是可以多次继承\n\n\n关键字\nextends implements\n用implements 就变相的实现了Java有多继承的特性\nsuper super super super super super\nthis. this\nfinal 关键字  类不能被继承 方法不能被子类重写\n\n\n重写和重载\n1 重写以后的话要是调用保证类型正确,自己的类调自己能调的类\n2 instanceof instanceof 就是保证是不是一个类型\n3\n区别点\t重载方法\t重写方法\n参数列表\t必须修改\t一定不能修改\n返回类型\t可以修改\t一定不能修改\n异常\t可以修改\t可以减少或删除，一定不能抛出新的或者更广的异常\n访问\t可以修改\t一定不能做更严格的限制（可以降低限制\n\n\n多态\n1 就是使用一个接口,按照不一样的实例对象给不一样的方法\n2  消除类型里面的耦合 可替换性,可扩充性\n3 继承和重写\n4\n\n封装\n1 把抽象函数接口封装下\n举了例子\n1 private 对属性 这样的话访问和修改全要用方法\n\n接口\n1 可以多个方法\n2 保存载java结尾的文件里面\n3 名字要用接口名字\n4 必须在匹配的目录结构里面\n\n\n1 不能实例化\n2 没构造方法\n3 必须全是抽象方法\n4 没有成员变量\n5 不是被继承,而是要被实现\n6接口支持多继承\n\n特性\n1 接口里面发方法会默认为public abstract\n2 接口里面的变量会默认为public static final\n3 在子类里面实现\n\n区别\n1 接口里面的方法不能有方法体\n2 接口里面只有public static final 类型的成员\n3 接口里面不能有静态代码块和静态方法\n但是抽象类里面可以\n4 多继承和单继承\n\ninterface leimin{\n//\npublic static final  a = 10 ;\nabstract getA();\n\n}\n\n接口的继承\n1 一个接口只能继承一个接口\n2 extends 关键字\n3 接口里面的方法必须是public 的\n\n接口里的多继承是可以的\n就是extends a,b{\n}\n\n标记接口\n\n\njava枚举\n\n1 特殊的类\nenum 关键字\n2 enum  a{\nred,green;\n}\n3 values()返回枚举类里面的所有的值\n4 ordinal() 找到每一个枚举的索引 valueOf() 返回指定字符串的枚举量,没有就报错了\ncolor[] arr = color.values();可以返回一个全部的对象了\n5 枚举类里面的抽象方法实现要类里面的每一个对象都进行实现\n\n滑动窗口算法\n1 找到就是单字符的返回里面的子串,子数组\n2 满足一个连续的一个满足啥条件的字串,子序列,子数组\n3 就是左右双指针,就是把右指针不断扩大满足条件的话\n4 不是的话就是l再往右缩小窗口就是\\\n5\n\n##6/7\nHashMap就是一个\n1 Hashmap<Integer,String>\nHashMap<key,value> 里面的key和value类型可以不同也可以相同,可以是Integer 和 AString  \nMap<String,String> map = Map.of(\"\" ,\"\" ,\"\")\n2 里面有好多有用的方法\n1 添加键值对就是使用put方法就好了\n2 删除元素我用remove(key)删除键值对\n3 输出的话是之久额就是println(sites); 就好了\n4 计算里面的数值对的大小用.size() 就好\n5 迭代 ,foreach 就好了\nfor(Inter i: sites.keyset()){\n// 就是俺key的大小排序就是了\n}\nfor(String value: sites.values()){\n// 就是按照values数组里面的迭代了\n}\n\n3 方法\nclear();\nClone();\nisEmpty();\nsize();\nput();\nPutall();\nremove();\ncontainKey();\ncontainValue();\nreplace():\nget();\nvalues();\nforeach();;;\n\n\n##6/11\nstring 不可变的字符序列\n\n1 String  s = heool\ns = s+ \"world\" 就是改写的是对象不是改变的对象的本身\n2 new对象是放再堆里面的但是就是直接给出来的再数据去里面\n3 s1 = sss\ns2 =sss 里面就是同一个对象,也就是\n4 也就是直接 string s = \"是\"\nstring s1 = new string(\"是\")\n就不是一个,一个再堆里面一个再数据区里面\n5 在里面就是string方法就是放回的就是一些的对象\n6 方法\nchatat\nlength\nindexof\nequals\nequalsgnorecase 就是忽略大小写\nstring 静态方法\n里面就是返回一些的valueof() 就是把后面的基础数据类型转化变成前面的封装的类的对象\n把形参转化变成后面的类型就是了\n\n##6/24\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n\n        int n2=in.nextInt();\n        int n3=in.nextInt();\n        double n4=0;\n        //n4 = n2的算术平方根 + n3对数的自然对数\n        n4= Math.round(Math.sqrt(n2)+Math.log(n3));\n        double n1=Math.random() *21 + 2 ;\n        //random 就是生成一个再0 和1 直接的浮点数\n        //sqrt ,sqrt是算数平方根,而log 就是自然底数的对数\n        //Math.round()是四舍五入的意思\n\n        /* 请在这里填写答案 */\n        n1 = (int) n1;\n        System.out.println(n1);\n\n        //判断随机数n1是否为整数并且是2-23之间的数\n        if(n1==(int)n1&&n1>=2&&n1<=23)\n        {\n            System.out.println(\"random\");\n        }\n        System.out.println(n4);\n\n    }\n}\n\n\nStringBUffer\n1 就是可变的字符序列\n2 线程安全的序列\nappend insert delete\n追加,插入,删除\n返回就是原来的对象的引用\n就是内容变了\n\n3 buff.append(\"?\") 就是添加以后了\n\n\n4 Wrapper\n八个包装的类,就是引用的类\nmath类\n\n容器的概念\n飞机大战里面的管理全部的对象里面\n存放对象,特定方式获取对象,操作对象\n对象的插入删除,自动完成容量的变化\n\n数组的话还是稍微有点就是ihui有点浪费\nJava里面的用于管理对象集合的类\ncollection  set list quene\nmap 接口 就是一些数据对在里面  \niterator 就是一些数据的集合\n1 LIst 就是按照对象进入的顺序\n2 集合 对象唯一不会重复\n3 队列, 按照排队规则确定对象的顺序\nmap\n一些成对的键-值 表\n就是一个对象可以查到其他的对象就是map 了\n\n\ncollection 接口\nadd  remove contains addAll removALL\ncontainAll\ntoArray 就是变成一份数组\nclear size\n\n//定义一个集合就是为了以后就是可以好修改代码毕竟就是以后的话,Collection c = new Arraylist\n然后就是后面的代码就是可以不用直接改变,后面的话就比较好修改欠面,比如就是后面忽然发现就是好像哈希表比链表好用的话就是\n\nlist接口的实现类\n特点就是可以变长的对象数组\nvectoer是线程安全的,是同步的运行效率低\n\n\n栈和队列\nStack\npush pop peek获得但是不删除\nempty\nqueue 队列\noffer入队\npeek,element\npeek 是不会抛出异常的,但是emement 就是会有异常\n主要实现类就是linklist\n还实现了deque接口\n\n\nset接口就是collection 就是子接口,没额外的方法\n也就是collection行为不同就是\n1 set 接口类的特点就是元素没有顺序\n2 hashcode就是根据哈希值查找对象位置\n3 方便查找建立索引就是了\n4 对每一个元素都可以很快找到有没有这个元素就好了\n5 快速找到表里面是不是又这样一个元素\n\nhashcode方法就是为了提高检索的效率\nequals 为true是hashcode的充足条件\n1\nmap接口\n1 存的就是键值对\n2 hashmap treemap 键值对就是唯一的键\n3 containkey 就是有没有包含键值对\n4\n\n迭代器\n不关心容器的类型然后就是统一的方法做出来一份迭代\n\n1 iterator 接口\n回来已发个就是一个的接口就是\n\n\n\n\n\n\n","source":"_posts/dailylearn.md","raw":"---\ntitle: dailylearn\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-05-29 17:31:56\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\nif(a != null) 是不是一个对象\n在方法里面定义的对象回放在内存栈里面的,但是堆就是运行产生的数据.\n堆是对象.栈是变量,数据区就是静态变量,代码区就是代码的\n2\n3 生命周期\n创建,使用,清理和回收.不用控制回收.就是析构函数,就是垃圾回收\n没有引用访问就是垃圾了\n4 发现就是无用对象,在合适的时间回收对象的内存,在回收的时候就是cpu空闲的时候或者是内存不够的时候\n5 构造方法\n初始化对象,特点就是和类名字一样.不用放回类型\n为啥  就是new 就出现了一个对象在堆里面\n重载就是为了适合不一样的函数.好用严格好点\n6 void其实是不要出现void 因为返回的是void类型,就不是回构造方法了,不然就是全都是 默认构造 方法.\n7 1 分配空间 2 显示初始化 3 构造 4 吧对象的引用返回\n8 就是不用this 了比较好\n就是直接里面的变量就好不管是不是就是public\n9 this 在对当前对象的引用就是了\nno  = n; 就是this.no = n;\n但是就是如果变量是一样的化还是要this,好用一点,比较的严格好点.以后还是this好点\n10 this this(\"1 , \"ton\");\n就是调用其他的构造方法\n11 方法的重载和静态变量\n1 卡面的就是介绍不少的名字的方法但是好多不一样的形参\n2 就是不要混乱了\n3 其实还是要形参要不一样才是对 的\n4 好处\n就是好点不用多名字\npublic 就好了,不用其他的函数啥的\n12 静态的成员和方法\n对象共享的属性好点, 就是全部都市要static好点\n直接访问就是了也是好点就是可以直接访问的,还是不管的是不是就可以改了.就是静态的对象要先有对象才可以访问\n13 返回统计的个数\n就是可以直接访问就好了.就可以看见个数好点了\npublic static int num;\nif a(){num++;}\n静态方法就是可以直接类访问还是\n\n14 对象才是可以访问的,直接就是要 金泰方法里面全要是静态的成员和方法的,也是可以普通方法访问的\n\n15 对象变量的传递\n即使按照值来传递的\n方法调用的时候还是\n就是直接吧把值传递拷贝一下给另一个\n交换的话还是就是交换,交换方法的时候对外面的交换的没有用\n\n16 引用对象的值,就是地址值就是按照对象的值传递引用只要这样的传递,没有其他的传递\n就是指向的同一个对象就好了,就可以修改了\nnew 以后就不是一个地址了\n\n\n7 继承\n内存  : 就是地址里面的指向\npublic : 全是\nprotected ;要是相同的包才可以调用的\nprivate ; 在一个类里面\n\n两个包的话就是在b继承a里面的\ndefault 就是只会在一个包里面被调用\n方法重写\nsuper 和final\n子类里面再夫类里面的再写, 就是有相同的名字,参数也相同,返回类型要比父类的更小或者是= , 子类方法的访问权限里面要比父类更大的访问权限\n\nsuper 就是对自己父类的一个引用\nfinal 顶一个一个常量的作用\n再后面的变量 就是初始化以后就不能修改了\ni 要先声明再赋值\n\n在里面的化就是i 还是不能修改的\n在s里面也不能指代其他的对象\ns里面就是可以给自己的对象里面的方法修改就好\n\nfinal 就是用来阻止一个类被继承或者是一个方法被重写的\n\n1 子类的构造方法\n又必须调用父类的构造办法\n\n对象的转型\n1 在父类里面 new (类名)  a;  就是把父类变子类\n\n\n##5/29\n1 力扣 :如果代码里面就是0 做除数的化就会导致异常 ,以后要避免\n2 广度优先搜索法\n\n\n##6/3\n多态\n1 java的多态, pet cry() cat dog();\n2 对象的类型都是pet p0 和 p1 就是一个的方法具有动态的多态性,就是不同的方法加后面的不一样的方法重载就好了\n3  就是载一个函数里面的不同的对象就是对应不一样的方法就是了\n3 对象变量就是在栈里面.但是对象是在堆里面的\n4 再添加一个宠物的话就是重写一个函数就是了\n5 实际上就是再用的函数里面就是不用修改的\n\n\n抽象类和方法\n1 在pet里面要不要实现 , 在父类里面就是不用实现的,毕竟就是没实际的,就是把共有的抽象放在父类里面就好了\n2 没有实现的方法\n3 在抽象方法里面的类就是抽象类\n4  就是只加一个分号就好了.后面不要{}\\\n5 就是为了实现多态\n6 有抽象方法的类必须是抽象类\n7 不能创建实例的,就是构造函数\n8 就是被继承的\n9 盖房子\n10 就是在有抽象方法哟吼就是要在一个的类里面就是不同的\n就要设置为抽象方法,变多态就好不少了\n11 就在后面继承多几个方法就好了\n\n数组\n1 int []  s = new int[];\n就是数组了\n2 数组能在对象里面创建一个对象数组\n3 动态初始化\n分陪空间,先分配空间,\n4 静态初始化\nint [] a = {1,2}\n就是直接搞一个数组出来\n5 分陪空间以后才可以用的\n6 命令行的参数\n7 equals() 数组不能改变大小的.就是i 赋值不一样改变数组的大小,二维数组,java 就是没而为数组的 ,其实就是数组的数组,就是多维数组,本质就是数组的数组\n8 不同的行就是不同的长度\n\n\n接口\n1 在有的接口里面iu是定义新的接口\n2 属性是 public statiic final 类型\n3 没构造方法\n4 接口时规范不能使用的\n\n一个类可以实现多个接口\n1 多继承的问题\n2 java 就是不能一个类实现多个接口的\n3  但是就是变量就是可以访问一个实现该接口的对象,也就是一个父类的指向对象是可以指向子类对象的\n4  方法是不用实现的\n5 在实现接口里面的类里面的全部抽象方法\n6 一个类可实现多个接口 , 接口变量的可以实现调用实现接变量的对象\n\n\n接口的案例\n\n\n\n##6/6\njava hashmap\n实现了map clone 接口\n\n继承\n1 只会继承非private 属性和方法\n2 扩展\n3 可以单继承但是可以多次继承\n\n\n关键字\nextends implements\n用implements 就变相的实现了Java有多继承的特性\nsuper super super super super super\nthis. this\nfinal 关键字  类不能被继承 方法不能被子类重写\n\n\n重写和重载\n1 重写以后的话要是调用保证类型正确,自己的类调自己能调的类\n2 instanceof instanceof 就是保证是不是一个类型\n3\n区别点\t重载方法\t重写方法\n参数列表\t必须修改\t一定不能修改\n返回类型\t可以修改\t一定不能修改\n异常\t可以修改\t可以减少或删除，一定不能抛出新的或者更广的异常\n访问\t可以修改\t一定不能做更严格的限制（可以降低限制\n\n\n多态\n1 就是使用一个接口,按照不一样的实例对象给不一样的方法\n2  消除类型里面的耦合 可替换性,可扩充性\n3 继承和重写\n4\n\n封装\n1 把抽象函数接口封装下\n举了例子\n1 private 对属性 这样的话访问和修改全要用方法\n\n接口\n1 可以多个方法\n2 保存载java结尾的文件里面\n3 名字要用接口名字\n4 必须在匹配的目录结构里面\n\n\n1 不能实例化\n2 没构造方法\n3 必须全是抽象方法\n4 没有成员变量\n5 不是被继承,而是要被实现\n6接口支持多继承\n\n特性\n1 接口里面发方法会默认为public abstract\n2 接口里面的变量会默认为public static final\n3 在子类里面实现\n\n区别\n1 接口里面的方法不能有方法体\n2 接口里面只有public static final 类型的成员\n3 接口里面不能有静态代码块和静态方法\n但是抽象类里面可以\n4 多继承和单继承\n\ninterface leimin{\n//\npublic static final  a = 10 ;\nabstract getA();\n\n}\n\n接口的继承\n1 一个接口只能继承一个接口\n2 extends 关键字\n3 接口里面的方法必须是public 的\n\n接口里的多继承是可以的\n就是extends a,b{\n}\n\n标记接口\n\n\njava枚举\n\n1 特殊的类\nenum 关键字\n2 enum  a{\nred,green;\n}\n3 values()返回枚举类里面的所有的值\n4 ordinal() 找到每一个枚举的索引 valueOf() 返回指定字符串的枚举量,没有就报错了\ncolor[] arr = color.values();可以返回一个全部的对象了\n5 枚举类里面的抽象方法实现要类里面的每一个对象都进行实现\n\n滑动窗口算法\n1 找到就是单字符的返回里面的子串,子数组\n2 满足一个连续的一个满足啥条件的字串,子序列,子数组\n3 就是左右双指针,就是把右指针不断扩大满足条件的话\n4 不是的话就是l再往右缩小窗口就是\\\n5\n\n##6/7\nHashMap就是一个\n1 Hashmap<Integer,String>\nHashMap<key,value> 里面的key和value类型可以不同也可以相同,可以是Integer 和 AString  \nMap<String,String> map = Map.of(\"\" ,\"\" ,\"\")\n2 里面有好多有用的方法\n1 添加键值对就是使用put方法就好了\n2 删除元素我用remove(key)删除键值对\n3 输出的话是之久额就是println(sites); 就好了\n4 计算里面的数值对的大小用.size() 就好\n5 迭代 ,foreach 就好了\nfor(Inter i: sites.keyset()){\n// 就是俺key的大小排序就是了\n}\nfor(String value: sites.values()){\n// 就是按照values数组里面的迭代了\n}\n\n3 方法\nclear();\nClone();\nisEmpty();\nsize();\nput();\nPutall();\nremove();\ncontainKey();\ncontainValue();\nreplace():\nget();\nvalues();\nforeach();;;\n\n\n##6/11\nstring 不可变的字符序列\n\n1 String  s = heool\ns = s+ \"world\" 就是改写的是对象不是改变的对象的本身\n2 new对象是放再堆里面的但是就是直接给出来的再数据去里面\n3 s1 = sss\ns2 =sss 里面就是同一个对象,也就是\n4 也就是直接 string s = \"是\"\nstring s1 = new string(\"是\")\n就不是一个,一个再堆里面一个再数据区里面\n5 在里面就是string方法就是放回的就是一些的对象\n6 方法\nchatat\nlength\nindexof\nequals\nequalsgnorecase 就是忽略大小写\nstring 静态方法\n里面就是返回一些的valueof() 就是把后面的基础数据类型转化变成前面的封装的类的对象\n把形参转化变成后面的类型就是了\n\n##6/24\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n\n        int n2=in.nextInt();\n        int n3=in.nextInt();\n        double n4=0;\n        //n4 = n2的算术平方根 + n3对数的自然对数\n        n4= Math.round(Math.sqrt(n2)+Math.log(n3));\n        double n1=Math.random() *21 + 2 ;\n        //random 就是生成一个再0 和1 直接的浮点数\n        //sqrt ,sqrt是算数平方根,而log 就是自然底数的对数\n        //Math.round()是四舍五入的意思\n\n        /* 请在这里填写答案 */\n        n1 = (int) n1;\n        System.out.println(n1);\n\n        //判断随机数n1是否为整数并且是2-23之间的数\n        if(n1==(int)n1&&n1>=2&&n1<=23)\n        {\n            System.out.println(\"random\");\n        }\n        System.out.println(n4);\n\n    }\n}\n\n\nStringBUffer\n1 就是可变的字符序列\n2 线程安全的序列\nappend insert delete\n追加,插入,删除\n返回就是原来的对象的引用\n就是内容变了\n\n3 buff.append(\"?\") 就是添加以后了\n\n\n4 Wrapper\n八个包装的类,就是引用的类\nmath类\n\n容器的概念\n飞机大战里面的管理全部的对象里面\n存放对象,特定方式获取对象,操作对象\n对象的插入删除,自动完成容量的变化\n\n数组的话还是稍微有点就是ihui有点浪费\nJava里面的用于管理对象集合的类\ncollection  set list quene\nmap 接口 就是一些数据对在里面  \niterator 就是一些数据的集合\n1 LIst 就是按照对象进入的顺序\n2 集合 对象唯一不会重复\n3 队列, 按照排队规则确定对象的顺序\nmap\n一些成对的键-值 表\n就是一个对象可以查到其他的对象就是map 了\n\n\ncollection 接口\nadd  remove contains addAll removALL\ncontainAll\ntoArray 就是变成一份数组\nclear size\n\n//定义一个集合就是为了以后就是可以好修改代码毕竟就是以后的话,Collection c = new Arraylist\n然后就是后面的代码就是可以不用直接改变,后面的话就比较好修改欠面,比如就是后面忽然发现就是好像哈希表比链表好用的话就是\n\nlist接口的实现类\n特点就是可以变长的对象数组\nvectoer是线程安全的,是同步的运行效率低\n\n\n栈和队列\nStack\npush pop peek获得但是不删除\nempty\nqueue 队列\noffer入队\npeek,element\npeek 是不会抛出异常的,但是emement 就是会有异常\n主要实现类就是linklist\n还实现了deque接口\n\n\nset接口就是collection 就是子接口,没额外的方法\n也就是collection行为不同就是\n1 set 接口类的特点就是元素没有顺序\n2 hashcode就是根据哈希值查找对象位置\n3 方便查找建立索引就是了\n4 对每一个元素都可以很快找到有没有这个元素就好了\n5 快速找到表里面是不是又这样一个元素\n\nhashcode方法就是为了提高检索的效率\nequals 为true是hashcode的充足条件\n1\nmap接口\n1 存的就是键值对\n2 hashmap treemap 键值对就是唯一的键\n3 containkey 就是有没有包含键值对\n4\n\n迭代器\n不关心容器的类型然后就是统一的方法做出来一份迭代\n\n1 iterator 接口\n回来已发个就是一个的接口就是\n\n\n\n\n\n\n","slug":"dailylearn","published":1,"updated":"2023-07-02T15:21:17.631Z","_id":"cli8nis870000gku39qip95xy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>if(a != null) 是不是一个对象<br>在方法里面定义的对象回放在内存栈里面的,但是堆就是运行产生的数据.<br>堆是对象.栈是变量,数据区就是静态变量,代码区就是代码的<br>2<br>3 生命周期<br>创建,使用,清理和回收.不用控制回收.就是析构函数,就是垃圾回收<br>没有引用访问就是垃圾了<br>4 发现就是无用对象,在合适的时间回收对象的内存,在回收的时候就是cpu空闲的时候或者是内存不够的时候<br>5 构造方法<br>初始化对象,特点就是和类名字一样.不用放回类型<br>为啥  就是new 就出现了一个对象在堆里面<br>重载就是为了适合不一样的函数.好用严格好点<br>6 void其实是不要出现void 因为返回的是void类型,就不是回构造方法了,不然就是全都是 默认构造 方法.<br>7 1 分配空间 2 显示初始化 3 构造 4 吧对象的引用返回<br>8 就是不用this 了比较好<br>就是直接里面的变量就好不管是不是就是public<br>9 this 在对当前对象的引用就是了<br>no  = n; 就是this.no = n;<br>但是就是如果变量是一样的化还是要this,好用一点,比较的严格好点.以后还是this好点<br>10 this this(“1 , “ton”);<br>就是调用其他的构造方法<br>11 方法的重载和静态变量<br>1 卡面的就是介绍不少的名字的方法但是好多不一样的形参<br>2 就是不要混乱了<br>3 其实还是要形参要不一样才是对 的<br>4 好处<br>就是好点不用多名字<br>public 就好了,不用其他的函数啥的<br>12 静态的成员和方法<br>对象共享的属性好点, 就是全部都市要static好点<br>直接访问就是了也是好点就是可以直接访问的,还是不管的是不是就可以改了.就是静态的对象要先有对象才可以访问<br>13 返回统计的个数<br>就是可以直接访问就好了.就可以看见个数好点了<br>public static int num;<br>if a(){num++;}<br>静态方法就是可以直接类访问还是</p>\n<p>14 对象才是可以访问的,直接就是要 金泰方法里面全要是静态的成员和方法的,也是可以普通方法访问的</p>\n<p>15 对象变量的传递<br>即使按照值来传递的<br>方法调用的时候还是<br>就是直接吧把值传递拷贝一下给另一个<br>交换的话还是就是交换,交换方法的时候对外面的交换的没有用</p>\n<p>16 引用对象的值,就是地址值就是按照对象的值传递引用只要这样的传递,没有其他的传递<br>就是指向的同一个对象就好了,就可以修改了<br>new 以后就不是一个地址了</p>\n<p>7 继承<br>内存  : 就是地址里面的指向<br>public : 全是<br>protected ;要是相同的包才可以调用的<br>private ; 在一个类里面</p>\n<p>两个包的话就是在b继承a里面的<br>default 就是只会在一个包里面被调用<br>方法重写<br>super 和final<br>子类里面再夫类里面的再写, 就是有相同的名字,参数也相同,返回类型要比父类的更小或者是= , 子类方法的访问权限里面要比父类更大的访问权限</p>\n<p>super 就是对自己父类的一个引用<br>final 顶一个一个常量的作用<br>再后面的变量 就是初始化以后就不能修改了<br>i 要先声明再赋值</p>\n<p>在里面的化就是i 还是不能修改的<br>在s里面也不能指代其他的对象<br>s里面就是可以给自己的对象里面的方法修改就好</p>\n<p>final 就是用来阻止一个类被继承或者是一个方法被重写的</p>\n<p>1 子类的构造方法<br>又必须调用父类的构造办法</p>\n<p>对象的转型<br>1 在父类里面 new (类名)  a;  就是把父类变子类</p>\n<p>##5/29<br>1 力扣 :如果代码里面就是0 做除数的化就会导致异常 ,以后要避免<br>2 广度优先搜索法</p>\n<p>##6/3<br>多态<br>1 java的多态, pet cry() cat dog();<br>2 对象的类型都是pet p0 和 p1 就是一个的方法具有动态的多态性,就是不同的方法加后面的不一样的方法重载就好了<br>3  就是载一个函数里面的不同的对象就是对应不一样的方法就是了<br>3 对象变量就是在栈里面.但是对象是在堆里面的<br>4 再添加一个宠物的话就是重写一个函数就是了<br>5 实际上就是再用的函数里面就是不用修改的</p>\n<p>抽象类和方法<br>1 在pet里面要不要实现 , 在父类里面就是不用实现的,毕竟就是没实际的,就是把共有的抽象放在父类里面就好了<br>2 没有实现的方法<br>3 在抽象方法里面的类就是抽象类<br>4  就是只加一个分号就好了.后面不要{}<br>5 就是为了实现多态<br>6 有抽象方法的类必须是抽象类<br>7 不能创建实例的,就是构造函数<br>8 就是被继承的<br>9 盖房子<br>10 就是在有抽象方法哟吼就是要在一个的类里面就是不同的<br>就要设置为抽象方法,变多态就好不少了<br>11 就在后面继承多几个方法就好了</p>\n<p>数组<br>1 int []  s = new int[];<br>就是数组了<br>2 数组能在对象里面创建一个对象数组<br>3 动态初始化<br>分陪空间,先分配空间,<br>4 静态初始化<br>int [] a = {1,2}<br>就是直接搞一个数组出来<br>5 分陪空间以后才可以用的<br>6 命令行的参数<br>7 equals() 数组不能改变大小的.就是i 赋值不一样改变数组的大小,二维数组,java 就是没而为数组的 ,其实就是数组的数组,就是多维数组,本质就是数组的数组<br>8 不同的行就是不同的长度</p>\n<p>接口<br>1 在有的接口里面iu是定义新的接口<br>2 属性是 public statiic final 类型<br>3 没构造方法<br>4 接口时规范不能使用的</p>\n<p>一个类可以实现多个接口<br>1 多继承的问题<br>2 java 就是不能一个类实现多个接口的<br>3  但是就是变量就是可以访问一个实现该接口的对象,也就是一个父类的指向对象是可以指向子类对象的<br>4  方法是不用实现的<br>5 在实现接口里面的类里面的全部抽象方法<br>6 一个类可实现多个接口 , 接口变量的可以实现调用实现接变量的对象</p>\n<p>接口的案例</p>\n<p>##6/6<br>java hashmap<br>实现了map clone 接口</p>\n<p>继承<br>1 只会继承非private 属性和方法<br>2 扩展<br>3 可以单继承但是可以多次继承</p>\n<p>关键字<br>extends implements<br>用implements 就变相的实现了Java有多继承的特性<br>super super super super super super<br>this. this<br>final 关键字  类不能被继承 方法不能被子类重写</p>\n<p>重写和重载<br>1 重写以后的话要是调用保证类型正确,自己的类调自己能调的类<br>2 instanceof instanceof 就是保证是不是一个类型<br>3<br>区别点    重载方法    重写方法<br>参数列表    必须修改    一定不能修改<br>返回类型    可以修改    一定不能修改<br>异常    可以修改    可以减少或删除，一定不能抛出新的或者更广的异常<br>访问    可以修改    一定不能做更严格的限制（可以降低限制</p>\n<p>多态<br>1 就是使用一个接口,按照不一样的实例对象给不一样的方法<br>2  消除类型里面的耦合 可替换性,可扩充性<br>3 继承和重写<br>4</p>\n<p>封装<br>1 把抽象函数接口封装下<br>举了例子<br>1 private 对属性 这样的话访问和修改全要用方法</p>\n<p>接口<br>1 可以多个方法<br>2 保存载java结尾的文件里面<br>3 名字要用接口名字<br>4 必须在匹配的目录结构里面</p>\n<p>1 不能实例化<br>2 没构造方法<br>3 必须全是抽象方法<br>4 没有成员变量<br>5 不是被继承,而是要被实现<br>6接口支持多继承</p>\n<p>特性<br>1 接口里面发方法会默认为public abstract<br>2 接口里面的变量会默认为public static final<br>3 在子类里面实现</p>\n<p>区别<br>1 接口里面的方法不能有方法体<br>2 接口里面只有public static final 类型的成员<br>3 接口里面不能有静态代码块和静态方法<br>但是抽象类里面可以<br>4 多继承和单继承</p>\n<p>interface leimin{<br>//<br>public static final  a = 10 ;<br>abstract getA();</p>\n<p>}</p>\n<p>接口的继承<br>1 一个接口只能继承一个接口<br>2 extends 关键字<br>3 接口里面的方法必须是public 的</p>\n<p>接口里的多继承是可以的<br>就是extends a,b{<br>}</p>\n<p>标记接口</p>\n<p>java枚举</p>\n<p>1 特殊的类<br>enum 关键字<br>2 enum  a{<br>red,green;<br>}<br>3 values()返回枚举类里面的所有的值<br>4 ordinal() 找到每一个枚举的索引 valueOf() 返回指定字符串的枚举量,没有就报错了<br>color[] arr = color.values();可以返回一个全部的对象了<br>5 枚举类里面的抽象方法实现要类里面的每一个对象都进行实现</p>\n<p>滑动窗口算法<br>1 找到就是单字符的返回里面的子串,子数组<br>2 满足一个连续的一个满足啥条件的字串,子序列,子数组<br>3 就是左右双指针,就是把右指针不断扩大满足条件的话<br>4 不是的话就是l再往右缩小窗口就是<br>5</p>\n<p>##6/7<br>HashMap就是一个<br>1 Hashmap&lt;Integer,String&gt;<br>HashMap&lt;key,value&gt; 里面的key和value类型可以不同也可以相同,可以是Integer 和 AString<br>Map&lt;String,String&gt; map = Map.of(“” ,”” ,””)<br>2 里面有好多有用的方法<br>1 添加键值对就是使用put方法就好了<br>2 删除元素我用remove(key)删除键值对<br>3 输出的话是之久额就是println(sites); 就好了<br>4 计算里面的数值对的大小用.size() 就好<br>5 迭代 ,foreach 就好了<br>for(Inter i: sites.keyset()){<br>// 就是俺key的大小排序就是了<br>}<br>for(String value: sites.values()){<br>// 就是按照values数组里面的迭代了<br>}</p>\n<p>3 方法<br>clear();<br>Clone();<br>isEmpty();<br>size();<br>put();<br>Putall();<br>remove();<br>containKey();<br>containValue();<br>replace():<br>get();<br>values();<br>foreach();;;</p>\n<p>##6/11<br>string 不可变的字符序列</p>\n<p>1 String  s = heool<br>s = s+ “world” 就是改写的是对象不是改变的对象的本身<br>2 new对象是放再堆里面的但是就是直接给出来的再数据去里面<br>3 s1 = sss<br>s2 =sss 里面就是同一个对象,也就是<br>4 也就是直接 string s = “是”<br>string s1 = new string(“是”)<br>就不是一个,一个再堆里面一个再数据区里面<br>5 在里面就是string方法就是放回的就是一些的对象<br>6 方法<br>chatat<br>length<br>indexof<br>equals<br>equalsgnorecase 就是忽略大小写<br>string 静态方法<br>里面就是返回一些的valueof() 就是把后面的基础数据类型转化变成前面的封装的类的对象<br>把形参转化变成后面的类型就是了</p>\n<p>##6/24<br>import java.util.Scanner;</p>\n<p>public class Main {</p>\n<pre><code>public static void main(String[] args) &#123;\n    Scanner in=new Scanner(System.in);\n\n    int n2=in.nextInt();\n    int n3=in.nextInt();\n    double n4=0;\n    //n4 = n2的算术平方根 + n3对数的自然对数\n    n4= Math.round(Math.sqrt(n2)+Math.log(n3));\n    double n1=Math.random() *21 + 2 ;\n    //random 就是生成一个再0 和1 直接的浮点数\n    //sqrt ,sqrt是算数平方根,而log 就是自然底数的对数\n    //Math.round()是四舍五入的意思\n\n    /* 请在这里填写答案 */\n    n1 = (int) n1;\n    System.out.println(n1);\n\n    //判断随机数n1是否为整数并且是2-23之间的数\n    if(n1==(int)n1&amp;&amp;n1&gt;=2&amp;&amp;n1&lt;=23)\n    &#123;\n        System.out.println(&quot;random&quot;);\n    &#125;\n    System.out.println(n4);\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>StringBUffer<br>1 就是可变的字符序列<br>2 线程安全的序列<br>append insert delete<br>追加,插入,删除<br>返回就是原来的对象的引用<br>就是内容变了</p>\n<p>3 buff.append(“?”) 就是添加以后了</p>\n<p>4 Wrapper<br>八个包装的类,就是引用的类<br>math类</p>\n<p>容器的概念<br>飞机大战里面的管理全部的对象里面<br>存放对象,特定方式获取对象,操作对象<br>对象的插入删除,自动完成容量的变化</p>\n<p>数组的话还是稍微有点就是ihui有点浪费<br>Java里面的用于管理对象集合的类<br>collection  set list quene<br>map 接口 就是一些数据对在里面<br>iterator 就是一些数据的集合<br>1 LIst 就是按照对象进入的顺序<br>2 集合 对象唯一不会重复<br>3 队列, 按照排队规则确定对象的顺序<br>map<br>一些成对的键-值 表<br>就是一个对象可以查到其他的对象就是map 了</p>\n<p>collection 接口<br>add  remove contains addAll removALL<br>containAll<br>toArray 就是变成一份数组<br>clear size</p>\n<p>//定义一个集合就是为了以后就是可以好修改代码毕竟就是以后的话,Collection c = new Arraylist<br>然后就是后面的代码就是可以不用直接改变,后面的话就比较好修改欠面,比如就是后面忽然发现就是好像哈希表比链表好用的话就是</p>\n<p>list接口的实现类<br>特点就是可以变长的对象数组<br>vectoer是线程安全的,是同步的运行效率低</p>\n<p>栈和队列<br>Stack<br>push pop peek获得但是不删除<br>empty<br>queue 队列<br>offer入队<br>peek,element<br>peek 是不会抛出异常的,但是emement 就是会有异常<br>主要实现类就是linklist<br>还实现了deque接口</p>\n<p>set接口就是collection 就是子接口,没额外的方法<br>也就是collection行为不同就是<br>1 set 接口类的特点就是元素没有顺序<br>2 hashcode就是根据哈希值查找对象位置<br>3 方便查找建立索引就是了<br>4 对每一个元素都可以很快找到有没有这个元素就好了<br>5 快速找到表里面是不是又这样一个元素</p>\n<p>hashcode方法就是为了提高检索的效率<br>equals 为true是hashcode的充足条件<br>1<br>map接口<br>1 存的就是键值对<br>2 hashmap treemap 键值对就是唯一的键<br>3 containkey 就是有没有包含键值对<br>4</p>\n<p>迭代器<br>不关心容器的类型然后就是统一的方法做出来一份迭代</p>\n<p>1 iterator 接口<br>回来已发个就是一个的接口就是</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<p>if(a != null) 是不是一个对象<br>在方法里面定义的对象回放在内存栈里面的,但是堆就是运行产生的数据.<br>堆是对象.栈是变量,数据区就是静态变量,代码区就是代码的<br>2<br>3 生命周期<br>创建,使用,清理和回收.不用控制回收.就是析构函数,就是垃圾回收<br>没有引用访问就是垃圾了<br>4 发现就是无用对象,在合适的时间回收对象的内存,在回收的时候就是cpu空闲的时候或者是内存不够的时候<br>5 构造方法<br>初始化对象,特点就是和类名字一样.不用放回类型<br>为啥  就是new 就出现了一个对象在堆里面<br>重载就是为了适合不一样的函数.好用严格好点<br>6 void其实是不要出现void 因为返回的是void类型,就不是回构造方法了,不然就是全都是 默认构造 方法.<br>7 1 分配空间 2 显示初始化 3 构造 4 吧对象的引用返回<br>8 就是不用this 了比较好<br>就是直接里面的变量就好不管是不是就是public<br>9 this 在对当前对象的引用就是了<br>no  = n; 就是this.no = n;<br>但是就是如果变量是一样的化还是要this,好用一点,比较的严格好点.以后还是this好点<br>10 this this(“1 , “ton”);<br>就是调用其他的构造方法<br>11 方法的重载和静态变量<br>1 卡面的就是介绍不少的名字的方法但是好多不一样的形参<br>2 就是不要混乱了<br>3 其实还是要形参要不一样才是对 的<br>4 好处<br>就是好点不用多名字<br>public 就好了,不用其他的函数啥的<br>12 静态的成员和方法<br>对象共享的属性好点, 就是全部都市要static好点<br>直接访问就是了也是好点就是可以直接访问的,还是不管的是不是就可以改了.就是静态的对象要先有对象才可以访问<br>13 返回统计的个数<br>就是可以直接访问就好了.就可以看见个数好点了<br>public static int num;<br>if a(){num++;}<br>静态方法就是可以直接类访问还是</p>\n<p>14 对象才是可以访问的,直接就是要 金泰方法里面全要是静态的成员和方法的,也是可以普通方法访问的</p>\n<p>15 对象变量的传递<br>即使按照值来传递的<br>方法调用的时候还是<br>就是直接吧把值传递拷贝一下给另一个<br>交换的话还是就是交换,交换方法的时候对外面的交换的没有用</p>\n<p>16 引用对象的值,就是地址值就是按照对象的值传递引用只要这样的传递,没有其他的传递<br>就是指向的同一个对象就好了,就可以修改了<br>new 以后就不是一个地址了</p>\n<p>7 继承<br>内存  : 就是地址里面的指向<br>public : 全是<br>protected ;要是相同的包才可以调用的<br>private ; 在一个类里面</p>\n<p>两个包的话就是在b继承a里面的<br>default 就是只会在一个包里面被调用<br>方法重写<br>super 和final<br>子类里面再夫类里面的再写, 就是有相同的名字,参数也相同,返回类型要比父类的更小或者是= , 子类方法的访问权限里面要比父类更大的访问权限</p>\n<p>super 就是对自己父类的一个引用<br>final 顶一个一个常量的作用<br>再后面的变量 就是初始化以后就不能修改了<br>i 要先声明再赋值</p>\n<p>在里面的化就是i 还是不能修改的<br>在s里面也不能指代其他的对象<br>s里面就是可以给自己的对象里面的方法修改就好</p>\n<p>final 就是用来阻止一个类被继承或者是一个方法被重写的</p>\n<p>1 子类的构造方法<br>又必须调用父类的构造办法</p>\n<p>对象的转型<br>1 在父类里面 new (类名)  a;  就是把父类变子类</p>\n<p>##5/29<br>1 力扣 :如果代码里面就是0 做除数的化就会导致异常 ,以后要避免<br>2 广度优先搜索法</p>\n<p>##6/3<br>多态<br>1 java的多态, pet cry() cat dog();<br>2 对象的类型都是pet p0 和 p1 就是一个的方法具有动态的多态性,就是不同的方法加后面的不一样的方法重载就好了<br>3  就是载一个函数里面的不同的对象就是对应不一样的方法就是了<br>3 对象变量就是在栈里面.但是对象是在堆里面的<br>4 再添加一个宠物的话就是重写一个函数就是了<br>5 实际上就是再用的函数里面就是不用修改的</p>\n<p>抽象类和方法<br>1 在pet里面要不要实现 , 在父类里面就是不用实现的,毕竟就是没实际的,就是把共有的抽象放在父类里面就好了<br>2 没有实现的方法<br>3 在抽象方法里面的类就是抽象类<br>4  就是只加一个分号就好了.后面不要{}<br>5 就是为了实现多态<br>6 有抽象方法的类必须是抽象类<br>7 不能创建实例的,就是构造函数<br>8 就是被继承的<br>9 盖房子<br>10 就是在有抽象方法哟吼就是要在一个的类里面就是不同的<br>就要设置为抽象方法,变多态就好不少了<br>11 就在后面继承多几个方法就好了</p>\n<p>数组<br>1 int []  s = new int[];<br>就是数组了<br>2 数组能在对象里面创建一个对象数组<br>3 动态初始化<br>分陪空间,先分配空间,<br>4 静态初始化<br>int [] a = {1,2}<br>就是直接搞一个数组出来<br>5 分陪空间以后才可以用的<br>6 命令行的参数<br>7 equals() 数组不能改变大小的.就是i 赋值不一样改变数组的大小,二维数组,java 就是没而为数组的 ,其实就是数组的数组,就是多维数组,本质就是数组的数组<br>8 不同的行就是不同的长度</p>\n<p>接口<br>1 在有的接口里面iu是定义新的接口<br>2 属性是 public statiic final 类型<br>3 没构造方法<br>4 接口时规范不能使用的</p>\n<p>一个类可以实现多个接口<br>1 多继承的问题<br>2 java 就是不能一个类实现多个接口的<br>3  但是就是变量就是可以访问一个实现该接口的对象,也就是一个父类的指向对象是可以指向子类对象的<br>4  方法是不用实现的<br>5 在实现接口里面的类里面的全部抽象方法<br>6 一个类可实现多个接口 , 接口变量的可以实现调用实现接变量的对象</p>\n<p>接口的案例</p>\n<p>##6/6<br>java hashmap<br>实现了map clone 接口</p>\n<p>继承<br>1 只会继承非private 属性和方法<br>2 扩展<br>3 可以单继承但是可以多次继承</p>\n<p>关键字<br>extends implements<br>用implements 就变相的实现了Java有多继承的特性<br>super super super super super super<br>this. this<br>final 关键字  类不能被继承 方法不能被子类重写</p>\n<p>重写和重载<br>1 重写以后的话要是调用保证类型正确,自己的类调自己能调的类<br>2 instanceof instanceof 就是保证是不是一个类型<br>3<br>区别点    重载方法    重写方法<br>参数列表    必须修改    一定不能修改<br>返回类型    可以修改    一定不能修改<br>异常    可以修改    可以减少或删除，一定不能抛出新的或者更广的异常<br>访问    可以修改    一定不能做更严格的限制（可以降低限制</p>\n<p>多态<br>1 就是使用一个接口,按照不一样的实例对象给不一样的方法<br>2  消除类型里面的耦合 可替换性,可扩充性<br>3 继承和重写<br>4</p>\n<p>封装<br>1 把抽象函数接口封装下<br>举了例子<br>1 private 对属性 这样的话访问和修改全要用方法</p>\n<p>接口<br>1 可以多个方法<br>2 保存载java结尾的文件里面<br>3 名字要用接口名字<br>4 必须在匹配的目录结构里面</p>\n<p>1 不能实例化<br>2 没构造方法<br>3 必须全是抽象方法<br>4 没有成员变量<br>5 不是被继承,而是要被实现<br>6接口支持多继承</p>\n<p>特性<br>1 接口里面发方法会默认为public abstract<br>2 接口里面的变量会默认为public static final<br>3 在子类里面实现</p>\n<p>区别<br>1 接口里面的方法不能有方法体<br>2 接口里面只有public static final 类型的成员<br>3 接口里面不能有静态代码块和静态方法<br>但是抽象类里面可以<br>4 多继承和单继承</p>\n<p>interface leimin{<br>//<br>public static final  a = 10 ;<br>abstract getA();</p>\n<p>}</p>\n<p>接口的继承<br>1 一个接口只能继承一个接口<br>2 extends 关键字<br>3 接口里面的方法必须是public 的</p>\n<p>接口里的多继承是可以的<br>就是extends a,b{<br>}</p>\n<p>标记接口</p>\n<p>java枚举</p>\n<p>1 特殊的类<br>enum 关键字<br>2 enum  a{<br>red,green;<br>}<br>3 values()返回枚举类里面的所有的值<br>4 ordinal() 找到每一个枚举的索引 valueOf() 返回指定字符串的枚举量,没有就报错了<br>color[] arr = color.values();可以返回一个全部的对象了<br>5 枚举类里面的抽象方法实现要类里面的每一个对象都进行实现</p>\n<p>滑动窗口算法<br>1 找到就是单字符的返回里面的子串,子数组<br>2 满足一个连续的一个满足啥条件的字串,子序列,子数组<br>3 就是左右双指针,就是把右指针不断扩大满足条件的话<br>4 不是的话就是l再往右缩小窗口就是<br>5</p>\n<p>##6/7<br>HashMap就是一个<br>1 Hashmap&lt;Integer,String&gt;<br>HashMap&lt;key,value&gt; 里面的key和value类型可以不同也可以相同,可以是Integer 和 AString<br>Map&lt;String,String&gt; map = Map.of(“” ,”” ,””)<br>2 里面有好多有用的方法<br>1 添加键值对就是使用put方法就好了<br>2 删除元素我用remove(key)删除键值对<br>3 输出的话是之久额就是println(sites); 就好了<br>4 计算里面的数值对的大小用.size() 就好<br>5 迭代 ,foreach 就好了<br>for(Inter i: sites.keyset()){<br>// 就是俺key的大小排序就是了<br>}<br>for(String value: sites.values()){<br>// 就是按照values数组里面的迭代了<br>}</p>\n<p>3 方法<br>clear();<br>Clone();<br>isEmpty();<br>size();<br>put();<br>Putall();<br>remove();<br>containKey();<br>containValue();<br>replace():<br>get();<br>values();<br>foreach();;;</p>\n<p>##6/11<br>string 不可变的字符序列</p>\n<p>1 String  s = heool<br>s = s+ “world” 就是改写的是对象不是改变的对象的本身<br>2 new对象是放再堆里面的但是就是直接给出来的再数据去里面<br>3 s1 = sss<br>s2 =sss 里面就是同一个对象,也就是<br>4 也就是直接 string s = “是”<br>string s1 = new string(“是”)<br>就不是一个,一个再堆里面一个再数据区里面<br>5 在里面就是string方法就是放回的就是一些的对象<br>6 方法<br>chatat<br>length<br>indexof<br>equals<br>equalsgnorecase 就是忽略大小写<br>string 静态方法<br>里面就是返回一些的valueof() 就是把后面的基础数据类型转化变成前面的封装的类的对象<br>把形参转化变成后面的类型就是了</p>\n<p>##6/24<br>import java.util.Scanner;</p>\n<p>public class Main {</p>\n<pre><code>public static void main(String[] args) &#123;\n    Scanner in=new Scanner(System.in);\n\n    int n2=in.nextInt();\n    int n3=in.nextInt();\n    double n4=0;\n    //n4 = n2的算术平方根 + n3对数的自然对数\n    n4= Math.round(Math.sqrt(n2)+Math.log(n3));\n    double n1=Math.random() *21 + 2 ;\n    //random 就是生成一个再0 和1 直接的浮点数\n    //sqrt ,sqrt是算数平方根,而log 就是自然底数的对数\n    //Math.round()是四舍五入的意思\n\n    /* 请在这里填写答案 */\n    n1 = (int) n1;\n    System.out.println(n1);\n\n    //判断随机数n1是否为整数并且是2-23之间的数\n    if(n1==(int)n1&amp;&amp;n1&gt;=2&amp;&amp;n1&lt;=23)\n    &#123;\n        System.out.println(&quot;random&quot;);\n    &#125;\n    System.out.println(n4);\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>StringBUffer<br>1 就是可变的字符序列<br>2 线程安全的序列<br>append insert delete<br>追加,插入,删除<br>返回就是原来的对象的引用<br>就是内容变了</p>\n<p>3 buff.append(“?”) 就是添加以后了</p>\n<p>4 Wrapper<br>八个包装的类,就是引用的类<br>math类</p>\n<p>容器的概念<br>飞机大战里面的管理全部的对象里面<br>存放对象,特定方式获取对象,操作对象<br>对象的插入删除,自动完成容量的变化</p>\n<p>数组的话还是稍微有点就是ihui有点浪费<br>Java里面的用于管理对象集合的类<br>collection  set list quene<br>map 接口 就是一些数据对在里面<br>iterator 就是一些数据的集合<br>1 LIst 就是按照对象进入的顺序<br>2 集合 对象唯一不会重复<br>3 队列, 按照排队规则确定对象的顺序<br>map<br>一些成对的键-值 表<br>就是一个对象可以查到其他的对象就是map 了</p>\n<p>collection 接口<br>add  remove contains addAll removALL<br>containAll<br>toArray 就是变成一份数组<br>clear size</p>\n<p>//定义一个集合就是为了以后就是可以好修改代码毕竟就是以后的话,Collection c = new Arraylist<br>然后就是后面的代码就是可以不用直接改变,后面的话就比较好修改欠面,比如就是后面忽然发现就是好像哈希表比链表好用的话就是</p>\n<p>list接口的实现类<br>特点就是可以变长的对象数组<br>vectoer是线程安全的,是同步的运行效率低</p>\n<p>栈和队列<br>Stack<br>push pop peek获得但是不删除<br>empty<br>queue 队列<br>offer入队<br>peek,element<br>peek 是不会抛出异常的,但是emement 就是会有异常<br>主要实现类就是linklist<br>还实现了deque接口</p>\n<p>set接口就是collection 就是子接口,没额外的方法<br>也就是collection行为不同就是<br>1 set 接口类的特点就是元素没有顺序<br>2 hashcode就是根据哈希值查找对象位置<br>3 方便查找建立索引就是了<br>4 对每一个元素都可以很快找到有没有这个元素就好了<br>5 快速找到表里面是不是又这样一个元素</p>\n<p>hashcode方法就是为了提高检索的效率<br>equals 为true是hashcode的充足条件<br>1<br>map接口<br>1 存的就是键值对<br>2 hashmap treemap 键值对就是唯一的键<br>3 containkey 就是有没有包含键值对<br>4</p>\n<p>迭代器<br>不关心容器的类型然后就是统一的方法做出来一份迭代</p>\n<p>1 iterator 接口<br>回来已发个就是一个的接口就是</p>\n"},{"title":"forLove","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-06-09T02:01:18.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"\n# 6/9\n又吵架了.但是还是一点点就是无厘头的吵架,你本来就不该吵架的\n不知道哪里来的情绪,你在干嘛 ,全是在做着一些什么事,\n还真是崽种说实话,为什么连就是这一点点都没办法控制\n还是说就是你就是那么的贱,有些事,还是要忍耐的,要有耐心\n\n\n# 6/11\n不晓得为啥还是想说说话,忽然就觉得还是很好的一个人,一直都懵懵懂懂的看不见,\n到底是看不见还是潜意识里面故意看不见\n你就是在躲避,害怕你会犯错,实话说还是咋稍微的少点,我对你的爱其实还是不及你对我的爱的,\n我感觉到了,还是媳妇压力或者还是啥的大一点也好,确实还是要体谅一点\n\n\n\n6/20 java arraylist 数组表\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\n\n//\nclass Main{\npublic static void main(String[] args){\nArrayList<Integer>  list = new ArrayList<>();\nlist.add(1);\nlist.add(1);\nlist.add(1);\nSystem.out.println(list.get(0));//get jiushi huoqu\nlist.set(2,4);\nSystem.out.println(list.get(2));\n// 输出list1\nSystem.out.println(list.get(1));\n// 也就是说链表是不能超出界限的\n// 但是数组是可以的\n// 但是数组的长度是固定的\n//删除元素\nlist.remove(1);\nSystem.out.println(list.get(1));\nSystem.out.println(list);//这就是删除了还是可以输出1为啥\n// 因为这个list是一个对象\n// 但是这个对象里面的元素已经被删除了'\n// 但是这个对象还是存在的\n// 所以输出的时候还是会输出这个对象\nSystem.out.println(list.size());\n//迭代list\nfor (int i = 0; i < list.size(); i++) {\nSystem.out.println(list.get(i));\n}\nSystem.out.println(\"迭代器\");\nfor ( int a   :list\n) {\nSystem.out.println(a);\n}\n//ArrayList的泛型只能是引用类型\n// 不能是基本类型\nArrayList<Integer> a = new ArrayList<Integer>();\n//必须是Interger Byte Short Long Float Double Boolean Character\n// 不能是int byte short long float double boolean char\n\n\n        //排序\n        Collections.sort(list);\n        // 就是先引入Collections这个包\n        // 然后调用sort方法\n        // 就可以对list进行排序了\n        // 但是这个排序只能是对引用类型的排序\n        // 不能是基本类型的\n        // 不能是基本类型\n        list.indexOf(4);\n        System.out.println(list.indexOf(4));\n\n\n    }\n\n}\n\nlinklist 链表\nimport java.util.LinkedList;\n\nclass Main\n{\npublic static void main(String[] args) {\n//Linkedlist\n/*\n就是简单的一个线性表,但是每一个的表包含脸个值\n和arraylist比起来的话,linkedlist的增加删除的效率高点,儿查找找和修改稍微低点\n\n         */\n        //下面就是使用LinkedLIst好点\n        // 1 在开头添加元素\n        LinkedList<Integer> list = new LinkedList<>();\n        list.addFirst(22);\n        // 2 mowei\n        // 3 huoqu kaitou yuansu \n        list.addLast(33);\n        System.out.println(list.get(1));\n    }\n}","source":"_posts/forLove.md","raw":"---\ntitle: forLove\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-06-09 10:01:18\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n\n# 6/9\n又吵架了.但是还是一点点就是无厘头的吵架,你本来就不该吵架的\n不知道哪里来的情绪,你在干嘛 ,全是在做着一些什么事,\n还真是崽种说实话,为什么连就是这一点点都没办法控制\n还是说就是你就是那么的贱,有些事,还是要忍耐的,要有耐心\n\n\n# 6/11\n不晓得为啥还是想说说话,忽然就觉得还是很好的一个人,一直都懵懵懂懂的看不见,\n到底是看不见还是潜意识里面故意看不见\n你就是在躲避,害怕你会犯错,实话说还是咋稍微的少点,我对你的爱其实还是不及你对我的爱的,\n我感觉到了,还是媳妇压力或者还是啥的大一点也好,确实还是要体谅一点\n\n\n\n6/20 java arraylist 数组表\n\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\n\n//\nclass Main{\npublic static void main(String[] args){\nArrayList<Integer>  list = new ArrayList<>();\nlist.add(1);\nlist.add(1);\nlist.add(1);\nSystem.out.println(list.get(0));//get jiushi huoqu\nlist.set(2,4);\nSystem.out.println(list.get(2));\n// 输出list1\nSystem.out.println(list.get(1));\n// 也就是说链表是不能超出界限的\n// 但是数组是可以的\n// 但是数组的长度是固定的\n//删除元素\nlist.remove(1);\nSystem.out.println(list.get(1));\nSystem.out.println(list);//这就是删除了还是可以输出1为啥\n// 因为这个list是一个对象\n// 但是这个对象里面的元素已经被删除了'\n// 但是这个对象还是存在的\n// 所以输出的时候还是会输出这个对象\nSystem.out.println(list.size());\n//迭代list\nfor (int i = 0; i < list.size(); i++) {\nSystem.out.println(list.get(i));\n}\nSystem.out.println(\"迭代器\");\nfor ( int a   :list\n) {\nSystem.out.println(a);\n}\n//ArrayList的泛型只能是引用类型\n// 不能是基本类型\nArrayList<Integer> a = new ArrayList<Integer>();\n//必须是Interger Byte Short Long Float Double Boolean Character\n// 不能是int byte short long float double boolean char\n\n\n        //排序\n        Collections.sort(list);\n        // 就是先引入Collections这个包\n        // 然后调用sort方法\n        // 就可以对list进行排序了\n        // 但是这个排序只能是对引用类型的排序\n        // 不能是基本类型的\n        // 不能是基本类型\n        list.indexOf(4);\n        System.out.println(list.indexOf(4));\n\n\n    }\n\n}\n\nlinklist 链表\nimport java.util.LinkedList;\n\nclass Main\n{\npublic static void main(String[] args) {\n//Linkedlist\n/*\n就是简单的一个线性表,但是每一个的表包含脸个值\n和arraylist比起来的话,linkedlist的增加删除的效率高点,儿查找找和修改稍微低点\n\n         */\n        //下面就是使用LinkedLIst好点\n        // 1 在开头添加元素\n        LinkedList<Integer> list = new LinkedList<>();\n        list.addFirst(22);\n        // 2 mowei\n        // 3 huoqu kaitou yuansu \n        list.addLast(33);\n        System.out.println(list.get(1));\n    }\n}","slug":"forLove","published":1,"updated":"2023-06-20T15:56:01.795Z","_id":"clis6bt7y0000mcu38rc17rwi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"6-9\"><a href=\"#6-9\" class=\"headerlink\" title=\"6/9\"></a>6/9</h1><p>又吵架了.但是还是一点点就是无厘头的吵架,你本来就不该吵架的<br>不知道哪里来的情绪,你在干嘛 ,全是在做着一些什么事,<br>还真是崽种说实话,为什么连就是这一点点都没办法控制<br>还是说就是你就是那么的贱,有些事,还是要忍耐的,要有耐心</p>\n<h1 id=\"6-11\"><a href=\"#6-11\" class=\"headerlink\" title=\"6/11\"></a>6/11</h1><p>不晓得为啥还是想说说话,忽然就觉得还是很好的一个人,一直都懵懵懂懂的看不见,<br>到底是看不见还是潜意识里面故意看不见<br>你就是在躲避,害怕你会犯错,实话说还是咋稍微的少点,我对你的爱其实还是不及你对我的爱的,<br>我感觉到了,还是媳妇压力或者还是啥的大一点也好,确实还是要体谅一点</p>\n<p>6/20 java arraylist 数组表</p>\n<p>import java.lang.reflect.Array;<br>import java.util.ArrayList;<br>import java.util.Collection;<br>import java.util.Collections;</p>\n<p>//<br>class Main{<br>public static void main(String[] args){<br>ArrayList<Integer>  list = new ArrayList&lt;&gt;();<br>list.add(1);<br>list.add(1);<br>list.add(1);<br>System.out.println(list.get(0));//get jiushi huoqu<br>list.set(2,4);<br>System.out.println(list.get(2));<br>// 输出list1<br>System.out.println(list.get(1));<br>// 也就是说链表是不能超出界限的<br>// 但是数组是可以的<br>// 但是数组的长度是固定的<br>//删除元素<br>list.remove(1);<br>System.out.println(list.get(1));<br>System.out.println(list);//这就是删除了还是可以输出1为啥<br>// 因为这个list是一个对象<br>// 但是这个对象里面的元素已经被删除了’<br>// 但是这个对象还是存在的<br>// 所以输出的时候还是会输出这个对象<br>System.out.println(list.size());<br>//迭代list<br>for (int i = 0; i &lt; list.size(); i++) {<br>System.out.println(list.get(i));<br>}<br>System.out.println(“迭代器”);<br>for ( int a   :list<br>) {<br>System.out.println(a);<br>}<br>//ArrayList的泛型只能是引用类型<br>// 不能是基本类型<br>ArrayList<Integer> a = new ArrayList<Integer>();<br>//必须是Interger Byte Short Long Float Double Boolean Character<br>// 不能是int byte short long float double boolean char</p>\n<pre><code>    //排序\n    Collections.sort(list);\n    // 就是先引入Collections这个包\n    // 然后调用sort方法\n    // 就可以对list进行排序了\n    // 但是这个排序只能是对引用类型的排序\n    // 不能是基本类型的\n    // 不能是基本类型\n    list.indexOf(4);\n    System.out.println(list.indexOf(4));\n\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>linklist 链表<br>import java.util.LinkedList;</p>\n<p>class Main<br>{<br>public static void main(String[] args) {<br>//Linkedlist<br>/*<br>就是简单的一个线性表,但是每一个的表包含脸个值<br>和arraylist比起来的话,linkedlist的增加删除的效率高点,儿查找找和修改稍微低点</p>\n<pre><code>     */\n    //下面就是使用LinkedLIst好点\n    // 1 在开头添加元素\n    LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();\n    list.addFirst(22);\n    // 2 mowei\n    // 3 huoqu kaitou yuansu \n    list.addLast(33);\n    System.out.println(list.get(1));\n&#125;\n</code></pre>\n<p>}</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"6-9\"><a href=\"#6-9\" class=\"headerlink\" title=\"6/9\"></a>6/9</h1><p>又吵架了.但是还是一点点就是无厘头的吵架,你本来就不该吵架的<br>不知道哪里来的情绪,你在干嘛 ,全是在做着一些什么事,<br>还真是崽种说实话,为什么连就是这一点点都没办法控制<br>还是说就是你就是那么的贱,有些事,还是要忍耐的,要有耐心</p>\n<h1 id=\"6-11\"><a href=\"#6-11\" class=\"headerlink\" title=\"6/11\"></a>6/11</h1><p>不晓得为啥还是想说说话,忽然就觉得还是很好的一个人,一直都懵懵懂懂的看不见,<br>到底是看不见还是潜意识里面故意看不见<br>你就是在躲避,害怕你会犯错,实话说还是咋稍微的少点,我对你的爱其实还是不及你对我的爱的,<br>我感觉到了,还是媳妇压力或者还是啥的大一点也好,确实还是要体谅一点</p>\n<p>6/20 java arraylist 数组表</p>\n<p>import java.lang.reflect.Array;<br>import java.util.ArrayList;<br>import java.util.Collection;<br>import java.util.Collections;</p>\n<p>//<br>class Main{<br>public static void main(String[] args){<br>ArrayList<Integer>  list = new ArrayList&lt;&gt;();<br>list.add(1);<br>list.add(1);<br>list.add(1);<br>System.out.println(list.get(0));//get jiushi huoqu<br>list.set(2,4);<br>System.out.println(list.get(2));<br>// 输出list1<br>System.out.println(list.get(1));<br>// 也就是说链表是不能超出界限的<br>// 但是数组是可以的<br>// 但是数组的长度是固定的<br>//删除元素<br>list.remove(1);<br>System.out.println(list.get(1));<br>System.out.println(list);//这就是删除了还是可以输出1为啥<br>// 因为这个list是一个对象<br>// 但是这个对象里面的元素已经被删除了’<br>// 但是这个对象还是存在的<br>// 所以输出的时候还是会输出这个对象<br>System.out.println(list.size());<br>//迭代list<br>for (int i = 0; i &lt; list.size(); i++) {<br>System.out.println(list.get(i));<br>}<br>System.out.println(“迭代器”);<br>for ( int a   :list<br>) {<br>System.out.println(a);<br>}<br>//ArrayList的泛型只能是引用类型<br>// 不能是基本类型<br>ArrayList<Integer> a = new ArrayList<Integer>();<br>//必须是Interger Byte Short Long Float Double Boolean Character<br>// 不能是int byte short long float double boolean char</p>\n<pre><code>    //排序\n    Collections.sort(list);\n    // 就是先引入Collections这个包\n    // 然后调用sort方法\n    // 就可以对list进行排序了\n    // 但是这个排序只能是对引用类型的排序\n    // 不能是基本类型的\n    // 不能是基本类型\n    list.indexOf(4);\n    System.out.println(list.indexOf(4));\n\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>linklist 链表<br>import java.util.LinkedList;</p>\n<p>class Main<br>{<br>public static void main(String[] args) {<br>//Linkedlist<br>/*<br>就是简单的一个线性表,但是每一个的表包含脸个值<br>和arraylist比起来的话,linkedlist的增加删除的效率高点,儿查找找和修改稍微低点</p>\n<pre><code>     */\n    //下面就是使用LinkedLIst好点\n    // 1 在开头添加元素\n    LinkedList&lt;Integer&gt; list = new LinkedList&lt;&gt;();\n    list.addFirst(22);\n    // 2 mowei\n    // 3 huoqu kaitou yuansu \n    list.addLast(33);\n    System.out.println(list.get(1));\n&#125;\n</code></pre>\n<p>}</p>\n"},{"title":"dailylearn","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-05-29T09:31:56.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"\n## 红黑树\n\n1. 根节点是黑色不存数据的黑色空节点。\n2. 相邻的节点是不能同时为红色。\n3. 任何到其他的叶子节点之间包含相同数量的黑色节点。\n4. 也是可以吧黑色省略掉。\n   在树上的高度为logn。\n\n对于有频繁插入删除查找就着红黑树。\n\n## 搜索\n2.1. 一个一个搜索会比较慢，实际上就是比较的慢。\n2. 二分查找，排序以后就是在找中间就好了，设置两指针就好了，然后比较中间的 `middle`，看情况就把左右的指针等于 `middle`，一直到 `left = right`。\n3. 但是里面的插入操作比较难。\n4. 二分搜索树，任何一个节点里面的左子树小于根节点，右面的全大于根节点，实现方法。\n```","source":"_posts/RedandBlackTree.md","raw":"---\ntitle: dailylearn\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-05-29 17:31:56\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n\n## 红黑树\n\n1. 根节点是黑色不存数据的黑色空节点。\n2. 相邻的节点是不能同时为红色。\n3. 任何到其他的叶子节点之间包含相同数量的黑色节点。\n4. 也是可以吧黑色省略掉。\n   在树上的高度为logn。\n\n对于有频繁插入删除查找就着红黑树。\n\n## 搜索\n2.1. 一个一个搜索会比较慢，实际上就是比较的慢。\n2. 二分查找，排序以后就是在找中间就好了，设置两指针就好了，然后比较中间的 `middle`，看情况就把左右的指针等于 `middle`，一直到 `left = right`。\n3. 但是里面的插入操作比较难。\n4. 二分搜索树，任何一个节点里面的左子树小于根节点，右面的全大于根节点，实现方法。\n```","slug":"RedandBlackTree","published":1,"updated":"2023-07-02T15:04:14.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljmdevch000054u39qho80rm","content":"<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><ol>\n<li>根节点是黑色不存数据的黑色空节点。</li>\n<li>相邻的节点是不能同时为红色。</li>\n<li>任何到其他的叶子节点之间包含相同数量的黑色节点。</li>\n<li>也是可以吧黑色省略掉。<br>在树上的高度为logn。</li>\n</ol>\n<p>对于有频繁插入删除查找就着红黑树。</p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>2.1. 一个一个搜索会比较慢，实际上就是比较的慢。<br>2. 二分查找，排序以后就是在找中间就好了，设置两指针就好了，然后比较中间的 <code>middle</code>，看情况就把左右的指针等于 <code>middle</code>，一直到 <code>left = right</code>。<br>3. 但是里面的插入操作比较难。<br>4. 二分搜索树，任何一个节点里面的左子树小于根节点，右面的全大于根节点，实现方法。<br>```</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><ol>\n<li>根节点是黑色不存数据的黑色空节点。</li>\n<li>相邻的节点是不能同时为红色。</li>\n<li>任何到其他的叶子节点之间包含相同数量的黑色节点。</li>\n<li>也是可以吧黑色省略掉。<br>在树上的高度为logn。</li>\n</ol>\n<p>对于有频繁插入删除查找就着红黑树。</p>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><p>2.1. 一个一个搜索会比较慢，实际上就是比较的慢。<br>2. 二分查找，排序以后就是在找中间就好了，设置两指针就好了，然后比较中间的 <code>middle</code>，看情况就把左右的指针等于 <code>middle</code>，一直到 <code>left = right</code>。<br>3. 但是里面的插入操作比较难。<br>4. 二分搜索树，任何一个节点里面的左子树小于根节点，右面的全大于根节点，实现方法。<br>```</p>\n"},{"title":"JavaLiu","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-07-04T09:29:15.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"#  Java 流(Stream)、文件(File)和IO\n\n## 1. 流的概念\nJava.io包含了所有操作输入,输出需要的类,这些流类代表了输入和输出目标\nJava包中的流支持很多格式,比如基本类型,对象,本地化字符集等等\n一个流就是一个数据的序列,输入流就是表示从一个源读取数据,输出流就是表示向一个目标写数据\n\n## 2. 读写控制台输入\nJava输入就是System.in完成\n\n代码段\n```java\n我们可以吧System.in包装再一个BufferedReader对象来创建一个字符流\nBufferedReader br = new Burreredreader(new InputStreamReader(System.in));\n\nBufferedReader br = new BufferedReader(new System.in);\nString str = br.readLine();\nBufferedReader br = new BufferedReader(new System.in);\n\n```\n## 3. 控制台输出\n输出print和println,这些方法都是由PrintStream定义,System.out就是该类对象的引用\nPrintStream继承了OutputStream类,还实现了方法write方法,这样的话write就也可以控制输出还是输出了\nvoid write(int byteval)\n\n```angular2html\n        int b;\n        b = 'A';\n        System.out.write(b);\n```\nwrite不常用还是print好用一点\nJDK5 以后的话可以使用 **Java Scanner**类控制输入\n\n## 4.读写文件\nJava.io.File类代表了文件和目录路径名的抽象表示,主要用于文件和目录的创建,查找和删除等操作\nFile类的对象代表了磁盘上的实际存在的文件和目录\n\n### 4.1 io流\n    4.1.1 字符流\n    4.1.1.1 Reader\n    4.1.1.2 Writer\n    4.1.2 字节流\n    4.1.2.1 InputStream\n    4.1.2.2 OutputStream\n### 4.2 文件流 \n   #### 4.2.1 读取文件 FileInputStream\n   ```\n   InputStream f = new File(\"a.txt\");\n   // or \n   File f = new File(\"a.txt\");\n   InputStream in = new FileInputStream(f);\n   // 创建了FileInputStream对象以后就可以使用下面的方法读取流或者进行其他流的操作\n   public void close() throws IOException()\n   //关闭文件输入流释放流有关是系统资源\n   protected void finalize() throws IOException{}\n   //清除该文件的链接.确保不会引用文件输入流是调用的close方法,抛出异常\n   public int read() throws IOException{}\n    //从输入流中读取数据的下一个字节\n    public int read(byte[] b) throws IOException{}\n    //从输入流中读取一定数量的字节,并将其存储在缓冲区数组b中\n    public int available() throws IOException{}\n    //返回从该输入流中可以读取的字节数\n  ```\n   #### 4.2.2 写入文件 FileOutputStream\n   该类就是创建一个文件写入数据,没有该文件的话就创建文件\n```angular2html\nOutputStream f = new FileOutputStream(\"a.txt\");\n   ##### 4.2.3 方法\n    1 public void close() throws IOException{}\n      //关闭文件输出流释放流有关是系统资源\n    2 protected void finalize() throws IOException{}\n        //清除该文件的链接.确保不会引用文件输出流是调用的close方法,抛出异常\n    3 public void write(int b) throws IOException{}\n        //将指定的字节写入此文件输出流\n    4 public void write(byte[] b) throws IOException{}\n        //将b.length字节从指定的字节数组写入此文件输出流中\n  \n```\n ## 看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了\n ## 5.目录\n  1 mkdir();\n  2 读取目录其实就是file目录它包含文件和其他文件\n  删除目录 \n  Java.Io.File.delete();\n\n## 6.辗转相除法\n```\ngetGcd(int a,int b){\n   if(b ==0){\n   return a;\n   }else {return getGcd(a,a%b);\n}\n```\n}\n\n```\n\n\n\n\n\n","source":"_posts/JavaLiu.md","raw":"---\ntitle: JavaLiu\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-07-04 17:29:15\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n#  Java 流(Stream)、文件(File)和IO\n\n## 1. 流的概念\nJava.io包含了所有操作输入,输出需要的类,这些流类代表了输入和输出目标\nJava包中的流支持很多格式,比如基本类型,对象,本地化字符集等等\n一个流就是一个数据的序列,输入流就是表示从一个源读取数据,输出流就是表示向一个目标写数据\n\n## 2. 读写控制台输入\nJava输入就是System.in完成\n\n代码段\n```java\n我们可以吧System.in包装再一个BufferedReader对象来创建一个字符流\nBufferedReader br = new Burreredreader(new InputStreamReader(System.in));\n\nBufferedReader br = new BufferedReader(new System.in);\nString str = br.readLine();\nBufferedReader br = new BufferedReader(new System.in);\n\n```\n## 3. 控制台输出\n输出print和println,这些方法都是由PrintStream定义,System.out就是该类对象的引用\nPrintStream继承了OutputStream类,还实现了方法write方法,这样的话write就也可以控制输出还是输出了\nvoid write(int byteval)\n\n```angular2html\n        int b;\n        b = 'A';\n        System.out.write(b);\n```\nwrite不常用还是print好用一点\nJDK5 以后的话可以使用 **Java Scanner**类控制输入\n\n## 4.读写文件\nJava.io.File类代表了文件和目录路径名的抽象表示,主要用于文件和目录的创建,查找和删除等操作\nFile类的对象代表了磁盘上的实际存在的文件和目录\n\n### 4.1 io流\n    4.1.1 字符流\n    4.1.1.1 Reader\n    4.1.1.2 Writer\n    4.1.2 字节流\n    4.1.2.1 InputStream\n    4.1.2.2 OutputStream\n### 4.2 文件流 \n   #### 4.2.1 读取文件 FileInputStream\n   ```\n   InputStream f = new File(\"a.txt\");\n   // or \n   File f = new File(\"a.txt\");\n   InputStream in = new FileInputStream(f);\n   // 创建了FileInputStream对象以后就可以使用下面的方法读取流或者进行其他流的操作\n   public void close() throws IOException()\n   //关闭文件输入流释放流有关是系统资源\n   protected void finalize() throws IOException{}\n   //清除该文件的链接.确保不会引用文件输入流是调用的close方法,抛出异常\n   public int read() throws IOException{}\n    //从输入流中读取数据的下一个字节\n    public int read(byte[] b) throws IOException{}\n    //从输入流中读取一定数量的字节,并将其存储在缓冲区数组b中\n    public int available() throws IOException{}\n    //返回从该输入流中可以读取的字节数\n  ```\n   #### 4.2.2 写入文件 FileOutputStream\n   该类就是创建一个文件写入数据,没有该文件的话就创建文件\n```angular2html\nOutputStream f = new FileOutputStream(\"a.txt\");\n   ##### 4.2.3 方法\n    1 public void close() throws IOException{}\n      //关闭文件输出流释放流有关是系统资源\n    2 protected void finalize() throws IOException{}\n        //清除该文件的链接.确保不会引用文件输出流是调用的close方法,抛出异常\n    3 public void write(int b) throws IOException{}\n        //将指定的字节写入此文件输出流\n    4 public void write(byte[] b) throws IOException{}\n        //将b.length字节从指定的字节数组写入此文件输出流中\n  \n```\n ## 看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了\n ## 5.目录\n  1 mkdir();\n  2 读取目录其实就是file目录它包含文件和其他文件\n  删除目录 \n  Java.Io.File.delete();\n\n## 6.辗转相除法\n```\ngetGcd(int a,int b){\n   if(b ==0){\n   return a;\n   }else {return getGcd(a,a%b);\n}\n```\n}\n\n```\n\n\n\n\n\n","slug":"JavaLiu","published":1,"updated":"2023-07-08T09:21:34.931Z","_id":"cljohamy5000088u3dsbr10bo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java-流-Stream-、文件-File-和IO\"><a href=\"#Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"Java 流(Stream)、文件(File)和IO\"></a>Java 流(Stream)、文件(File)和IO</h1><h2 id=\"1-流的概念\"><a href=\"#1-流的概念\" class=\"headerlink\" title=\"1. 流的概念\"></a>1. 流的概念</h2><p>Java.io包含了所有操作输入,输出需要的类,这些流类代表了输入和输出目标<br>Java包中的流支持很多格式,比如基本类型,对象,本地化字符集等等<br>一个流就是一个数据的序列,输入流就是表示从一个源读取数据,输出流就是表示向一个目标写数据</p>\n<h2 id=\"2-读写控制台输入\"><a href=\"#2-读写控制台输入\" class=\"headerlink\" title=\"2. 读写控制台输入\"></a>2. 读写控制台输入</h2><p>Java输入就是System.in完成</p>\n<p>代码段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们可以吧System.in包装再一个BufferedReader对象来创建一个字符流</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Burreredreader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">System</span>.in);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> br.readLine();</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">System</span>.in);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-控制台输出\"><a href=\"#3-控制台输出\" class=\"headerlink\" title=\"3. 控制台输出\"></a>3. 控制台输出</h2><p>输出print和println,这些方法都是由PrintStream定义,System.out就是该类对象的引用<br>PrintStream继承了OutputStream类,还实现了方法write方法,这样的话write就也可以控制输出还是输出了<br>void write(int byteval)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int b;</span><br><span class=\"line\">b = &#x27;A&#x27;;</span><br><span class=\"line\">System.out.write(b);</span><br></pre></td></tr></table></figure>\n<p>write不常用还是print好用一点<br>JDK5 以后的话可以使用 <strong>Java Scanner</strong>类控制输入</p>\n<h2 id=\"4-读写文件\"><a href=\"#4-读写文件\" class=\"headerlink\" title=\"4.读写文件\"></a>4.读写文件</h2><p>Java.io.File类代表了文件和目录路径名的抽象表示,主要用于文件和目录的创建,查找和删除等操作<br>File类的对象代表了磁盘上的实际存在的文件和目录</p>\n<h3 id=\"4-1-io流\"><a href=\"#4-1-io流\" class=\"headerlink\" title=\"4.1 io流\"></a>4.1 io流</h3><pre><code>4.1.1 字符流\n4.1.1.1 Reader\n4.1.1.2 Writer\n4.1.2 字节流\n4.1.2.1 InputStream\n4.1.2.2 OutputStream\n</code></pre>\n<h3 id=\"4-2-文件流\"><a href=\"#4-2-文件流\" class=\"headerlink\" title=\"4.2 文件流\"></a>4.2 文件流</h3><h4 id=\"4-2-1-读取文件-FileInputStream\"><a href=\"#4-2-1-读取文件-FileInputStream\" class=\"headerlink\" title=\"4.2.1 读取文件 FileInputStream\"></a>4.2.1 读取文件 FileInputStream</h4>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputStream f = new File(&quot;a.txt&quot;);</span><br><span class=\"line\">// or </span><br><span class=\"line\">File f = new File(&quot;a.txt&quot;);</span><br><span class=\"line\">InputStream in = new FileInputStream(f);</span><br><span class=\"line\">// 创建了FileInputStream对象以后就可以使用下面的方法读取流或者进行其他流的操作</span><br><span class=\"line\">public void close() throws IOException()</span><br><span class=\"line\">//关闭文件输入流释放流有关是系统资源</span><br><span class=\"line\">protected void finalize() throws IOException&#123;&#125;</span><br><span class=\"line\">//清除该文件的链接.确保不会引用文件输入流是调用的close方法,抛出异常</span><br><span class=\"line\">public int read() throws IOException&#123;&#125;</span><br><span class=\"line\"> //从输入流中读取数据的下一个字节</span><br><span class=\"line\"> public int read(byte[] b) throws IOException&#123;&#125;</span><br><span class=\"line\"> //从输入流中读取一定数量的字节,并将其存储在缓冲区数组b中</span><br><span class=\"line\"> public int available() throws IOException&#123;&#125;</span><br><span class=\"line\"> //返回从该输入流中可以读取的字节数</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-写入文件-FileOutputStream\"><a href=\"#4-2-2-写入文件-FileOutputStream\" class=\"headerlink\" title=\"4.2.2 写入文件 FileOutputStream\"></a>4.2.2 写入文件 FileOutputStream</h4><p>   该类就是创建一个文件写入数据,没有该文件的话就创建文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStream f = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class=\"line\">   ##### 4.2.3 方法</span><br><span class=\"line\">    1 public void close() throws IOException&#123;&#125;</span><br><span class=\"line\">      //关闭文件输出流释放流有关是系统资源</span><br><span class=\"line\">    2 protected void finalize() throws IOException&#123;&#125;</span><br><span class=\"line\">        //清除该文件的链接.确保不会引用文件输出流是调用的close方法,抛出异常</span><br><span class=\"line\">    3 public void write(int b) throws IOException&#123;&#125;</span><br><span class=\"line\">        //将指定的字节写入此文件输出流</span><br><span class=\"line\">    4 public void write(byte[] b) throws IOException&#123;&#125;</span><br><span class=\"line\">        //将b.length字节从指定的字节数组写入此文件输出流中</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h2 id=\"看源码的话结合idea软件里面的和alt加-空格打jdk然后再看就好了\"><a href=\"#看源码的话结合idea软件里面的和alt加-空格打jdk然后再看就好了\" class=\"headerlink\" title=\"看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了\"></a>看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了</h2><h2 id=\"5-目录\"><a href=\"#5-目录\" class=\"headerlink\" title=\"5.目录\"></a>5.目录</h2><p>  1 mkdir();<br>  2 读取目录其实就是file目录它包含文件和其他文件<br>  删除目录<br>  Java.Io.File.delete();</p>\n<h2 id=\"6-辗转相除法\"><a href=\"#6-辗转相除法\" class=\"headerlink\" title=\"6.辗转相除法\"></a>6.辗转相除法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getGcd(int a,int b)&#123;</span><br><span class=\"line\">   if(b ==0)&#123;</span><br><span class=\"line\">   return a;</span><br><span class=\"line\">   &#125;else &#123;return getGcd(a,a%b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>}</p>\n<pre><code>\n\n\n\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Java-流-Stream-、文件-File-和IO\"><a href=\"#Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"Java 流(Stream)、文件(File)和IO\"></a>Java 流(Stream)、文件(File)和IO</h1><h2 id=\"1-流的概念\"><a href=\"#1-流的概念\" class=\"headerlink\" title=\"1. 流的概念\"></a>1. 流的概念</h2><p>Java.io包含了所有操作输入,输出需要的类,这些流类代表了输入和输出目标<br>Java包中的流支持很多格式,比如基本类型,对象,本地化字符集等等<br>一个流就是一个数据的序列,输入流就是表示从一个源读取数据,输出流就是表示向一个目标写数据</p>\n<h2 id=\"2-读写控制台输入\"><a href=\"#2-读写控制台输入\" class=\"headerlink\" title=\"2. 读写控制台输入\"></a>2. 读写控制台输入</h2><p>Java输入就是System.in完成</p>\n<p>代码段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们可以吧System.in包装再一个BufferedReader对象来创建一个字符流</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Burreredreader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">System</span>.in);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> br.readLine();</span><br><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">System</span>.in);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-控制台输出\"><a href=\"#3-控制台输出\" class=\"headerlink\" title=\"3. 控制台输出\"></a>3. 控制台输出</h2><p>输出print和println,这些方法都是由PrintStream定义,System.out就是该类对象的引用<br>PrintStream继承了OutputStream类,还实现了方法write方法,这样的话write就也可以控制输出还是输出了<br>void write(int byteval)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int b;</span><br><span class=\"line\">b = &#x27;A&#x27;;</span><br><span class=\"line\">System.out.write(b);</span><br></pre></td></tr></table></figure>\n<p>write不常用还是print好用一点<br>JDK5 以后的话可以使用 <strong>Java Scanner</strong>类控制输入</p>\n<h2 id=\"4-读写文件\"><a href=\"#4-读写文件\" class=\"headerlink\" title=\"4.读写文件\"></a>4.读写文件</h2><p>Java.io.File类代表了文件和目录路径名的抽象表示,主要用于文件和目录的创建,查找和删除等操作<br>File类的对象代表了磁盘上的实际存在的文件和目录</p>\n<h3 id=\"4-1-io流\"><a href=\"#4-1-io流\" class=\"headerlink\" title=\"4.1 io流\"></a>4.1 io流</h3><pre><code>4.1.1 字符流\n4.1.1.1 Reader\n4.1.1.2 Writer\n4.1.2 字节流\n4.1.2.1 InputStream\n4.1.2.2 OutputStream\n</code></pre>\n<h3 id=\"4-2-文件流\"><a href=\"#4-2-文件流\" class=\"headerlink\" title=\"4.2 文件流\"></a>4.2 文件流</h3><h4 id=\"4-2-1-读取文件-FileInputStream\"><a href=\"#4-2-1-读取文件-FileInputStream\" class=\"headerlink\" title=\"4.2.1 读取文件 FileInputStream\"></a>4.2.1 读取文件 FileInputStream</h4>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputStream f = new File(&quot;a.txt&quot;);</span><br><span class=\"line\">// or </span><br><span class=\"line\">File f = new File(&quot;a.txt&quot;);</span><br><span class=\"line\">InputStream in = new FileInputStream(f);</span><br><span class=\"line\">// 创建了FileInputStream对象以后就可以使用下面的方法读取流或者进行其他流的操作</span><br><span class=\"line\">public void close() throws IOException()</span><br><span class=\"line\">//关闭文件输入流释放流有关是系统资源</span><br><span class=\"line\">protected void finalize() throws IOException&#123;&#125;</span><br><span class=\"line\">//清除该文件的链接.确保不会引用文件输入流是调用的close方法,抛出异常</span><br><span class=\"line\">public int read() throws IOException&#123;&#125;</span><br><span class=\"line\"> //从输入流中读取数据的下一个字节</span><br><span class=\"line\"> public int read(byte[] b) throws IOException&#123;&#125;</span><br><span class=\"line\"> //从输入流中读取一定数量的字节,并将其存储在缓冲区数组b中</span><br><span class=\"line\"> public int available() throws IOException&#123;&#125;</span><br><span class=\"line\"> //返回从该输入流中可以读取的字节数</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-2-写入文件-FileOutputStream\"><a href=\"#4-2-2-写入文件-FileOutputStream\" class=\"headerlink\" title=\"4.2.2 写入文件 FileOutputStream\"></a>4.2.2 写入文件 FileOutputStream</h4><p>   该类就是创建一个文件写入数据,没有该文件的话就创建文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStream f = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class=\"line\">   ##### 4.2.3 方法</span><br><span class=\"line\">    1 public void close() throws IOException&#123;&#125;</span><br><span class=\"line\">      //关闭文件输出流释放流有关是系统资源</span><br><span class=\"line\">    2 protected void finalize() throws IOException&#123;&#125;</span><br><span class=\"line\">        //清除该文件的链接.确保不会引用文件输出流是调用的close方法,抛出异常</span><br><span class=\"line\">    3 public void write(int b) throws IOException&#123;&#125;</span><br><span class=\"line\">        //将指定的字节写入此文件输出流</span><br><span class=\"line\">    4 public void write(byte[] b) throws IOException&#123;&#125;</span><br><span class=\"line\">        //将b.length字节从指定的字节数组写入此文件输出流中</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h2 id=\"看源码的话结合idea软件里面的和alt加-空格打jdk然后再看就好了\"><a href=\"#看源码的话结合idea软件里面的和alt加-空格打jdk然后再看就好了\" class=\"headerlink\" title=\"看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了\"></a>看源码的话结合idea软件里面的和alt加+空格打jdk然后再看就好了</h2><h2 id=\"5-目录\"><a href=\"#5-目录\" class=\"headerlink\" title=\"5.目录\"></a>5.目录</h2><p>  1 mkdir();<br>  2 读取目录其实就是file目录它包含文件和其他文件<br>  删除目录<br>  Java.Io.File.delete();</p>\n<h2 id=\"6-辗转相除法\"><a href=\"#6-辗转相除法\" class=\"headerlink\" title=\"6.辗转相除法\"></a>6.辗转相除法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getGcd(int a,int b)&#123;</span><br><span class=\"line\">   if(b ==0)&#123;</span><br><span class=\"line\">   return a;</span><br><span class=\"line\">   &#125;else &#123;return getGcd(a,a%b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>}</p>\n<pre><code>\n\n\n\n</code></pre>\n"},{"title":"java期末考试复习1","top":false,"cover":false,"toc":true,"mathjax":false,"date":"2023-07-05T01:13:58.000Z","author":null,"img":null,"coverImg":null,"password":null,"summary":null,"_content":"# 1 选择题\n## 1.1 选择题1\n# 2 代码优化段\n```angular2html\nclass L {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine(); //10 0 0 0 10 10 0 0 0 10 11 12\n        int[] array = Arrays.stream(s.split(\"\\\\s\"))\n                .mapToInt(Integer::parseInt)\n                .toArray();\n        int i = scanner.nextInt();\n        for (int i1 = 0; i1 < i; i1++) {\n            array[scanner.nextInt()] += 10;\n        }\n\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i1 : array) {\n            stringBuffer.append(i1).append(\" \");\n        }\n        System.out.println(stringBuffer.toString().trim());\n    }\n}\n\n```\n## 2.1 正则表达式\n   1 解释\n   就是定义了一些字符串的模式\n   2 实例\n   this is text  =  this is text\n   this\\s+is\\s+text = this 后面可可以匹配多个空格 + is + 若干个空格+ text\n   ^ 定义以什么开始\n   \\d 匹配一个或者多个数字\n   ? 括号里面的选项是可以选的\n   \\. 匹配\".\"\n   ```\n   String s = Scanner.nextline();\n   s.spilt(\"\\\\s   \").stream;\n   // 后面就是要是有点判断条件不知道的话就查正则表达式就好了\n   \n   ```\n ## 3.date类\n ```\n Date date = new Date();\n DateFormat dateF = new SimpleDateFormat(\"yyyy-MM-dd\");\n Date = dateF.parse(\"2021-07-05\");\n //这里就是先创建一个date类,然后一个格式化的类,最后把String格式化变成date形式,最后做函数的参数\n    //这里的格式化类是DateFormat,然后是SimpleDateFormat,最后是parse函数\n    //这里的parse函数是把String格式化成date形式\n ```\n// 先把对象放在map里面\n// 然后把map放在list里面\n//  再对list 进行Collections.sort处理\n```angular2html\nCollections.sort(students,new Comparator<Student>()\n   {\n    @Override\n    public int compare(Student o1, Student o2) {\n        return o1.getAge()-o2.getAge();\n    }\n});\n\n//最后输出就好\n\n```\n## 4.选择题\n1 .抽象类的子类如果实现了所有的抽象类的方法,可以定义为不抽象类\n2 . 啥时候发生成员方法的重写现象\n父类和子类成员方法名称相同,参数列表相同的情况下\n3 .在子类中,如何访问父类的被覆盖的成员方法假设是public访问记\n利用super关键字访问\n4 .定义了一个int型二维数组后a[6][7],数组a[3][4]前的数组元素个数为25个\n5 .使用接口的方法是先定义一个接口变量,将接口变量指向实现接口的对象\n6 .以下数组定义正确的是int []score = new int[5]\n7 . 在int [3], a[3] = 0; 是错误的调用,因为数组下标是从0开始的\n8 . java的引用类型不包括boolean\n9 . i和ii 都是错的,因为上面的调用全是classone\n10 . 在创建子类对象时会调用父类的构造方法,子类构造方法会先于父类执行错\n     是如果子类的方法是没调用父类发构造方法,子类构造方法就会默认调用父类不带参数的构造方法\n\n\n\n//","source":"_posts/java期末考试复习1.md","raw":"---\ntitle: java期末考试复习1\ntop: false\ncover: false\ntoc: true\nmathjax: false\ndate: 2023-07-05 09:13:58\nauthor:\nimg:\ncoverImg:\npassword:\nsummary:\n---\n# 1 选择题\n## 1.1 选择题1\n# 2 代码优化段\n```angular2html\nclass L {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine(); //10 0 0 0 10 10 0 0 0 10 11 12\n        int[] array = Arrays.stream(s.split(\"\\\\s\"))\n                .mapToInt(Integer::parseInt)\n                .toArray();\n        int i = scanner.nextInt();\n        for (int i1 = 0; i1 < i; i1++) {\n            array[scanner.nextInt()] += 10;\n        }\n\n        StringBuffer stringBuffer = new StringBuffer();\n        for (int i1 : array) {\n            stringBuffer.append(i1).append(\" \");\n        }\n        System.out.println(stringBuffer.toString().trim());\n    }\n}\n\n```\n## 2.1 正则表达式\n   1 解释\n   就是定义了一些字符串的模式\n   2 实例\n   this is text  =  this is text\n   this\\s+is\\s+text = this 后面可可以匹配多个空格 + is + 若干个空格+ text\n   ^ 定义以什么开始\n   \\d 匹配一个或者多个数字\n   ? 括号里面的选项是可以选的\n   \\. 匹配\".\"\n   ```\n   String s = Scanner.nextline();\n   s.spilt(\"\\\\s   \").stream;\n   // 后面就是要是有点判断条件不知道的话就查正则表达式就好了\n   \n   ```\n ## 3.date类\n ```\n Date date = new Date();\n DateFormat dateF = new SimpleDateFormat(\"yyyy-MM-dd\");\n Date = dateF.parse(\"2021-07-05\");\n //这里就是先创建一个date类,然后一个格式化的类,最后把String格式化变成date形式,最后做函数的参数\n    //这里的格式化类是DateFormat,然后是SimpleDateFormat,最后是parse函数\n    //这里的parse函数是把String格式化成date形式\n ```\n// 先把对象放在map里面\n// 然后把map放在list里面\n//  再对list 进行Collections.sort处理\n```angular2html\nCollections.sort(students,new Comparator<Student>()\n   {\n    @Override\n    public int compare(Student o1, Student o2) {\n        return o1.getAge()-o2.getAge();\n    }\n});\n\n//最后输出就好\n\n```\n## 4.选择题\n1 .抽象类的子类如果实现了所有的抽象类的方法,可以定义为不抽象类\n2 . 啥时候发生成员方法的重写现象\n父类和子类成员方法名称相同,参数列表相同的情况下\n3 .在子类中,如何访问父类的被覆盖的成员方法假设是public访问记\n利用super关键字访问\n4 .定义了一个int型二维数组后a[6][7],数组a[3][4]前的数组元素个数为25个\n5 .使用接口的方法是先定义一个接口变量,将接口变量指向实现接口的对象\n6 .以下数组定义正确的是int []score = new int[5]\n7 . 在int [3], a[3] = 0; 是错误的调用,因为数组下标是从0开始的\n8 . java的引用类型不包括boolean\n9 . i和ii 都是错的,因为上面的调用全是classone\n10 . 在创建子类对象时会调用父类的构造方法,子类构造方法会先于父类执行错\n     是如果子类的方法是没调用父类发构造方法,子类构造方法就会默认调用父类不带参数的构造方法\n\n\n\n//","slug":"java期末考试复习1","published":1,"updated":"2023-07-07T15:32:44.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cljtsr67b00000wu34reje4e7","content":"<h1 id=\"1-选择题\"><a href=\"#1-选择题\" class=\"headerlink\" title=\"1 选择题\"></a>1 选择题</h1><h2 id=\"1-1-选择题1\"><a href=\"#1-1-选择题1\" class=\"headerlink\" title=\"1.1 选择题1\"></a>1.1 选择题1</h2><h1 id=\"2-代码优化段\"><a href=\"#2-代码优化段\" class=\"headerlink\" title=\"2 代码优化段\"></a>2 代码优化段</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class L &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Scanner scanner = new Scanner(System.in);</span><br><span class=\"line\">        String s = scanner.nextLine(); //10 0 0 0 10 10 0 0 0 10 11 12</span><br><span class=\"line\">        int[] array = Arrays.stream(s.split(&quot;\\\\s&quot;))</span><br><span class=\"line\">                .mapToInt(Integer::parseInt)</span><br><span class=\"line\">                .toArray();</span><br><span class=\"line\">        int i = scanner.nextInt();</span><br><span class=\"line\">        for (int i1 = 0; i1 &lt; i; i1++) &#123;</span><br><span class=\"line\">            array[scanner.nextInt()] += 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</span><br><span class=\"line\">        for (int i1 : array) &#123;</span><br><span class=\"line\">            stringBuffer.append(i1).append(&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stringBuffer.toString().trim());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-正则表达式\"><a href=\"#2-1-正则表达式\" class=\"headerlink\" title=\"2.1 正则表达式\"></a>2.1 正则表达式</h2><p>   1 解释<br>   就是定义了一些字符串的模式<br>   2 实例<br>   this is text  =  this is text<br>   this\\s+is\\s+text = this 后面可可以匹配多个空格 + is + 若干个空格+ text<br>   ^ 定义以什么开始<br>   \\d 匹配一个或者多个数字<br>   ? 括号里面的选项是可以选的<br>   . 匹配”.”<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = Scanner.nextline();</span><br><span class=\"line\">s.spilt(&quot;\\\\s   &quot;).stream;</span><br><span class=\"line\">// 后面就是要是有点判断条件不知道的话就查正则表达式就好了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-date类\"><a href=\"#3-date类\" class=\"headerlink\" title=\"3.date类\"></a>3.date类</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = new Date();</span><br><span class=\"line\">DateFormat dateF = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">Date = dateF.parse(&quot;2021-07-05&quot;);</span><br><span class=\"line\">//这里就是先创建一个date类,然后一个格式化的类,最后把String格式化变成date形式,最后做函数的参数</span><br><span class=\"line\">   //这里的格式化类是DateFormat,然后是SimpleDateFormat,最后是parse函数</span><br><span class=\"line\">   //这里的parse函数是把String格式化成date形式</span><br></pre></td></tr></table></figure>\n<p>// 先把对象放在map里面<br>// 然后把map放在list里面<br>//  再对list 进行Collections.sort处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.sort(students,new Comparator&lt;Student&gt;()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compare(Student o1, Student o2) &#123;</span><br><span class=\"line\">        return o1.getAge()-o2.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//最后输出就好</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-选择题\"><a href=\"#4-选择题\" class=\"headerlink\" title=\"4.选择题\"></a>4.选择题</h2><p>1 .抽象类的子类如果实现了所有的抽象类的方法,可以定义为不抽象类<br>2 . 啥时候发生成员方法的重写现象<br>父类和子类成员方法名称相同,参数列表相同的情况下<br>3 .在子类中,如何访问父类的被覆盖的成员方法假设是public访问记<br>利用super关键字访问<br>4 .定义了一个int型二维数组后a[6][7],数组a[3][4]前的数组元素个数为25个<br>5 .使用接口的方法是先定义一个接口变量,将接口变量指向实现接口的对象<br>6 .以下数组定义正确的是int []score = new int[5]<br>7 . 在int [3], a[3] = 0; 是错误的调用,因为数组下标是从0开始的<br>8 . java的引用类型不包括boolean<br>9 . i和ii 都是错的,因为上面的调用全是classone<br>10 . 在创建子类对象时会调用父类的构造方法,子类构造方法会先于父类执行错<br>     是如果子类的方法是没调用父类发构造方法,子类构造方法就会默认调用父类不带参数的构造方法</p>\n<p>//</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"MaJang","introduction":"I am not a master, just looking for the master's footsteps.","url":"http://luokangyuan.com/","title":"Read More"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"Blinkfox","introduction":"Hello, I'm blinkfox, I like programming.","url":"https://blinkfox.github.io/","title":"Visit Blog"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"Ordinary steps can also go out of the great journey.","url":"https://me.csdn.net/jlh912008548","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"1-选择题\"><a href=\"#1-选择题\" class=\"headerlink\" title=\"1 选择题\"></a>1 选择题</h1><h2 id=\"1-1-选择题1\"><a href=\"#1-1-选择题1\" class=\"headerlink\" title=\"1.1 选择题1\"></a>1.1 选择题1</h2><h1 id=\"2-代码优化段\"><a href=\"#2-代码优化段\" class=\"headerlink\" title=\"2 代码优化段\"></a>2 代码优化段</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class L &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Scanner scanner = new Scanner(System.in);</span><br><span class=\"line\">        String s = scanner.nextLine(); //10 0 0 0 10 10 0 0 0 10 11 12</span><br><span class=\"line\">        int[] array = Arrays.stream(s.split(&quot;\\\\s&quot;))</span><br><span class=\"line\">                .mapToInt(Integer::parseInt)</span><br><span class=\"line\">                .toArray();</span><br><span class=\"line\">        int i = scanner.nextInt();</span><br><span class=\"line\">        for (int i1 = 0; i1 &lt; i; i1++) &#123;</span><br><span class=\"line\">            array[scanner.nextInt()] += 10;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuffer stringBuffer = new StringBuffer();</span><br><span class=\"line\">        for (int i1 : array) &#123;</span><br><span class=\"line\">            stringBuffer.append(i1).append(&quot; &quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stringBuffer.toString().trim());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-1-正则表达式\"><a href=\"#2-1-正则表达式\" class=\"headerlink\" title=\"2.1 正则表达式\"></a>2.1 正则表达式</h2><p>   1 解释<br>   就是定义了一些字符串的模式<br>   2 实例<br>   this is text  =  this is text<br>   this\\s+is\\s+text = this 后面可可以匹配多个空格 + is + 若干个空格+ text<br>   ^ 定义以什么开始<br>   \\d 匹配一个或者多个数字<br>   ? 括号里面的选项是可以选的<br>   . 匹配”.”<br>   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = Scanner.nextline();</span><br><span class=\"line\">s.spilt(&quot;\\\\s   &quot;).stream;</span><br><span class=\"line\">// 后面就是要是有点判断条件不知道的话就查正则表达式就好了</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-date类\"><a href=\"#3-date类\" class=\"headerlink\" title=\"3.date类\"></a>3.date类</h2> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date date = new Date();</span><br><span class=\"line\">DateFormat dateF = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class=\"line\">Date = dateF.parse(&quot;2021-07-05&quot;);</span><br><span class=\"line\">//这里就是先创建一个date类,然后一个格式化的类,最后把String格式化变成date形式,最后做函数的参数</span><br><span class=\"line\">   //这里的格式化类是DateFormat,然后是SimpleDateFormat,最后是parse函数</span><br><span class=\"line\">   //这里的parse函数是把String格式化成date形式</span><br></pre></td></tr></table></figure>\n<p>// 先把对象放在map里面<br>// 然后把map放在list里面<br>//  再对list 进行Collections.sort处理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collections.sort(students,new Comparator&lt;Student&gt;()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int compare(Student o1, Student o2) &#123;</span><br><span class=\"line\">        return o1.getAge()-o2.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//最后输出就好</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-选择题\"><a href=\"#4-选择题\" class=\"headerlink\" title=\"4.选择题\"></a>4.选择题</h2><p>1 .抽象类的子类如果实现了所有的抽象类的方法,可以定义为不抽象类<br>2 . 啥时候发生成员方法的重写现象<br>父类和子类成员方法名称相同,参数列表相同的情况下<br>3 .在子类中,如何访问父类的被覆盖的成员方法假设是public访问记<br>利用super关键字访问<br>4 .定义了一个int型二维数组后a[6][7],数组a[3][4]前的数组元素个数为25个<br>5 .使用接口的方法是先定义一个接口变量,将接口变量指向实现接口的对象<br>6 .以下数组定义正确的是int []score = new int[5]<br>7 . 在int [3], a[3] = 0; 是错误的调用,因为数组下标是从0开始的<br>8 . java的引用类型不包括boolean<br>9 . i和ii 都是错的,因为上面的调用全是classone<br>10 . 在创建子类对象时会调用父类的构造方法,子类构造方法会先于父类执行错<br>     是如果子类的方法是没调用父类发构造方法,子类构造方法就会默认调用父类不带参数的构造方法</p>\n<p>//</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}